#pragma once

#include <cinttypes>

/*
*	This is an automatically generated file and should not be modified
*/
namespace str::cp::detail {
	enum class GraphemeType : uint8_t {
		other,
		prepend,
		cr,
		lf,
		control,
		extend,
		regional_indicator,
		spacingmark,
		l,
		v,
		t,
		lv,
		lvt,
		zwj,
		extended_pictographic
	};
	inline constexpr detail::GraphemeType LookupGraphemeTypeAscii(char32_t cp) {
		if (cp >= U' ' && cp <= U'~')
			return detail::GraphemeType::other;
		if (cp == U'\r')
			return detail::GraphemeType::cr;
		if (cp == U'\n')
			return detail::GraphemeType::lf;
		return detail::GraphemeType::control;
	}
	static constexpr uint8_t GraphemeValue[1444] = {
		  4, 14,  4, 14,  5,  5,  5,  5,  5,  5,  5,  1,  5,  4,  5,  5,  5,  1,  5,  5,  5,  1,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
		  1,  5,  5,  1,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  5,  5,  7,  5,  5,  7,  5,  7,  7,  5,  5,  5,  5,  5,  7,  5,  7,
		  5,  5,  5,  5,  5,  5,  5,  7,  5,  7,  5,  5,  7,  7,  5,  5,  5,  5,  7,  5,  5,  7,  5,  7,  7,  5,  5,  5,  5,  5,  7,  5,
		  7,  7,  7,  5,  5,  5,  7,  5,  5,  5,  7,  5,  5,  5,  5,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  7,  5,  5,  5,  7,  5,  7,
		  5,  5,  7,  5,  7,  7,  5,  1,  5,  5,  5,  7,  5,  5,  7,  5,  5,  7,  5,  7,  5,  7,  5,  5,  5,  7,  5,  5,  5,  5,  5,  5,
		  7,  5,  7,  5,  5,  5,  5,  5,  5,  7,  5,  5,  7,  5,  7,  5,  5,  5,  5,  7,  5,  5,  5,  8,  9, 10,  5,  5,  7,  5,  7,  5,
		  5,  5,  7,  5,  7,  5,  7,  5,  5,  5,  4,  5,  5,  5,  5,  7,  5,  7,  7,  5,  7,  5,  5,  7,  5,  7,  5,  7,  5,  5,  5,  5,
		  7,  5,  5,  5,  5,  7,  5,  7,  5,  7,  5,  7,  5,  5,  7,  7,  5,  7,  5,  7,  5,  5,  7,  5,  7,  5,  7,  5,  7,  7,  5,  7,
		  5,  5,  5,  7,  5,  5,  5,  7,  5,  5,  4,  5, 13,  4,  4, 14, 14,  4,  5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
		 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  5,  5,  5,
		  5, 14, 14,  5, 14, 14,  5,  5,  5,  5,  5,  5,  5,  7,  5,  7,  5,  7,  7,  5,  5,  5,  5,  5,  7,  8,  5,  7,  5,  7,  5,  7,
		  5,  7,  5,  5,  7,  5,  7,  5,  5,  5,  7,  5,  5,  5,  5,  5,  5,  7,  5,  7,  7,  5,  7,  5,  7,  5,  7,  7,  5, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11,
		 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12,  9, 10,  5,  5,  5,
		  4,  5,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  7,  5,  7,  5,  5,  5,  5,  7,  7,  5,  7,  5,  1,  5,  1,
		  5,  5,  7,  5,  7,  5,  5,  7,  7,  5,  7,  1,  5,  7,  5,  7,  5,  7,  5,  7,  5,  5,  5,  5,  7,  5,  5,  7,  5,  5,  7,  5,
		  7,  7,  7,  5,  7,  5,  5,  7,  5,  7,  5,  7,  5,  5,  5,  7,  5,  7,  5,  7,  5,  7,  5,  7,  5,  5,  7,  5,  7,  5,  7,  5,
		  5,  7,  5,  7,  5,  7,  5,  5,  7,  5,  7,  5,  7,  5,  5,  5,  7,  5,  7,  5,  7,  5,  5,  7,  7,  5,  7,  5,  1,  7,  1,  7,
		  5,  7,  5,  5,  7,  5,  7,  5,  5,  7,  1,  5,  5,  5,  7,  5,  1,  5,  7,  5,  7,  5,  5,  7,  5,  5,  7,  5,  7,  5,  7,  5,
		  5,  5,  5,  5,  1,  5,  7,  5,  7,  5,  7,  5,  5,  7,  5,  1,  7,  7,  5,  7,  5,  7,  5,  4,  5,  5,  5,  5,  5,  7,  5,  5,
		  7,  5,  4,  5,  5,  5,  7,  5,  7,  5,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
		  5, 14, 14, 14, 14, 14, 14, 14, 14,  6, 14, 14, 14, 14, 14, 14,  5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  4,
		  5,  4,  5,  4
	};
	static constexpr uint16_t GraphemeSize[1444] = {
		 31,  0,  0,  0,111,  6, 44,  0,  1,  1,  0,  5, 10,  0, 20,  0,  6,  0,  5,  1,  3,  0,  0, 26, 10,  8,  0,  3,  8,  2,  4,  2,
		  1,  7, 23,  0, 31,  0,  0,  0,  0,  2,  7,  3,  0,  1,  6,  1,  0,  1,  0,  0,  1,  3,  1,  1,  0,  0,  1,  0,  1,  0,  0,  2,
		  1,  1,  2,  0,  1,  0,  1,  0,  0,  2,  4,  1,  0,  1,  0,  1,  5,  0,  1,  0,  1,  0,  3,  1,  1,  0,  2,  1,  0,  0,  0,  0,
		  1,  2,  2,  0,  0,  0,  2,  0,  0,  2,  3,  2,  3,  1,  1,  0,  1,  0,  0,  0,  1,  0,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,
		  1,  0,  1,  3,  2,  2,  0,  0,  0,  1,  0,  1,  0,  0,  1,  2,  0,  6,  0,  1,  0,  0,  6,  7,  0,  0,  8,  6,  1,  0,  0,  0,
		  1, 13,  0,  4,  1, 10, 35,  0,  3,  0,  5,  1,  1,  1,  1,  1,  2,  3,  0,  0,  1,  0,  0, 95, 71, 87,  2,  2,  0,  1,  0,  1,
		  1,  1,  0,  6,  7,  0,  1, 10,  0,  2,  0,  0,  1,  0,  2,  3,  1,  2,  1,  0,  5,  2,  1,  1,  0,  0,  0,  0,  6,  0,  0,  7,
		  5,  9,  0, 30,  3,  0,  6,  0,  0,  4,  0,  1,  8,  1,  0,  0,  3,  1,  1,  0,  2,  0,  0,  1,  2,  0,  0,  2,  1,  7,  7,  1,
		  1,  2, 12,  0,  6,  0,  0,  0,  1, 63,  0,  0,  0,  1,  6,  0,  0, 15, 32,  0,  0,  5,  1,  1,  0,  0,  0, 10,  2,  0,  1,  0,
		  0,  3,  5, 11,113,117, 10,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  2,  0,  4,  2,  0,  0,  0,  1,  2,  1,  0,  0,  2,  0, 31,
		  5,  0,  0,  1,  0,  0,  3,  9,  1,  1,  0,  0,  0,  1,  1,  0,  0,  1, 15,  1, 17,  0,  7, 10,  1, 28,  2,  0,  0,  1,  3,  1,
		  1,  2,  0,  5,  1,  1,  1,  1,  0,  0,  0,  0,  0,  2,  1,  1,  0,  0,  1,  1,  0,  0,  1,  0,  1,  0,  1,  0,  0,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0,
		 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26,  0, 26, 22, 48,  0, 15, 15,
		  0,  1, 11,  0,  0,  4,  2,  1,  3,  2,  0,  1,  3,  1,  2, 10,  3,  0,  0,  0, 14,  0,  1,  2,  0,  2,  3,  1,  1,  0,  0,  0,
		  2,  4,  0,  7,  1,  0,  1,  0,  2,  8,  1,  1,  3,  0,  0,  2,  2,  1,  0,  0,  1,  0,  0,  0,  2,  7,  1,  1,  1,  0,  0,  0,
		  3,  1,  2,  0,  1,  6,  4,  2,  7,  1,  2,  0,  0,  0,  0,  1,  5,  0,  0,  1,  0,  0,  1,  0,  1,  0,  1,  3,  3,  1,  0,  1,
		  1,  2,  7,  1,  0,  0,  1,  0,  0,  0,  1,  5,  0,  0,  2,  3,  0,  4,  2,  8,  0,  1,  0,  4,  1,  1,  0,  0,  0,  0,  0,  0,
		  0,  2,  3,  1,  3,  0,  0,  9,  5,  0,  0,  3,  0,  5,  1,  2,  5, 12,  0,  1,  0,  6,  5,  0,  0, 21,  0,  6,  0,  1,  0,  1,
		  5,  0,  1,  6,  0,  0,  4,  1,  1,  0,  0,  0,  1,  1,  1,  0,  0,  1,  4,  1,  0,  0,  0, 15,  0, 14,  4,  6,  0, 54,  3,  0,
		  1,  1,  3, 45, 22,  0,  0,  2,  0,  4,  7,  7,  6,  3,  2, 54, 49,  0,  0,  4, 14,  6, 16,  6,  1,  4,  0,  6,  0,  3,  3,  6,
		  6,255,  2,  0,  5,  1,  0,  9, 56, 25, 14,  0,  0,  8,  3,433,  4,317,265,127, 11, 42,  3,  7,  5,  7, 81, 46,  9,440,1021, 31,
		 95,127,239,3599
	};
	static constexpr uint32_t GraphemeStart[1444] = {
		 0x00080, 0x000a9, 0x000ad, 0x000ae, 0x00300, 0x00483, 0x00591, 0x005bf, 0x005c1, 0x005c4, 0x005c7, 0x00600, 0x00610, 0x0061c, 0x0064b, 0x00670, 0x006d6, 0x006dd, 0x006df, 0x006e7, 0x006ea, 0x0070f, 0x00711, 0x00730,
		 0x007a6, 0x007eb, 0x007fd, 0x00816, 0x0081b, 0x00825, 0x00829, 0x00859, 0x00890, 0x00898, 0x008ca, 0x008e2, 0x008e3, 0x00903, 0x0093a, 0x0093b, 0x0093c, 0x0093e, 0x00941, 0x00949, 0x0094d, 0x0094e, 0x00951, 0x00962,
		 0x00981, 0x00982, 0x009bc, 0x009be, 0x009bf, 0x009c1, 0x009c7, 0x009cb, 0x009cd, 0x009d7, 0x009e2, 0x009fe, 0x00a01, 0x00a03, 0x00a3c, 0x00a3e, 0x00a41, 0x00a47, 0x00a4b, 0x00a51, 0x00a70, 0x00a75, 0x00a81, 0x00a83,
		 0x00abc, 0x00abe, 0x00ac1, 0x00ac7, 0x00ac9, 0x00acb, 0x00acd, 0x00ae2, 0x00afa, 0x00b01, 0x00b02, 0x00b3c, 0x00b3e, 0x00b40, 0x00b41, 0x00b47, 0x00b4b, 0x00b4d, 0x00b55, 0x00b62, 0x00b82, 0x00bbe, 0x00bbf, 0x00bc0,
		 0x00bc1, 0x00bc6, 0x00bca, 0x00bcd, 0x00bd7, 0x00c00, 0x00c01, 0x00c04, 0x00c3c, 0x00c3e, 0x00c41, 0x00c46, 0x00c4a, 0x00c55, 0x00c62, 0x00c81, 0x00c82, 0x00cbc, 0x00cbe, 0x00cbf, 0x00cc0, 0x00cc2, 0x00cc3, 0x00cc6,
		 0x00cc7, 0x00cca, 0x00ccc, 0x00cd5, 0x00ce2, 0x00cf3, 0x00d00, 0x00d02, 0x00d3b, 0x00d3e, 0x00d3f, 0x00d41, 0x00d46, 0x00d4a, 0x00d4d, 0x00d4e, 0x00d57, 0x00d62, 0x00d81, 0x00d82, 0x00dca, 0x00dcf, 0x00dd0, 0x00dd2,
		 0x00dd6, 0x00dd8, 0x00ddf, 0x00df2, 0x00e31, 0x00e33, 0x00e34, 0x00e47, 0x00eb1, 0x00eb3, 0x00eb4, 0x00ec8, 0x00f18, 0x00f35, 0x00f37, 0x00f39, 0x00f3e, 0x00f71, 0x00f7f, 0x00f80, 0x00f86, 0x00f8d, 0x00f99, 0x00fc6,
		 0x0102d, 0x01031, 0x01032, 0x01039, 0x0103b, 0x0103d, 0x01056, 0x01058, 0x0105e, 0x01071, 0x01082, 0x01084, 0x01085, 0x0108d, 0x0109d, 0x01100, 0x01160, 0x011a8, 0x0135d, 0x01712, 0x01715, 0x01732, 0x01734, 0x01752,
		 0x01772, 0x017b4, 0x017b6, 0x017b7, 0x017be, 0x017c6, 0x017c7, 0x017c9, 0x017dd, 0x0180b, 0x0180e, 0x0180f, 0x01885, 0x018a9, 0x01920, 0x01923, 0x01927, 0x01929, 0x01930, 0x01932, 0x01933, 0x01939, 0x01a17, 0x01a19,
		 0x01a1b, 0x01a55, 0x01a56, 0x01a57, 0x01a58, 0x01a60, 0x01a62, 0x01a65, 0x01a6d, 0x01a73, 0x01a7f, 0x01ab0, 0x01b00, 0x01b04, 0x01b34, 0x01b3b, 0x01b3c, 0x01b3d, 0x01b42, 0x01b43, 0x01b6b, 0x01b80, 0x01b82, 0x01ba1,
		 0x01ba2, 0x01ba6, 0x01ba8, 0x01baa, 0x01bab, 0x01be6, 0x01be7, 0x01be8, 0x01bea, 0x01bed, 0x01bee, 0x01bef, 0x01bf2, 0x01c24, 0x01c2c, 0x01c34, 0x01c36, 0x01cd0, 0x01cd4, 0x01ce1, 0x01ce2, 0x01ced, 0x01cf4, 0x01cf7,
		 0x01cf8, 0x01dc0, 0x0200b, 0x0200c, 0x0200d, 0x0200e, 0x02028, 0x0203c, 0x02049, 0x02060, 0x020d0, 0x02122, 0x02139, 0x02194, 0x021a9, 0x0231a, 0x02328, 0x02388, 0x023cf, 0x023e9, 0x023f8, 0x024c2, 0x025aa, 0x025b6,
		 0x025c0, 0x025fb, 0x02600, 0x02607, 0x02614, 0x02690, 0x02708, 0x02714, 0x02716, 0x0271d, 0x02721, 0x02728, 0x02733, 0x02744, 0x02747, 0x0274c, 0x0274e, 0x02753, 0x02757, 0x02763, 0x02795, 0x027a1, 0x027b0, 0x027bf,
		 0x02934, 0x02b05, 0x02b1b, 0x02b50, 0x02b55, 0x02cef, 0x02d7f, 0x02de0, 0x0302a, 0x03030, 0x0303d, 0x03099, 0x03297, 0x03299, 0x0a66f, 0x0a674, 0x0a69e, 0x0a6f0, 0x0a802, 0x0a806, 0x0a80b, 0x0a823, 0x0a825, 0x0a827,
		 0x0a82c, 0x0a880, 0x0a8b4, 0x0a8c4, 0x0a8e0, 0x0a8ff, 0x0a926, 0x0a947, 0x0a952, 0x0a960, 0x0a980, 0x0a983, 0x0a9b3, 0x0a9b4, 0x0a9b6, 0x0a9ba, 0x0a9bc, 0x0a9be, 0x0a9e5, 0x0aa29, 0x0aa2f, 0x0aa31, 0x0aa33, 0x0aa35,
		 0x0aa43, 0x0aa4c, 0x0aa4d, 0x0aa7c, 0x0aab0, 0x0aab2, 0x0aab7, 0x0aabe, 0x0aac1, 0x0aaeb, 0x0aaec, 0x0aaee, 0x0aaf5, 0x0aaf6, 0x0abe3, 0x0abe5, 0x0abe6, 0x0abe8, 0x0abe9, 0x0abec, 0x0abed, 0x0ac00, 0x0ac01, 0x0ac1c,
		 0x0ac1d, 0x0ac38, 0x0ac39, 0x0ac54, 0x0ac55, 0x0ac70, 0x0ac71, 0x0ac8c, 0x0ac8d, 0x0aca8, 0x0aca9, 0x0acc4, 0x0acc5, 0x0ace0, 0x0ace1, 0x0acfc, 0x0acfd, 0x0ad18, 0x0ad19, 0x0ad34, 0x0ad35, 0x0ad50, 0x0ad51, 0x0ad6c,
		 0x0ad6d, 0x0ad88, 0x0ad89, 0x0ada4, 0x0ada5, 0x0adc0, 0x0adc1, 0x0addc, 0x0addd, 0x0adf8, 0x0adf9, 0x0ae14, 0x0ae15, 0x0ae30, 0x0ae31, 0x0ae4c, 0x0ae4d, 0x0ae68, 0x0ae69, 0x0ae84, 0x0ae85, 0x0aea0, 0x0aea1, 0x0aebc,
		 0x0aebd, 0x0aed8, 0x0aed9, 0x0aef4, 0x0aef5, 0x0af10, 0x0af11, 0x0af2c, 0x0af2d, 0x0af48, 0x0af49, 0x0af64, 0x0af65, 0x0af80, 0x0af81, 0x0af9c, 0x0af9d, 0x0afb8, 0x0afb9, 0x0afd4, 0x0afd5, 0x0aff0, 0x0aff1, 0x0b00c,
		 0x0b00d, 0x0b028, 0x0b029, 0x0b044, 0x0b045, 0x0b060, 0x0b061, 0x0b07c, 0x0b07d, 0x0b098, 0x0b099, 0x0b0b4, 0x0b0b5, 0x0b0d0, 0x0b0d1, 0x0b0ec, 0x0b0ed, 0x0b108, 0x0b109, 0x0b124, 0x0b125, 0x0b140, 0x0b141, 0x0b15c,
		 0x0b15d, 0x0b178, 0x0b179, 0x0b194, 0x0b195, 0x0b1b0, 0x0b1b1, 0x0b1cc, 0x0b1cd, 0x0b1e8, 0x0b1e9, 0x0b204, 0x0b205, 0x0b220, 0x0b221, 0x0b23c, 0x0b23d, 0x0b258, 0x0b259, 0x0b274, 0x0b275, 0x0b290, 0x0b291, 0x0b2ac,
		 0x0b2ad, 0x0b2c8, 0x0b2c9, 0x0b2e4, 0x0b2e5, 0x0b300, 0x0b301, 0x0b31c, 0x0b31d, 0x0b338, 0x0b339, 0x0b354, 0x0b355, 0x0b370, 0x0b371, 0x0b38c, 0x0b38d, 0x0b3a8, 0x0b3a9, 0x0b3c4, 0x0b3c5, 0x0b3e0, 0x0b3e1, 0x0b3fc,
		 0x0b3fd, 0x0b418, 0x0b419, 0x0b434, 0x0b435, 0x0b450, 0x0b451, 0x0b46c, 0x0b46d, 0x0b488, 0x0b489, 0x0b4a4, 0x0b4a5, 0x0b4c0, 0x0b4c1, 0x0b4dc, 0x0b4dd, 0x0b4f8, 0x0b4f9, 0x0b514, 0x0b515, 0x0b530, 0x0b531, 0x0b54c,
		 0x0b54d, 0x0b568, 0x0b569, 0x0b584, 0x0b585, 0x0b5a0, 0x0b5a1, 0x0b5bc, 0x0b5bd, 0x0b5d8, 0x0b5d9, 0x0b5f4, 0x0b5f5, 0x0b610, 0x0b611, 0x0b62c, 0x0b62d, 0x0b648, 0x0b649, 0x0b664, 0x0b665, 0x0b680, 0x0b681, 0x0b69c,
		 0x0b69d, 0x0b6b8, 0x0b6b9, 0x0b6d4, 0x0b6d5, 0x0b6f0, 0x0b6f1, 0x0b70c, 0x0b70d, 0x0b728, 0x0b729, 0x0b744, 0x0b745, 0x0b760, 0x0b761, 0x0b77c, 0x0b77d, 0x0b798, 0x0b799, 0x0b7b4, 0x0b7b5, 0x0b7d0, 0x0b7d1, 0x0b7ec,
		 0x0b7ed, 0x0b808, 0x0b809, 0x0b824, 0x0b825, 0x0b840, 0x0b841, 0x0b85c, 0x0b85d, 0x0b878, 0x0b879, 0x0b894, 0x0b895, 0x0b8b0, 0x0b8b1, 0x0b8cc, 0x0b8cd, 0x0b8e8, 0x0b8e9, 0x0b904, 0x0b905, 0x0b920, 0x0b921, 0x0b93c,
		 0x0b93d, 0x0b958, 0x0b959, 0x0b974, 0x0b975, 0x0b990, 0x0b991, 0x0b9ac, 0x0b9ad, 0x0b9c8, 0x0b9c9, 0x0b9e4, 0x0b9e5, 0x0ba00, 0x0ba01, 0x0ba1c, 0x0ba1d, 0x0ba38, 0x0ba39, 0x0ba54, 0x0ba55, 0x0ba70, 0x0ba71, 0x0ba8c,
		 0x0ba8d, 0x0baa8, 0x0baa9, 0x0bac4, 0x0bac5, 0x0bae0, 0x0bae1, 0x0bafc, 0x0bafd, 0x0bb18, 0x0bb19, 0x0bb34, 0x0bb35, 0x0bb50, 0x0bb51, 0x0bb6c, 0x0bb6d, 0x0bb88, 0x0bb89, 0x0bba4, 0x0bba5, 0x0bbc0, 0x0bbc1, 0x0bbdc,
		 0x0bbdd, 0x0bbf8, 0x0bbf9, 0x0bc14, 0x0bc15, 0x0bc30, 0x0bc31, 0x0bc4c, 0x0bc4d, 0x0bc68, 0x0bc69, 0x0bc84, 0x0bc85, 0x0bca0, 0x0bca1, 0x0bcbc, 0x0bcbd, 0x0bcd8, 0x0bcd9, 0x0bcf4, 0x0bcf5, 0x0bd10, 0x0bd11, 0x0bd2c,
		 0x0bd2d, 0x0bd48, 0x0bd49, 0x0bd64, 0x0bd65, 0x0bd80, 0x0bd81, 0x0bd9c, 0x0bd9d, 0x0bdb8, 0x0bdb9, 0x0bdd4, 0x0bdd5, 0x0bdf0, 0x0bdf1, 0x0be0c, 0x0be0d, 0x0be28, 0x0be29, 0x0be44, 0x0be45, 0x0be60, 0x0be61, 0x0be7c,
		 0x0be7d, 0x0be98, 0x0be99, 0x0beb4, 0x0beb5, 0x0bed0, 0x0bed1, 0x0beec, 0x0beed, 0x0bf08, 0x0bf09, 0x0bf24, 0x0bf25, 0x0bf40, 0x0bf41, 0x0bf5c, 0x0bf5d, 0x0bf78, 0x0bf79, 0x0bf94, 0x0bf95, 0x0bfb0, 0x0bfb1, 0x0bfcc,
		 0x0bfcd, 0x0bfe8, 0x0bfe9, 0x0c004, 0x0c005, 0x0c020, 0x0c021, 0x0c03c, 0x0c03d, 0x0c058, 0x0c059, 0x0c074, 0x0c075, 0x0c090, 0x0c091, 0x0c0ac, 0x0c0ad, 0x0c0c8, 0x0c0c9, 0x0c0e4, 0x0c0e5, 0x0c100, 0x0c101, 0x0c11c,
		 0x0c11d, 0x0c138, 0x0c139, 0x0c154, 0x0c155, 0x0c170, 0x0c171, 0x0c18c, 0x0c18d, 0x0c1a8, 0x0c1a9, 0x0c1c4, 0x0c1c5, 0x0c1e0, 0x0c1e1, 0x0c1fc, 0x0c1fd, 0x0c218, 0x0c219, 0x0c234, 0x0c235, 0x0c250, 0x0c251, 0x0c26c,
		 0x0c26d, 0x0c288, 0x0c289, 0x0c2a4, 0x0c2a5, 0x0c2c0, 0x0c2c1, 0x0c2dc, 0x0c2dd, 0x0c2f8, 0x0c2f9, 0x0c314, 0x0c315, 0x0c330, 0x0c331, 0x0c34c, 0x0c34d, 0x0c368, 0x0c369, 0x0c384, 0x0c385, 0x0c3a0, 0x0c3a1, 0x0c3bc,
		 0x0c3bd, 0x0c3d8, 0x0c3d9, 0x0c3f4, 0x0c3f5, 0x0c410, 0x0c411, 0x0c42c, 0x0c42d, 0x0c448, 0x0c449, 0x0c464, 0x0c465, 0x0c480, 0x0c481, 0x0c49c, 0x0c49d, 0x0c4b8, 0x0c4b9, 0x0c4d4, 0x0c4d5, 0x0c4f0, 0x0c4f1, 0x0c50c,
		 0x0c50d, 0x0c528, 0x0c529, 0x0c544, 0x0c545, 0x0c560, 0x0c561, 0x0c57c, 0x0c57d, 0x0c598, 0x0c599, 0x0c5b4, 0x0c5b5, 0x0c5d0, 0x0c5d1, 0x0c5ec, 0x0c5ed, 0x0c608, 0x0c609, 0x0c624, 0x0c625, 0x0c640, 0x0c641, 0x0c65c,
		 0x0c65d, 0x0c678, 0x0c679, 0x0c694, 0x0c695, 0x0c6b0, 0x0c6b1, 0x0c6cc, 0x0c6cd, 0x0c6e8, 0x0c6e9, 0x0c704, 0x0c705, 0x0c720, 0x0c721, 0x0c73c, 0x0c73d, 0x0c758, 0x0c759, 0x0c774, 0x0c775, 0x0c790, 0x0c791, 0x0c7ac,
		 0x0c7ad, 0x0c7c8, 0x0c7c9, 0x0c7e4, 0x0c7e5, 0x0c800, 0x0c801, 0x0c81c, 0x0c81d, 0x0c838, 0x0c839, 0x0c854, 0x0c855, 0x0c870, 0x0c871, 0x0c88c, 0x0c88d, 0x0c8a8, 0x0c8a9, 0x0c8c4, 0x0c8c5, 0x0c8e0, 0x0c8e1, 0x0c8fc,
		 0x0c8fd, 0x0c918, 0x0c919, 0x0c934, 0x0c935, 0x0c950, 0x0c951, 0x0c96c, 0x0c96d, 0x0c988, 0x0c989, 0x0c9a4, 0x0c9a5, 0x0c9c0, 0x0c9c1, 0x0c9dc, 0x0c9dd, 0x0c9f8, 0x0c9f9, 0x0ca14, 0x0ca15, 0x0ca30, 0x0ca31, 0x0ca4c,
		 0x0ca4d, 0x0ca68, 0x0ca69, 0x0ca84, 0x0ca85, 0x0caa0, 0x0caa1, 0x0cabc, 0x0cabd, 0x0cad8, 0x0cad9, 0x0caf4, 0x0caf5, 0x0cb10, 0x0cb11, 0x0cb2c, 0x0cb2d, 0x0cb48, 0x0cb49, 0x0cb64, 0x0cb65, 0x0cb80, 0x0cb81, 0x0cb9c,
		 0x0cb9d, 0x0cbb8, 0x0cbb9, 0x0cbd4, 0x0cbd5, 0x0cbf0, 0x0cbf1, 0x0cc0c, 0x0cc0d, 0x0cc28, 0x0cc29, 0x0cc44, 0x0cc45, 0x0cc60, 0x0cc61, 0x0cc7c, 0x0cc7d, 0x0cc98, 0x0cc99, 0x0ccb4, 0x0ccb5, 0x0ccd0, 0x0ccd1, 0x0ccec,
		 0x0cced, 0x0cd08, 0x0cd09, 0x0cd24, 0x0cd25, 0x0cd40, 0x0cd41, 0x0cd5c, 0x0cd5d, 0x0cd78, 0x0cd79, 0x0cd94, 0x0cd95, 0x0cdb0, 0x0cdb1, 0x0cdcc, 0x0cdcd, 0x0cde8, 0x0cde9, 0x0ce04, 0x0ce05, 0x0ce20, 0x0ce21, 0x0ce3c,
		 0x0ce3d, 0x0ce58, 0x0ce59, 0x0ce74, 0x0ce75, 0x0ce90, 0x0ce91, 0x0ceac, 0x0cead, 0x0cec8, 0x0cec9, 0x0cee4, 0x0cee5, 0x0cf00, 0x0cf01, 0x0cf1c, 0x0cf1d, 0x0cf38, 0x0cf39, 0x0cf54, 0x0cf55, 0x0cf70, 0x0cf71, 0x0cf8c,
		 0x0cf8d, 0x0cfa8, 0x0cfa9, 0x0cfc4, 0x0cfc5, 0x0cfe0, 0x0cfe1, 0x0cffc, 0x0cffd, 0x0d018, 0x0d019, 0x0d034, 0x0d035, 0x0d050, 0x0d051, 0x0d06c, 0x0d06d, 0x0d088, 0x0d089, 0x0d0a4, 0x0d0a5, 0x0d0c0, 0x0d0c1, 0x0d0dc,
		 0x0d0dd, 0x0d0f8, 0x0d0f9, 0x0d114, 0x0d115, 0x0d130, 0x0d131, 0x0d14c, 0x0d14d, 0x0d168, 0x0d169, 0x0d184, 0x0d185, 0x0d1a0, 0x0d1a1, 0x0d1bc, 0x0d1bd, 0x0d1d8, 0x0d1d9, 0x0d1f4, 0x0d1f5, 0x0d210, 0x0d211, 0x0d22c,
		 0x0d22d, 0x0d248, 0x0d249, 0x0d264, 0x0d265, 0x0d280, 0x0d281, 0x0d29c, 0x0d29d, 0x0d2b8, 0x0d2b9, 0x0d2d4, 0x0d2d5, 0x0d2f0, 0x0d2f1, 0x0d30c, 0x0d30d, 0x0d328, 0x0d329, 0x0d344, 0x0d345, 0x0d360, 0x0d361, 0x0d37c,
		 0x0d37d, 0x0d398, 0x0d399, 0x0d3b4, 0x0d3b5, 0x0d3d0, 0x0d3d1, 0x0d3ec, 0x0d3ed, 0x0d408, 0x0d409, 0x0d424, 0x0d425, 0x0d440, 0x0d441, 0x0d45c, 0x0d45d, 0x0d478, 0x0d479, 0x0d494, 0x0d495, 0x0d4b0, 0x0d4b1, 0x0d4cc,
		 0x0d4cd, 0x0d4e8, 0x0d4e9, 0x0d504, 0x0d505, 0x0d520, 0x0d521, 0x0d53c, 0x0d53d, 0x0d558, 0x0d559, 0x0d574, 0x0d575, 0x0d590, 0x0d591, 0x0d5ac, 0x0d5ad, 0x0d5c8, 0x0d5c9, 0x0d5e4, 0x0d5e5, 0x0d600, 0x0d601, 0x0d61c,
		 0x0d61d, 0x0d638, 0x0d639, 0x0d654, 0x0d655, 0x0d670, 0x0d671, 0x0d68c, 0x0d68d, 0x0d6a8, 0x0d6a9, 0x0d6c4, 0x0d6c5, 0x0d6e0, 0x0d6e1, 0x0d6fc, 0x0d6fd, 0x0d718, 0x0d719, 0x0d734, 0x0d735, 0x0d750, 0x0d751, 0x0d76c,
		 0x0d76d, 0x0d788, 0x0d789, 0x0d7b0, 0x0d7cb, 0x0fb1e, 0x0fe00, 0x0fe20, 0x0feff, 0x0ff9e, 0x0fff0, 0x101fd, 0x102e0, 0x10376, 0x10a01, 0x10a05, 0x10a0c, 0x10a38, 0x10a3f, 0x10ae5, 0x10d24, 0x10eab, 0x10efd, 0x10f46,
		 0x10f82, 0x11000, 0x11001, 0x11002, 0x11038, 0x11070, 0x11073, 0x1107f, 0x11082, 0x110b0, 0x110b3, 0x110b7, 0x110b9, 0x110bd, 0x110c2, 0x110cd, 0x11100, 0x11127, 0x1112c, 0x1112d, 0x11145, 0x11173, 0x11180, 0x11182,
		 0x111b3, 0x111b6, 0x111bf, 0x111c2, 0x111c9, 0x111ce, 0x111cf, 0x1122c, 0x1122f, 0x11232, 0x11234, 0x11235, 0x11236, 0x1123e, 0x11241, 0x112df, 0x112e0, 0x112e3, 0x11300, 0x11302, 0x1133b, 0x1133e, 0x1133f, 0x11340,
		 0x11341, 0x11347, 0x1134b, 0x11357, 0x11362, 0x11366, 0x11370, 0x11435, 0x11438, 0x11440, 0x11442, 0x11445, 0x11446, 0x1145e, 0x114b0, 0x114b1, 0x114b3, 0x114b9, 0x114ba, 0x114bb, 0x114bd, 0x114be, 0x114bf, 0x114c1,
		 0x114c2, 0x115af, 0x115b0, 0x115b2, 0x115b8, 0x115bc, 0x115be, 0x115bf, 0x115dc, 0x11630, 0x11633, 0x1163b, 0x1163d, 0x1163e, 0x1163f, 0x116ab, 0x116ac, 0x116ad, 0x116ae, 0x116b0, 0x116b6, 0x116b7, 0x1171d, 0x11722,
		 0x11726, 0x11727, 0x1182c, 0x1182f, 0x11838, 0x11839, 0x11930, 0x11931, 0x11937, 0x1193b, 0x1193d, 0x1193e, 0x1193f, 0x11940, 0x11941, 0x11942, 0x11943, 0x119d1, 0x119d4, 0x119da, 0x119dc, 0x119e0, 0x119e4, 0x11a01,
		 0x11a33, 0x11a39, 0x11a3a, 0x11a3b, 0x11a47, 0x11a51, 0x11a57, 0x11a59, 0x11a84, 0x11a8a, 0x11a97, 0x11a98, 0x11c2f, 0x11c30, 0x11c38, 0x11c3e, 0x11c3f, 0x11c92, 0x11ca9, 0x11caa, 0x11cb1, 0x11cb2, 0x11cb4, 0x11cb5,
		 0x11d31, 0x11d3a, 0x11d3c, 0x11d3f, 0x11d46, 0x11d47, 0x11d8a, 0x11d90, 0x11d93, 0x11d95, 0x11d96, 0x11d97, 0x11ef3, 0x11ef5, 0x11f00, 0x11f02, 0x11f03, 0x11f34, 0x11f36, 0x11f3e, 0x11f40, 0x11f41, 0x11f42, 0x13430,
		 0x13440, 0x13447, 0x16af0, 0x16b30, 0x16f4f, 0x16f51, 0x16f8f, 0x16fe4, 0x16ff0, 0x1bc9d, 0x1bca0, 0x1cf00, 0x1cf30, 0x1d165, 0x1d166, 0x1d167, 0x1d16d, 0x1d16e, 0x1d173, 0x1d17b, 0x1d185, 0x1d1aa, 0x1d242, 0x1da00,
		 0x1da3b, 0x1da75, 0x1da84, 0x1da9b, 0x1daa1, 0x1e000, 0x1e008, 0x1e01b, 0x1e023, 0x1e026, 0x1e08f, 0x1e130, 0x1e2ae, 0x1e2ec, 0x1e4ec, 0x1e8d0, 0x1e944, 0x1f000, 0x1f10d, 0x1f12f, 0x1f16c, 0x1f17e, 0x1f18e, 0x1f191,
		 0x1f1ad, 0x1f1e6, 0x1f201, 0x1f21a, 0x1f22f, 0x1f232, 0x1f23c, 0x1f249, 0x1f3fb, 0x1f400, 0x1f546, 0x1f680, 0x1f774, 0x1f7d5, 0x1f80c, 0x1f848, 0x1f85a, 0x1f888, 0x1f8ae, 0x1f90c, 0x1f93c, 0x1f947, 0x1fc00, 0xe0000,
		 0xe0020, 0xe0080, 0xe0100, 0xe01f0
	};
	inline constexpr detail::GraphemeType LookupGraphemeTypeBinSearch(char32_t cp) {
		size_t left = 0, right = 1443;
		while (left < right) {
			size_t center = (right - left) / 2;
			if (cp < detail::GraphemeStart[center])
				right = center - 1;
			else
				left = center;
		}

		if (cp - detail::GraphemeStart[left] > detail::GraphemeSize[left])
			return detail::GraphemeType::other;
		return static_cast<detail::GraphemeType>(detail::GraphemeValue[left]);
	}
	inline constexpr detail::GraphemeType LookupGraphemeType(char32_t cp) {
		if (cp < 0x80)
			return detail::LookupGraphemeTypeAscii(cp);
		return detail::LookupGraphemeTypeBinSearch(cp);
	}
}
