#pragma once

#include <cinttypes>

/*
*	This is an automatically generated file and should not be modified.
*	All data are based on the lastest information provided by the unicode character database.
*	Source: https://www.unicode.org/Public/UCD/latest
*	Generated: 2024-03-27 02:24
*/
namespace cp::detail::gen {
	template <class Type, size_t N>
	inline constexpr size_t BinarySearch(char32_t cp, const Type (&data)[N]) {
		size_t left = 0, right = N - 1;
		while (left < right) {
			size_t center = (left + right + 1) / 2;
			if (cp < data[center])
				right = center - 1;
			else
				left = center;
		}
		return left;
	}


	/* Automatically generated from: Unicode General_Category is not cs (i.e. surrogate pairs) smaller than/equal to 0x10ffff */
	inline constexpr bool TestUnicode(char32_t cp) {
		if ((cp >= 0xd800 && cp <= 0xdfff) || cp >= 0x110000)
			return false;
		return true;
	}


	/* Automatically generated from: Unicode General_Category is not Cn, Cs, Co (i.e. not assigned, surrogate pairs, private use) */
	static constexpr uint16_t AssignedBuf0LowSizeCluster[338] = {
		  1,  3,  0,  0,  0,  0,  1,  1,  0,  7,  3, 10,  0,  1, 13,  1,  1,  0,  1,  0,  4,  0,  5,  0,  1,  1,  0,  0,  2,  1,  1,
		  1,  7,  3,  0,  1,  1,  0,  3,  1,  0,  0,  0,  0,  1,  0,  3,  1,  2,  6,  0,  6,  9,  0,  0,  0,  0,  0,  0,  1,  0,  0,
		  1, 14,  1,  6,  0,  0,  1,  1,  0,  0,  0,  1,  1,  1,  6,  3,  0,  1,  9,  0,  2,  0,  2,  0,  0,  2,  2,  2,  3,  2,  0,
		  1,  5, 13,  4,  0,  0,  0,  1,  0,  0,  6,  0,  1,  1,  1,  6,  0,  0,  0,  0,  1,  0,  0,  6,  5,  0,  1,  0, 11,  0,  0,
		  0,  0,  3,  1,  0,  0,  2,  0,  0,  1,  2,  3,  0,  0,  5,  1, 11,  3, 36,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1, 31,  0,
		  3,  0,  0,  0, 36,  0,  4,  1,  0,  1,  0,  0,  1,  0,  1,  0,  1,  0,  0,  1,  0,  0,  1,  1,  2,  5,  1,  1,  2,  6,  8,
		  8, 11,  0,  0, 11,  1,  5,  5,  5,  6,  4,  9,  0,  3,  3,  2,  1, 10,  3,  5,  2,  1,  0,  1,  5,  5,  1, 48,  2,  0,  7,
		  2,  2,  6,  1,  7,  4,  1,  1,  1,  1,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0,  0,  0,  1,  0,  2, 14, 14,  3, 24, 20,
		  1,  0,  4,  0,  4,  1,  6, 13,  8,  0,  0,  0,  0,  0,  0,  0,  0, 33,  0, 11, 25,  0,  1,  4,  0,  0, 10,  0,  2,  8, 19,
		  7,  4,  0,  0, 23,  2,  5,  7,  7,  5, 10,  2,  0,  3,  0,  8,  1,  1, 23,  9,  1,  1,  8,  0,  0,  3,  1,  5, 11,  3,8451,
		  1, 37, 11,  4,  0,  0,  0,  0,  0, 15,  1,  6, 31,  5,  0,  0,  3,  0,  1,  0,  2,  1,  1,  1,  2,  0,  9,  1
	};
	static constexpr uint16_t AssignedBuf1LowStart[338] = {
		 0x0378, 0x0380, 0x038b, 0x038d, 0x03a2, 0x0530, 0x0557, 0x058b, 0x0590, 0x05c8, 0x05eb, 0x05f5, 0x070e, 0x074b, 0x07b2, 0x07fb, 0x082e, 0x083f, 0x085c, 0x085f, 0x086b, 0x088f, 0x0892,
		 0x0984, 0x098d, 0x0991, 0x09a9, 0x09b1, 0x09b3, 0x09ba, 0x09c5, 0x09c9, 0x09cf, 0x09d8, 0x09de, 0x09e4, 0x09ff, 0x0a04, 0x0a0b, 0x0a11, 0x0a29, 0x0a31, 0x0a34, 0x0a37, 0x0a3a, 0x0a3d,
		 0x0a43, 0x0a49, 0x0a4e, 0x0a52, 0x0a5d, 0x0a5f, 0x0a77, 0x0a84, 0x0a8e, 0x0a92, 0x0aa9, 0x0ab1, 0x0ab4, 0x0aba, 0x0ac6, 0x0aca, 0x0ace, 0x0ad1, 0x0ae4, 0x0af2, 0x0b00, 0x0b04, 0x0b0d,
		 0x0b11, 0x0b29, 0x0b31, 0x0b34, 0x0b3a, 0x0b45, 0x0b49, 0x0b4e, 0x0b58, 0x0b5e, 0x0b64, 0x0b78, 0x0b84, 0x0b8b, 0x0b91, 0x0b96, 0x0b9b, 0x0b9d, 0x0ba0, 0x0ba5, 0x0bab, 0x0bba, 0x0bc3,
		 0x0bc9, 0x0bce, 0x0bd1, 0x0bd8, 0x0bfb, 0x0c0d, 0x0c11, 0x0c29, 0x0c3a, 0x0c45, 0x0c49, 0x0c4e, 0x0c57, 0x0c5b, 0x0c5e, 0x0c64, 0x0c70, 0x0c8d, 0x0c91, 0x0ca9, 0x0cb4, 0x0cba, 0x0cc5,
		 0x0cc9, 0x0cce, 0x0cd7, 0x0cdf, 0x0ce4, 0x0cf0, 0x0cf4, 0x0d0d, 0x0d11, 0x0d45, 0x0d49, 0x0d50, 0x0d64, 0x0d80, 0x0d84, 0x0d97, 0x0db2, 0x0dbc, 0x0dbe, 0x0dc7, 0x0dcb, 0x0dd5, 0x0dd7,
		 0x0de0, 0x0df0, 0x0df5, 0x0e3b, 0x0e5c, 0x0e83, 0x0e85, 0x0e8b, 0x0ea4, 0x0ea6, 0x0ebe, 0x0ec5, 0x0ec7, 0x0ecf, 0x0eda, 0x0ee0, 0x0f48, 0x0f6d, 0x0f98, 0x0fbd, 0x0fcd, 0x0fdb, 0x10c6,
		 0x10c8, 0x10ce, 0x1249, 0x124e, 0x1257, 0x1259, 0x125e, 0x1289, 0x128e, 0x12b1, 0x12b6, 0x12bf, 0x12c1, 0x12c6, 0x12d7, 0x1311, 0x1316, 0x135b, 0x137d, 0x139a, 0x13f6, 0x13fe, 0x169d,
		 0x16f9, 0x1716, 0x1737, 0x1754, 0x176d, 0x1771, 0x1774, 0x17de, 0x17ea, 0x17fa, 0x181a, 0x1879, 0x18ab, 0x18f6, 0x191f, 0x192c, 0x193c, 0x1941, 0x196e, 0x1975, 0x19ac, 0x19ca, 0x19db,
		 0x1a1c, 0x1a5f, 0x1a7d, 0x1a8a, 0x1a9a, 0x1aae, 0x1acf, 0x1b4d, 0x1b7f, 0x1bf4, 0x1c38, 0x1c4a, 0x1c89, 0x1cbb, 0x1cc8, 0x1cfb, 0x1f16, 0x1f1e, 0x1f46, 0x1f4e, 0x1f58, 0x1f5a, 0x1f5c,
		 0x1f5e, 0x1f7e, 0x1fb5, 0x1fc5, 0x1fd4, 0x1fdc, 0x1ff0, 0x1ff5, 0x1fff, 0x2065, 0x2072, 0x208f, 0x209d, 0x20c1, 0x20f1, 0x218c, 0x2427, 0x244b, 0x2b74, 0x2b96, 0x2cf4, 0x2d26, 0x2d28,
		 0x2d2e, 0x2d68, 0x2d71, 0x2d97, 0x2da7, 0x2daf, 0x2db7, 0x2dbf, 0x2dc7, 0x2dcf, 0x2dd7, 0x2ddf, 0x2e5e, 0x2e9a, 0x2ef4, 0x2fd6, 0x3040, 0x3097, 0x3100, 0x3130, 0x318f, 0x31e4, 0x321f,
		 0xa48d, 0xa4c7, 0xa62c, 0xa6f8, 0xa7cb, 0xa7d2, 0xa7d4, 0xa7da, 0xa82d, 0xa83a, 0xa878, 0xa8c6, 0xa8da, 0xa954, 0xa97d, 0xa9ce, 0xa9da, 0xa9ff, 0xaa37, 0xaa4e, 0xaa5a, 0xaac3, 0xaaf7,
		 0xab07, 0xab0f, 0xab17, 0xab27, 0xab2f, 0xab6c, 0xabee, 0xabfa, 0xd7a4, 0xd7c7, 0xd7fc, 0xfa6e, 0xfada, 0xfb07, 0xfb18, 0xfb37, 0xfb3d, 0xfb3f, 0xfb42, 0xfb45, 0xfbc3, 0xfd90, 0xfdc8,
		 0xfdd0, 0xfe1a, 0xfe53, 0xfe67, 0xfe6c, 0xfe75, 0xfefd, 0xff00, 0xffbf, 0xffc8, 0xffd0, 0xffd8, 0xffdd, 0xffe7, 0xffef, 0xfffe
	};
	static constexpr uint16_t AssignedBuf2HighSizeCluster[367] = {
		 11, 25, 18,  1, 14, 13,122,  2, 44, 87, 12,  0, 45, 28, 48, 27, 35, 29, 42, 29, 36, 13,157,  9, 35, 35, 39, 51, 11, 14,  6,
		  1, 10, 14,  6,  1,310, 21,  7,  5, 41,  8,  5,  0, 43,  1,  0, 22, 71,  8, 18,  1, 32, 26,  0, 55, 19, 49,  1,  7,  2, 28,
		  2,  9,  8, 63, 38, 11, 53, 28, 26, 25,  3,  6, 72, 50, 50, 45,  9, 30, 41,  2,  1, 42, 41, 25, 27, 22, 77, 35, 67,  0, 24,
		  9, 52, 17, 38, 95, 19, 17, 46,  6,  0,  3, 14, 10, 58,  9,  3,  7,  1, 21,  6,  1,  4,  9,  1,  2,  0,  0,  6,  6,  4, 91,
		  4, 71,  9, 53, 37, 68,  9, 12, 57,  9, 26, 14, 22, 59, 82,  7,  0,  7,  1, 29,  1, 11,  9,  7, 45, 10, 71, 82, 72,  9,  8,
		 44, 13, 28, 31, 21, 13,  6,  1, 43,  0,  1,  8,  9,  5,  1, 36,  1,  5,  9, 24, 16, 40, 27,  0, 49,922,110,  4,195, 98,1109,
		582,568, 30,  9, 80,  9, 29,  5, 69,  9,  6, 20, 18, 90, 74, 56, 16,  4,  1,6135,1237,  8,  3,  6,  1,290,  0,  2,  0,  3,395,
		106, 12,  8,  9,  7, 45, 22,115,245, 38,193, 69, 19, 19, 86, 24, 84, 70,  1,  0,  1,  3, 11,  0,  6, 64,  3,  7,  6, 27,  3,
		  4,  0,  6,339,291,701,  4, 14, 30,  5,  6, 16,  6,  1,  4, 61,  0, 44, 13,  9,  1, 30, 57,  0, 41,  6,  3,  1, 14,196, 15,
		 75,  9,  1, 67, 60,  3, 26,  1,  0,  0,  9,  3,  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,  0,  0,  1,  0,  3,  6,  3,
		  3,  0,  9, 16,  2,  4, 16,  1, 43, 99, 14, 14, 14, 36,173, 28, 43,  8,  1,  5,983, 16, 12,118, 94, 11,  0, 11, 55,  9, 39,
		 29,  1,339, 13, 12,  8, 45,  6, 13,  8,  8,146, 54,  9,42719,4153,221,5761,7472,621,541,4938,4191,  0, 95,239
	};
	static constexpr uint32_t AssignedBuf3HighStart[367] = {
		 0x10000, 0x1000d, 0x10028, 0x1003c, 0x1003f, 0x10050, 0x10080, 0x10100, 0x10107, 0x10137, 0x10190, 0x101a0, 0x101d0, 0x10280, 0x102a0, 0x102e0, 0x10300, 0x1032d, 0x10350, 0x10380, 0x1039f, 0x103c8, 0x10400,
		 0x104a0, 0x104b0, 0x104d8, 0x10500, 0x10530, 0x1056f, 0x1057c, 0x1058c, 0x10594, 0x10597, 0x105a3, 0x105b3, 0x105bb, 0x10600, 0x10740, 0x10760, 0x10780, 0x10787, 0x107b2, 0x10800, 0x10808, 0x1080a, 0x10837,
		 0x1083c, 0x1083f, 0x10857, 0x108a7, 0x108e0, 0x108f4, 0x108fb, 0x1091f, 0x1093f, 0x10980, 0x109bc, 0x109d2, 0x10a05, 0x10a0c, 0x10a15, 0x10a19, 0x10a38, 0x10a3f, 0x10a50, 0x10a60, 0x10ac0, 0x10aeb, 0x10b00,
		 0x10b39, 0x10b58, 0x10b78, 0x10b99, 0x10ba9, 0x10c00, 0x10c80, 0x10cc0, 0x10cfa, 0x10d30, 0x10e60, 0x10e80, 0x10eab, 0x10eb0, 0x10efd, 0x10f30, 0x10f70, 0x10fb0, 0x10fe0, 0x11000, 0x11052, 0x1107f, 0x110cd,
		 0x110d0, 0x110f0, 0x11100, 0x11136, 0x11150, 0x11180, 0x111e1, 0x11200, 0x11213, 0x11280, 0x11288, 0x1128a, 0x1128f, 0x1129f, 0x112b0, 0x112f0, 0x11300, 0x11305, 0x1130f, 0x11313, 0x1132a, 0x11332, 0x11335,
		 0x1133b, 0x11347, 0x1134b, 0x11350, 0x11357, 0x1135d, 0x11366, 0x11370, 0x11400, 0x1145d, 0x11480, 0x114d0, 0x11580, 0x115b8, 0x11600, 0x11650, 0x11660, 0x11680, 0x116c0, 0x11700, 0x1171d, 0x11730, 0x11800,
		 0x118a0, 0x118ff, 0x11909, 0x1190c, 0x11915, 0x11918, 0x11937, 0x1193b, 0x11950, 0x119a0, 0x119aa, 0x119da, 0x11a00, 0x11a50, 0x11ab0, 0x11b00, 0x11c00, 0x11c0a, 0x11c38, 0x11c50, 0x11c70, 0x11c92, 0x11ca9,
		 0x11d00, 0x11d08, 0x11d0b, 0x11d3a, 0x11d3c, 0x11d3f, 0x11d50, 0x11d60, 0x11d67, 0x11d6a, 0x11d90, 0x11d93, 0x11da0, 0x11ee0, 0x11f00, 0x11f12, 0x11f3e, 0x11fb0, 0x11fc0, 0x11fff, 0x12400, 0x12470, 0x12480,
		 0x12f90, 0x13000, 0x14400, 0x16800, 0x16a40, 0x16a60, 0x16a6e, 0x16ac0, 0x16ad0, 0x16af0, 0x16b00, 0x16b50, 0x16b5b, 0x16b63, 0x16b7d, 0x16e40, 0x16f00, 0x16f4f, 0x16f8f, 0x16fe0, 0x16ff0, 0x17000, 0x18800,
		 0x18d00, 0x1aff0, 0x1aff5, 0x1affd, 0x1b000, 0x1b132, 0x1b150, 0x1b155, 0x1b164, 0x1b170, 0x1bc00, 0x1bc70, 0x1bc80, 0x1bc90, 0x1bc9c, 0x1cf00, 0x1cf30, 0x1cf50, 0x1d000, 0x1d100, 0x1d129, 0x1d200, 0x1d2c0,
		 0x1d2e0, 0x1d300, 0x1d360, 0x1d400, 0x1d456, 0x1d49e, 0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4bb, 0x1d4bd, 0x1d4c5, 0x1d507, 0x1d50d, 0x1d516, 0x1d51e, 0x1d53b, 0x1d540, 0x1d546, 0x1d54a, 0x1d552, 0x1d6a8,
		 0x1d7ce, 0x1da9b, 0x1daa1, 0x1df00, 0x1df25, 0x1e000, 0x1e008, 0x1e01b, 0x1e023, 0x1e026, 0x1e030, 0x1e08f, 0x1e100, 0x1e130, 0x1e140, 0x1e14e, 0x1e290, 0x1e2c0, 0x1e2ff, 0x1e4d0, 0x1e7e0, 0x1e7e8, 0x1e7ed,
		 0x1e7f0, 0x1e800, 0x1e8c7, 0x1e900, 0x1e950, 0x1e95e, 0x1ec71, 0x1ed01, 0x1ee00, 0x1ee05, 0x1ee21, 0x1ee24, 0x1ee27, 0x1ee29, 0x1ee34, 0x1ee39, 0x1ee3b, 0x1ee42, 0x1ee47, 0x1ee49, 0x1ee4b, 0x1ee4d, 0x1ee51,
		 0x1ee54, 0x1ee57, 0x1ee59, 0x1ee5b, 0x1ee5d, 0x1ee5f, 0x1ee61, 0x1ee64, 0x1ee67, 0x1ee6c, 0x1ee74, 0x1ee79, 0x1ee7e, 0x1ee80, 0x1ee8b, 0x1eea1, 0x1eea5, 0x1eeab, 0x1eef0, 0x1f000, 0x1f030, 0x1f0a0, 0x1f0b1,
		 0x1f0c1, 0x1f0d1, 0x1f100, 0x1f1e6, 0x1f210, 0x1f240, 0x1f250, 0x1f260, 0x1f300, 0x1f6dc, 0x1f6f0, 0x1f700, 0x1f77b, 0x1f7e0, 0x1f7f0, 0x1f800, 0x1f810, 0x1f850, 0x1f860, 0x1f890, 0x1f8b0, 0x1f900, 0x1fa60,
		 0x1fa70, 0x1fa80, 0x1fa90, 0x1fabf, 0x1face, 0x1fae0, 0x1faf0, 0x1fb00, 0x1fb94, 0x1fbf0, 0x20000, 0x2a700, 0x2b740, 0x2b820, 0x2ceb0, 0x2ebf0, 0x2f800, 0x30000, 0x31350, 0xe0001, 0xe0020, 0xe0100
	};
	inline constexpr bool TestAssigned(char32_t cp) {
		if (cp < 0x80)
			return true;
		if (cp < 0x10000) {
			size_t var1LowSizeResult = 0, var0LowIndex = gen::BinarySearch(cp, gen::AssignedBuf1LowStart);
			var1LowSizeResult = size_t(gen::AssignedBuf0LowSizeCluster[var0LowIndex]);
			if (cp - gen::AssignedBuf1LowStart[var0LowIndex] > var1LowSizeResult)
				return true;
			return false;
		}
		size_t var3HighSizeResult = 0, var2HighIndex = gen::BinarySearch(cp, gen::AssignedBuf3HighStart);
		var3HighSizeResult = size_t(gen::AssignedBuf2HighSizeCluster[var2HighIndex]);
		if (cp - gen::AssignedBuf3HighStart[var2HighIndex] > var3HighSizeResult)
			return false;
		return true;
	}


	/* Automatically generated from: [cp <= 0x7f] */
	inline constexpr bool TestAscii(char32_t cp) {
		if (cp >= 0x0080)
			return false;
		return true;
	}


	/* Automatically generated from: [a-zA-Z] */
	inline constexpr bool TestAlpha(char32_t cp) {
		if ((cp >= 0x0041 && cp <= 0x005a) || (cp >= 0x0061 && cp <= 0x007a))
			return true;
		return false;
	}


	/* Automatically generated from: [0-9a-zA-Z] mapped to [0-35] and rest to 0xff */
	static constexpr uint8_t RadixBuf0AsciiCluster[128] = {
		255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
		255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,255,255,255,255,255,255,
		255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,255,255,255,255,255,
		255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,255,255,255,255,255
	};
	inline constexpr uint8_t GetRadix(char32_t cp) {
		if (cp < 0x80)
			return uint8_t(gen::RadixBuf0AsciiCluster[cp]);
		return 255;
	}


	/* Automatically generated from: Unicode: Numeric_Type=Decimal: [0-9]; Numeric_Type=Digit: [0xf0]; Numeric_Type=Numeric: [0xf1]; rest [0xff] */
	static constexpr uint8_t DigitBuf0AsciiCluster[10] = {
		  0,  1,  2,  3,  4,  5,  6,  7,  8,  9
	};
	static constexpr uint8_t DigitBuf1LowValueCluster[416] = {
		240,240,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,
		  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
		  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,
		  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
		241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,
		  1,  2,  3,  4,  5,  6,  7,  8,  9,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,240,241,
		241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
		  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,240,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,
		  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,
		  3,  4,  5,  6,  7,  8,  9,240,240,240,241,241,240,241,240,241,240,241,240,241,240,241,240,240,241,240,241,240,241,241,241,241,
		241,241,241,241,241,241,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,
		  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,
		  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,241,241,241,241,241,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9
	};
	static constexpr uint8_t DigitBuf2LowSize[416] = {
		  1,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 10,
		  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  5,  9, 50,  4,  8, 10,  8, 10,  8, 10,  0,  9,  8,  0,  0,  8,  0,  8,  0,  8,  0,  0,  0,  8,
		  2,  3,  9,  7, 14,  9, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
	};
	static constexpr uint16_t DigitBuf3LowStart[416] = {
		 0x00b2, 0x00b9, 0x00bc, 0x0660, 0x0661, 0x0662, 0x0663, 0x0664, 0x0665, 0x0666, 0x0667, 0x0668, 0x0669, 0x06f0, 0x06f1, 0x06f2, 0x06f3, 0x06f4, 0x06f5, 0x06f6, 0x06f7, 0x06f8, 0x06f9, 0x07c0,
		 0x07c1, 0x07c2, 0x07c3, 0x07c4, 0x07c5, 0x07c6, 0x07c7, 0x07c8, 0x07c9, 0x0966, 0x0967, 0x0968, 0x0969, 0x096a, 0x096b, 0x096c, 0x096d, 0x096e, 0x096f, 0x09e6, 0x09e7, 0x09e8, 0x09e9, 0x09ea,
		 0x09eb, 0x09ec, 0x09ed, 0x09ee, 0x09ef, 0x09f4, 0x0a66, 0x0a67, 0x0a68, 0x0a69, 0x0a6a, 0x0a6b, 0x0a6c, 0x0a6d, 0x0a6e, 0x0a6f, 0x0ae6, 0x0ae7, 0x0ae8, 0x0ae9, 0x0aea, 0x0aeb, 0x0aec, 0x0aed,
		 0x0aee, 0x0aef, 0x0b66, 0x0b67, 0x0b68, 0x0b69, 0x0b6a, 0x0b6b, 0x0b6c, 0x0b6d, 0x0b6e, 0x0b6f, 0x0b72, 0x0be6, 0x0be7, 0x0be8, 0x0be9, 0x0bea, 0x0beb, 0x0bec, 0x0bed, 0x0bee, 0x0bef, 0x0bf0,
		 0x0c66, 0x0c67, 0x0c68, 0x0c69, 0x0c6a, 0x0c6b, 0x0c6c, 0x0c6d, 0x0c6e, 0x0c6f, 0x0c78, 0x0ce6, 0x0ce7, 0x0ce8, 0x0ce9, 0x0cea, 0x0ceb, 0x0cec, 0x0ced, 0x0cee, 0x0cef, 0x0d58, 0x0d66, 0x0d67,
		 0x0d68, 0x0d69, 0x0d6a, 0x0d6b, 0x0d6c, 0x0d6d, 0x0d6e, 0x0d6f, 0x0d70, 0x0de6, 0x0de7, 0x0de8, 0x0de9, 0x0dea, 0x0deb, 0x0dec, 0x0ded, 0x0dee, 0x0def, 0x0e50, 0x0e51, 0x0e52, 0x0e53, 0x0e54,
		 0x0e55, 0x0e56, 0x0e57, 0x0e58, 0x0e59, 0x0ed0, 0x0ed1, 0x0ed2, 0x0ed3, 0x0ed4, 0x0ed5, 0x0ed6, 0x0ed7, 0x0ed8, 0x0ed9, 0x0f20, 0x0f21, 0x0f22, 0x0f23, 0x0f24, 0x0f25, 0x0f26, 0x0f27, 0x0f28,
		 0x0f29, 0x0f2a, 0x1040, 0x1041, 0x1042, 0x1043, 0x1044, 0x1045, 0x1046, 0x1047, 0x1048, 0x1049, 0x1090, 0x1091, 0x1092, 0x1093, 0x1094, 0x1095, 0x1096, 0x1097, 0x1098, 0x1099, 0x1369, 0x1372,
		 0x16ee, 0x17e0, 0x17e1, 0x17e2, 0x17e3, 0x17e4, 0x17e5, 0x17e6, 0x17e7, 0x17e8, 0x17e9, 0x17f0, 0x1810, 0x1811, 0x1812, 0x1813, 0x1814, 0x1815, 0x1816, 0x1817, 0x1818, 0x1819, 0x1946, 0x1947,
		 0x1948, 0x1949, 0x194a, 0x194b, 0x194c, 0x194d, 0x194e, 0x194f, 0x19d0, 0x19d1, 0x19d2, 0x19d3, 0x19d4, 0x19d5, 0x19d6, 0x19d7, 0x19d8, 0x19d9, 0x19da, 0x1a80, 0x1a81, 0x1a82, 0x1a83, 0x1a84,
		 0x1a85, 0x1a86, 0x1a87, 0x1a88, 0x1a89, 0x1a90, 0x1a91, 0x1a92, 0x1a93, 0x1a94, 0x1a95, 0x1a96, 0x1a97, 0x1a98, 0x1a99, 0x1b50, 0x1b51, 0x1b52, 0x1b53, 0x1b54, 0x1b55, 0x1b56, 0x1b57, 0x1b58,
		 0x1b59, 0x1bb0, 0x1bb1, 0x1bb2, 0x1bb3, 0x1bb4, 0x1bb5, 0x1bb6, 0x1bb7, 0x1bb8, 0x1bb9, 0x1c40, 0x1c41, 0x1c42, 0x1c43, 0x1c44, 0x1c45, 0x1c46, 0x1c47, 0x1c48, 0x1c49, 0x1c50, 0x1c51, 0x1c52,
		 0x1c53, 0x1c54, 0x1c55, 0x1c56, 0x1c57, 0x1c58, 0x1c59, 0x2070, 0x2074, 0x2080, 0x2150, 0x2185, 0x2460, 0x2469, 0x2474, 0x247d, 0x2488, 0x2491, 0x24ea, 0x24eb, 0x24f5, 0x24fe, 0x24ff, 0x2776,
		 0x277f, 0x2780, 0x2789, 0x278a, 0x2793, 0x2cfd, 0x3007, 0x3021, 0x3038, 0x3192, 0x3220, 0x3248, 0x3251, 0x3280, 0x32b1, 0xa620, 0xa621, 0xa622, 0xa623, 0xa624, 0xa625, 0xa626, 0xa627, 0xa628,
		 0xa629, 0xa6e6, 0xa830, 0xa8d0, 0xa8d1, 0xa8d2, 0xa8d3, 0xa8d4, 0xa8d5, 0xa8d6, 0xa8d7, 0xa8d8, 0xa8d9, 0xa900, 0xa901, 0xa902, 0xa903, 0xa904, 0xa905, 0xa906, 0xa907, 0xa908, 0xa909, 0xa9d0,
		 0xa9d1, 0xa9d2, 0xa9d3, 0xa9d4, 0xa9d5, 0xa9d6, 0xa9d7, 0xa9d8, 0xa9d9, 0xa9f0, 0xa9f1, 0xa9f2, 0xa9f3, 0xa9f4, 0xa9f5, 0xa9f6, 0xa9f7, 0xa9f8, 0xa9f9, 0xaa50, 0xaa51, 0xaa52, 0xaa53, 0xaa54,
		 0xaa55, 0xaa56, 0xaa57, 0xaa58, 0xaa59, 0xabf0, 0xabf1, 0xabf2, 0xabf3, 0xabf4, 0xabf5, 0xabf6, 0xabf7, 0xabf8, 0xabf9, 0xf96b, 0xf973, 0xf978, 0xf9b2, 0xf9d1, 0xf9d3, 0xf9fd, 0xff10, 0xff11,
		 0xff12, 0xff13, 0xff14, 0xff15, 0xff16, 0xff17, 0xff18, 0xff19
	};
	static constexpr uint8_t DigitBuf4HighValueCluster[362] = {
		241,241,241,241,241,241,241,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,241,241,241,241,241,241,241,240,241,241,241,241,
		241,241,241,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,240,241,241,241,241,240,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
		  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,
		  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,
		  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,  0,
		  1,  2,  3,  4,  5,  6,  7,  8,  9,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,
		  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,
		241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
		241,241,241,241,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,
		  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,
		  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241,  0,  1,  2,  3,  4,  5,  6,
		  7,  8,  9,241,241,241,241,241,240,241,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,241
	};
	static constexpr uint8_t DigitBuf5HighSize[362] = {
		 44, 56,  1, 26,  3,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  6,  8,  4,  5,  1, 15, 45,  3,  4,  1,  2,  4,
		  7,  7,  6,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 21,  9,  3,  6,  8, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20,
		110,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  6, 22, 19, 19, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0, 58,  2,  3, 44, 14, 10,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
	};
	static constexpr uint32_t DigitBuf6HighStart[362] = {
		 0x10107, 0x10140, 0x1018a, 0x102e1, 0x10320, 0x10341, 0x1034a, 0x103d1, 0x104a0, 0x104a1, 0x104a2, 0x104a3, 0x104a4, 0x104a5, 0x104a6, 0x104a7, 0x104a8, 0x104a9, 0x10858, 0x10879, 0x108a7, 0x108fb, 0x10916,
		 0x109bc, 0x109c0, 0x109d2, 0x10a40, 0x10a44, 0x10a7d, 0x10a9d, 0x10aeb, 0x10b58, 0x10b78, 0x10ba9, 0x10cfa, 0x10d30, 0x10d31, 0x10d32, 0x10d33, 0x10d34, 0x10d35, 0x10d36, 0x10d37, 0x10d38, 0x10d39, 0x10e60,
		 0x10e69, 0x10f1d, 0x10f51, 0x10fc5, 0x11052, 0x1105b, 0x11066, 0x11067, 0x11068, 0x11069, 0x1106a, 0x1106b, 0x1106c, 0x1106d, 0x1106e, 0x1106f, 0x110f0, 0x110f1, 0x110f2, 0x110f3, 0x110f4, 0x110f5, 0x110f6,
		 0x110f7, 0x110f8, 0x110f9, 0x11136, 0x11137, 0x11138, 0x11139, 0x1113a, 0x1113b, 0x1113c, 0x1113d, 0x1113e, 0x1113f, 0x111d0, 0x111d1, 0x111d2, 0x111d3, 0x111d4, 0x111d5, 0x111d6, 0x111d7, 0x111d8, 0x111d9,
		 0x111e1, 0x112f0, 0x112f1, 0x112f2, 0x112f3, 0x112f4, 0x112f5, 0x112f6, 0x112f7, 0x112f8, 0x112f9, 0x11450, 0x11451, 0x11452, 0x11453, 0x11454, 0x11455, 0x11456, 0x11457, 0x11458, 0x11459, 0x114d0, 0x114d1,
		 0x114d2, 0x114d3, 0x114d4, 0x114d5, 0x114d6, 0x114d7, 0x114d8, 0x114d9, 0x11650, 0x11651, 0x11652, 0x11653, 0x11654, 0x11655, 0x11656, 0x11657, 0x11658, 0x11659, 0x116c0, 0x116c1, 0x116c2, 0x116c3, 0x116c4,
		 0x116c5, 0x116c6, 0x116c7, 0x116c8, 0x116c9, 0x11730, 0x11731, 0x11732, 0x11733, 0x11734, 0x11735, 0x11736, 0x11737, 0x11738, 0x11739, 0x1173a, 0x118e0, 0x118e1, 0x118e2, 0x118e3, 0x118e4, 0x118e5, 0x118e6,
		 0x118e7, 0x118e8, 0x118e9, 0x118ea, 0x11950, 0x11951, 0x11952, 0x11953, 0x11954, 0x11955, 0x11956, 0x11957, 0x11958, 0x11959, 0x11c50, 0x11c51, 0x11c52, 0x11c53, 0x11c54, 0x11c55, 0x11c56, 0x11c57, 0x11c58,
		 0x11c59, 0x11c5a, 0x11d50, 0x11d51, 0x11d52, 0x11d53, 0x11d54, 0x11d55, 0x11d56, 0x11d57, 0x11d58, 0x11d59, 0x11da0, 0x11da1, 0x11da2, 0x11da3, 0x11da4, 0x11da5, 0x11da6, 0x11da7, 0x11da8, 0x11da9, 0x11f50,
		 0x11f51, 0x11f52, 0x11f53, 0x11f54, 0x11f55, 0x11f56, 0x11f57, 0x11f58, 0x11f59, 0x11fc0, 0x12400, 0x16a60, 0x16a61, 0x16a62, 0x16a63, 0x16a64, 0x16a65, 0x16a66, 0x16a67, 0x16a68, 0x16a69, 0x16ac0, 0x16ac1,
		 0x16ac2, 0x16ac3, 0x16ac4, 0x16ac5, 0x16ac6, 0x16ac7, 0x16ac8, 0x16ac9, 0x16b50, 0x16b51, 0x16b52, 0x16b53, 0x16b54, 0x16b55, 0x16b56, 0x16b57, 0x16b58, 0x16b59, 0x16b5b, 0x16e80, 0x1d2c0, 0x1d2e0, 0x1d360,
		 0x1d7ce, 0x1d7cf, 0x1d7d0, 0x1d7d1, 0x1d7d2, 0x1d7d3, 0x1d7d4, 0x1d7d5, 0x1d7d6, 0x1d7d7, 0x1d7d8, 0x1d7d9, 0x1d7da, 0x1d7db, 0x1d7dc, 0x1d7dd, 0x1d7de, 0x1d7df, 0x1d7e0, 0x1d7e1, 0x1d7e2, 0x1d7e3, 0x1d7e4,
		 0x1d7e5, 0x1d7e6, 0x1d7e7, 0x1d7e8, 0x1d7e9, 0x1d7ea, 0x1d7eb, 0x1d7ec, 0x1d7ed, 0x1d7ee, 0x1d7ef, 0x1d7f0, 0x1d7f1, 0x1d7f2, 0x1d7f3, 0x1d7f4, 0x1d7f5, 0x1d7f6, 0x1d7f7, 0x1d7f8, 0x1d7f9, 0x1d7fa, 0x1d7fb,
		 0x1d7fc, 0x1d7fd, 0x1d7fe, 0x1d7ff, 0x1e140, 0x1e141, 0x1e142, 0x1e143, 0x1e144, 0x1e145, 0x1e146, 0x1e147, 0x1e148, 0x1e149, 0x1e2f0, 0x1e2f1, 0x1e2f2, 0x1e2f3, 0x1e2f4, 0x1e2f5, 0x1e2f6, 0x1e2f7, 0x1e2f8,
		 0x1e2f9, 0x1e4f0, 0x1e4f1, 0x1e4f2, 0x1e4f3, 0x1e4f4, 0x1e4f5, 0x1e4f6, 0x1e4f7, 0x1e4f8, 0x1e4f9, 0x1e8c7, 0x1e950, 0x1e951, 0x1e952, 0x1e953, 0x1e954, 0x1e955, 0x1e956, 0x1e957, 0x1e958, 0x1e959, 0x1ec71,
		 0x1ecad, 0x1ecb1, 0x1ed01, 0x1ed2f, 0x1f100, 0x1f10b, 0x1fbf0, 0x1fbf1, 0x1fbf2, 0x1fbf3, 0x1fbf4, 0x1fbf5, 0x1fbf6, 0x1fbf7, 0x1fbf8, 0x1fbf9, 0x2f890
	};
	inline constexpr uint8_t GetDigit(char32_t cp) {
		if (cp < 0x80) {
			if (cp >= 0x0030 && cp <= 0x0039)
				return uint8_t(gen::DigitBuf0AsciiCluster[cp - 48]);
			return 255;
		}
		if (cp < 0x10000) {
			size_t var1LowSizeResult = 0, var0LowIndex = gen::BinarySearch(cp, gen::DigitBuf3LowStart);
			var1LowSizeResult = size_t(gen::DigitBuf2LowSize[var0LowIndex]);
			if (cp - gen::DigitBuf3LowStart[var0LowIndex] > var1LowSizeResult)
				return 255;
			return uint8_t(gen::DigitBuf1LowValueCluster[var0LowIndex]);
		}
		size_t var3HighSizeResult = 0, var2HighIndex = gen::BinarySearch(cp, gen::DigitBuf6HighStart);
		var3HighSizeResult = size_t(gen::DigitBuf5HighSize[var2HighIndex]);
		if (cp - gen::DigitBuf6HighStart[var2HighIndex] > var3HighSizeResult)
			return 255;
		return uint8_t(gen::DigitBuf4HighValueCluster[var2HighIndex]);
	}


	/* Automatically generated from: Unicode White_Space property */
	inline constexpr bool TestWhiteSpace(char32_t cp) {
		if (cp < 0x80) {
			if ((cp >= 0x0009 && cp <= 0x000d) || cp == 0x0020)
				return true;
			return false;
		}
		if (cp == 0x0085 || cp == 0x00a0 || cp == 0x1680 || (cp >= 0x2000 && cp <= 0x200a))
			return true;
		if (cp == 0x2028 || cp == 0x2029 || cp == 0x202f || cp == 0x205f || cp == 0x3000)
			return true;
		return false;
	}


	/* Automatically generated from: Unicode General_Category is cc (i.e. C0, C1) */
	inline constexpr bool TestControl(char32_t cp) {
		if ((cp >= 0x0020 && cp <= 0x007e) || cp >= 0x00a0)
			return false;
		return true;
	}


	/* Automatically generated from: Unicode derived property Alphabetic */
	static constexpr uint16_t LetterBuf0LowSizeCluster[417] = {
		  0,  0,  0, 22, 30,457, 11,  4,  0,  0,  0,  4,  1,  3,  0,  0,  2,  0, 19, 82,138,165, 37,  0, 40, 13,  0,  1,  1,  0,
		 26,  3, 10, 55,  6,101,  7,  7,  2,  2,  0, 47,100, 32,  1,  0, 23, 18, 24, 10, 23,  5, 41, 11,  6, 75, 15,  2, 14, 18,
		  7,  1, 21,  6,  0,  3,  7,  1,  1,  0,  0,  1,  4,  1,  0,  2,  5,  1, 21,  6,  1,  1,  1,  4,  1,  1,  0,  3,  0,  5,
		  2,  8,  2, 21,  6,  1,  4,  8,  2,  1,  0,  3,  3,  2,  7,  1, 21,  6,  1,  4,  7,  1,  1,  1,  1,  4,  0,  1,  5,  2,
		  3,  1,  0,  1,  1,  2, 11,  4,  2,  2,  0,  0, 12,  2, 22, 15,  7,  2,  2,  1,  2,  0,  3,  3,  7,  2, 22,  9,  4,  7,
		  2,  2,  1,  1,  3,  2, 12,  2, 40,  7,  2,  2,  0,  3,  4,  5,  2, 17, 23,  8,  0,  6,  5,  0,  7,  1, 57,  6,  0,  1,
		  0,  4, 23,  0, 18,  2,  4,  0,  0,  3,  0,  7, 35, 18, 15, 35, 54,  0,  4, 63,  3, 37,  0,  0, 42,332,  3,  6,  0,  3,
		 40,  3, 32,  3,  6,  0,  3, 14, 56,  3, 66, 15, 85,  5,619, 16, 25, 74, 10, 19, 20, 19, 12,  2,  1, 51, 18,  0,  0, 88,
		 42, 69, 30, 11,  8, 29,  4, 43, 25, 27, 62, 19,  0,  1,  2, 51, 14,  7, 41,  3, 43, 10, 54,  2, 35,  8, 42,  2,  3,  5,
		  1,  0,191, 13,277,  5, 37,  5,  7,  0,  0,  0, 30, 52,  6,  0,  2,  6,  3,  5, 12,  2,  6,  0,  0, 12,  0,  0,  9,  0,
		  4,  0,  0,  0,  3, 10,  3,  4,  0, 40, 51,228,  3,  1, 37,  0,  0, 55,  0, 22,  6,  6,  6,  6,  6,  6,  6,  6, 31,  0,
		  2,  8,  4,  4, 85,  2, 89,  3, 42, 93, 31, 15,6591,22156, 45,268, 15,  1, 46,  7,112,  8,102, 63,  1,  0,  4, 19, 32, 51,
		 67,  0,  5,  0,  2, 32, 34, 28, 50, 11,  0, 15,  4, 54, 13, 22, 68,  0,  0,  2, 15,  3,  5,  5,  5,  6,  6, 42, 13,122,
		11171, 22, 48,365,105,  6,  4, 11, 12,  4,  0,  1,  1,107,362, 63, 53, 11,  4,134, 25, 25, 88,  5,  5,  5,  2
	};
	static constexpr uint16_t LetterBuf1LowStart[417] = {
		 0x00aa, 0x00b5, 0x00ba, 0x00c0, 0x00d8, 0x00f8, 0x02c6, 0x02e0, 0x02ec, 0x02ee, 0x0345, 0x0370, 0x0376, 0x037a, 0x037f, 0x0386, 0x0388, 0x038c, 0x038e, 0x03a3, 0x03f7, 0x048a, 0x0531, 0x0559,
		 0x0560, 0x05b0, 0x05bf, 0x05c1, 0x05c4, 0x05c7, 0x05d0, 0x05ef, 0x0610, 0x0620, 0x0659, 0x066e, 0x06d5, 0x06e1, 0x06ed, 0x06fa, 0x06ff, 0x0710, 0x074d, 0x07ca, 0x07f4, 0x07fa, 0x0800, 0x081a,
		 0x0840, 0x0860, 0x0870, 0x0889, 0x08a0, 0x08d4, 0x08e3, 0x08f0, 0x093d, 0x094e, 0x0955, 0x0971, 0x0985, 0x098f, 0x0993, 0x09aa, 0x09b2, 0x09b6, 0x09bd, 0x09c7, 0x09cb, 0x09ce, 0x09d7, 0x09dc,
		 0x09df, 0x09f0, 0x09fc, 0x0a01, 0x0a05, 0x0a0f, 0x0a13, 0x0a2a, 0x0a32, 0x0a35, 0x0a38, 0x0a3e, 0x0a47, 0x0a4b, 0x0a51, 0x0a59, 0x0a5e, 0x0a70, 0x0a81, 0x0a85, 0x0a8f, 0x0a93, 0x0aaa, 0x0ab2,
		 0x0ab5, 0x0abd, 0x0ac7, 0x0acb, 0x0ad0, 0x0ae0, 0x0af9, 0x0b01, 0x0b05, 0x0b0f, 0x0b13, 0x0b2a, 0x0b32, 0x0b35, 0x0b3d, 0x0b47, 0x0b4b, 0x0b56, 0x0b5c, 0x0b5f, 0x0b71, 0x0b82, 0x0b85, 0x0b8e,
		 0x0b92, 0x0b99, 0x0b9c, 0x0b9e, 0x0ba3, 0x0ba8, 0x0bae, 0x0bbe, 0x0bc6, 0x0bca, 0x0bd0, 0x0bd7, 0x0c00, 0x0c0e, 0x0c12, 0x0c2a, 0x0c3d, 0x0c46, 0x0c4a, 0x0c55, 0x0c58, 0x0c5d, 0x0c60, 0x0c80,
		 0x0c85, 0x0c8e, 0x0c92, 0x0caa, 0x0cb5, 0x0cbd, 0x0cc6, 0x0cca, 0x0cd5, 0x0cdd, 0x0ce0, 0x0cf1, 0x0d00, 0x0d0e, 0x0d12, 0x0d3d, 0x0d46, 0x0d4a, 0x0d4e, 0x0d54, 0x0d5f, 0x0d7a, 0x0d81, 0x0d85,
		 0x0d9a, 0x0db3, 0x0dbd, 0x0dc0, 0x0dcf, 0x0dd6, 0x0dd8, 0x0df2, 0x0e01, 0x0e40, 0x0e4d, 0x0e81, 0x0e84, 0x0e86, 0x0e8c, 0x0ea5, 0x0ea7, 0x0ebb, 0x0ec0, 0x0ec6, 0x0ecd, 0x0edc, 0x0f00, 0x0f40,
		 0x0f49, 0x0f71, 0x0f88, 0x0f99, 0x1000, 0x1038, 0x103b, 0x1050, 0x109a, 0x10a0, 0x10c7, 0x10cd, 0x10d0, 0x10fc, 0x124a, 0x1250, 0x1258, 0x125a, 0x1260, 0x128a, 0x1290, 0x12b2, 0x12b8, 0x12c0,
		 0x12c2, 0x12c8, 0x12d8, 0x1312, 0x1318, 0x1380, 0x13a0, 0x13f8, 0x1401, 0x166f, 0x1681, 0x16a0, 0x16ee, 0x1700, 0x171f, 0x1740, 0x1760, 0x176e, 0x1772, 0x1780, 0x17b6, 0x17d7, 0x17dc, 0x1820,
		 0x1880, 0x18b0, 0x1900, 0x1920, 0x1930, 0x1950, 0x1970, 0x1980, 0x19b0, 0x1a00, 0x1a20, 0x1a61, 0x1aa7, 0x1abf, 0x1acc, 0x1b00, 0x1b35, 0x1b45, 0x1b80, 0x1bac, 0x1bba, 0x1be7, 0x1c00, 0x1c4d,
		 0x1c5a, 0x1c80, 0x1c90, 0x1cbd, 0x1ce9, 0x1cee, 0x1cf5, 0x1cfa, 0x1d00, 0x1de7, 0x1e00, 0x1f18, 0x1f20, 0x1f48, 0x1f50, 0x1f59, 0x1f5b, 0x1f5d, 0x1f5f, 0x1f80, 0x1fb6, 0x1fbe, 0x1fc2, 0x1fc6,
		 0x1fd0, 0x1fd6, 0x1fe0, 0x1ff2, 0x1ff6, 0x2071, 0x207f, 0x2090, 0x2102, 0x2107, 0x210a, 0x2115, 0x2119, 0x2124, 0x2126, 0x2128, 0x212a, 0x212f, 0x213c, 0x2145, 0x214e, 0x2160, 0x24b6, 0x2c00,
		 0x2ceb, 0x2cf2, 0x2d00, 0x2d27, 0x2d2d, 0x2d30, 0x2d6f, 0x2d80, 0x2da0, 0x2da8, 0x2db0, 0x2db8, 0x2dc0, 0x2dc8, 0x2dd0, 0x2dd8, 0x2de0, 0x2e2f, 0x3005, 0x3021, 0x3031, 0x3038, 0x3041, 0x309d,
		 0x30a1, 0x30fc, 0x3105, 0x3131, 0x31a0, 0x31f0, 0x3400, 0x4e00, 0xa4d0, 0xa500, 0xa610, 0xa62a, 0xa640, 0xa674, 0xa67f, 0xa717, 0xa722, 0xa78b, 0xa7d0, 0xa7d3, 0xa7d5, 0xa7f2, 0xa807, 0xa840,
		 0xa880, 0xa8c5, 0xa8f2, 0xa8fb, 0xa8fd, 0xa90a, 0xa930, 0xa960, 0xa980, 0xa9b4, 0xa9cf, 0xa9e0, 0xa9fa, 0xaa00, 0xaa40, 0xaa60, 0xaa7a, 0xaac0, 0xaac2, 0xaadb, 0xaae0, 0xaaf2, 0xab01, 0xab09,
		 0xab11, 0xab20, 0xab28, 0xab30, 0xab5c, 0xab70, 0xac00, 0xd7b0, 0xd7cb, 0xf900, 0xfa70, 0xfb00, 0xfb13, 0xfb1d, 0xfb2a, 0xfb38, 0xfb3e, 0xfb40, 0xfb43, 0xfb46, 0xfbd3, 0xfd50, 0xfd92, 0xfdf0,
		 0xfe70, 0xfe76, 0xff21, 0xff41, 0xff66, 0xffc2, 0xffca, 0xffd2, 0xffda
	};
	static constexpr uint16_t LetterBuf2HighSizeCluster[314] = {
		 11, 25, 18,  1, 14, 13,122, 52, 28, 48, 31, 29, 42, 29, 35,  7,  4,157, 35, 35, 39, 51, 10, 14,  6,  1, 10, 14,  6,  1,310, 21,
		  7,  5, 41,  8,  5,  0, 43,  1,  0, 22, 22, 30, 18,  1, 21, 25, 55,  1,  3,  1,  7,  2, 28, 28, 28,  7, 27, 53, 21, 18, 17, 72,
		 50, 50, 39, 41,  1,  1, 28,  0, 21, 17, 20, 22, 69,  4, 56,  0, 24, 50,  3, 34,  0, 63,  3,  1,  0,  0, 17, 33,  0,  3,  6,  0,
		  3, 14,  9, 56,  3,  7,  1, 21,  6,  1,  4,  7,  1,  1,  0,  0,  6, 65,  2,  3,  2, 65,  1,  0, 53,  6,  5, 62,  0,  0, 53,  0,
		 26, 13,  6, 56, 63,  7,  0,  7,  1, 29,  1,  1,  3,  7, 45,  5,  0,  1, 50,  9, 71,  0, 72,  8, 44,  6,  0, 29, 21, 13,  6,  1,
		 43,  0,  1,  2,  0,  1,  5,  1, 36,  1,  3,  0, 22, 16, 40,  2,  0,921,110,195, 96,1071,  5,582,568, 30, 78, 29, 47,  3, 20, 18,
		 63, 74, 56, 16,  1,  0,  1,6135,1237,  8,  3,  6,  1,290,  0,  2,  0,  3,395,106, 12,  8,  9,  0, 84, 70,  1,  0,  1,  3, 11,  0,
		  6, 64,  3,  7,  6, 27,  3,  4,  0,  6,339, 24, 24, 30, 24, 30, 24, 30, 24, 30, 24,  7, 30,  5,  6, 16,  6,  1,  4, 61,  0, 44,
		  6,  0, 29, 43, 27,  6,  3,  1, 14,196, 67,  0,  0,  3, 26,  1,  0,  0,  9,  3,  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,
		  0,  0,  1,  0,  3,  6,  3,  3,  0,  9, 16,  2,  4, 16, 25, 25, 25,42719,4153,221,5761,7472,621,541,4938,4191
	};
	static constexpr uint32_t LetterBuf3HighStart[314] = {
		 0x10000, 0x1000d, 0x10028, 0x1003c, 0x1003f, 0x10050, 0x10080, 0x10140, 0x10280, 0x102a0, 0x10300, 0x1032d, 0x10350, 0x10380, 0x103a0, 0x103c8, 0x103d1, 0x10400, 0x104b0, 0x104d8, 0x10500, 0x10530, 0x10570,
		 0x1057c, 0x1058c, 0x10594, 0x10597, 0x105a3, 0x105b3, 0x105bb, 0x10600, 0x10740, 0x10760, 0x10780, 0x10787, 0x107b2, 0x10800, 0x10808, 0x1080a, 0x10837, 0x1083c, 0x1083f, 0x10860, 0x10880, 0x108e0, 0x108f4,
		 0x10900, 0x10920, 0x10980, 0x109be, 0x10a00, 0x10a05, 0x10a0c, 0x10a15, 0x10a19, 0x10a60, 0x10a80, 0x10ac0, 0x10ac9, 0x10b00, 0x10b40, 0x10b60, 0x10b80, 0x10c00, 0x10c80, 0x10cc0, 0x10d00, 0x10e80, 0x10eab,
		 0x10eb0, 0x10f00, 0x10f27, 0x10f30, 0x10f70, 0x10fb0, 0x10fe0, 0x11000, 0x11071, 0x11080, 0x110c2, 0x110d0, 0x11100, 0x11144, 0x11150, 0x11176, 0x11180, 0x111c1, 0x111ce, 0x111da, 0x111dc, 0x11200, 0x11213,
		 0x11237, 0x1123e, 0x11280, 0x11288, 0x1128a, 0x1128f, 0x1129f, 0x112b0, 0x11300, 0x11305, 0x1130f, 0x11313, 0x1132a, 0x11332, 0x11335, 0x1133d, 0x11347, 0x1134b, 0x11350, 0x11357, 0x1135d, 0x11400, 0x11443,
		 0x11447, 0x1145f, 0x11480, 0x114c4, 0x114c7, 0x11580, 0x115b8, 0x115d8, 0x11600, 0x11640, 0x11644, 0x11680, 0x116b8, 0x11700, 0x1171d, 0x11740, 0x11800, 0x118a0, 0x118ff, 0x11909, 0x1190c, 0x11915, 0x11918,
		 0x11937, 0x1193b, 0x1193f, 0x119a0, 0x119aa, 0x119da, 0x119e1, 0x119e3, 0x11a00, 0x11a35, 0x11a50, 0x11a9d, 0x11ab0, 0x11c00, 0x11c0a, 0x11c38, 0x11c40, 0x11c72, 0x11c92, 0x11ca9, 0x11d00, 0x11d08, 0x11d0b,
		 0x11d3a, 0x11d3c, 0x11d3f, 0x11d43, 0x11d46, 0x11d60, 0x11d67, 0x11d6a, 0x11d90, 0x11d93, 0x11d98, 0x11ee0, 0x11f00, 0x11f12, 0x11f3e, 0x11fb0, 0x12000, 0x12400, 0x12480, 0x12f90, 0x13000, 0x13441, 0x14400,
		 0x16800, 0x16a40, 0x16a70, 0x16ad0, 0x16b00, 0x16b40, 0x16b63, 0x16b7d, 0x16e40, 0x16f00, 0x16f4f, 0x16f8f, 0x16fe0, 0x16fe3, 0x16ff0, 0x17000, 0x18800, 0x18d00, 0x1aff0, 0x1aff5, 0x1affd, 0x1b000, 0x1b132,
		 0x1b150, 0x1b155, 0x1b164, 0x1b170, 0x1bc00, 0x1bc70, 0x1bc80, 0x1bc90, 0x1bc9e, 0x1d400, 0x1d456, 0x1d49e, 0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4bb, 0x1d4bd, 0x1d4c5, 0x1d507, 0x1d50d, 0x1d516, 0x1d51e,
		 0x1d53b, 0x1d540, 0x1d546, 0x1d54a, 0x1d552, 0x1d6a8, 0x1d6c2, 0x1d6dc, 0x1d6fc, 0x1d716, 0x1d736, 0x1d750, 0x1d770, 0x1d78a, 0x1d7aa, 0x1d7c4, 0x1df00, 0x1df25, 0x1e000, 0x1e008, 0x1e01b, 0x1e023, 0x1e026,
		 0x1e030, 0x1e08f, 0x1e100, 0x1e137, 0x1e14e, 0x1e290, 0x1e2c0, 0x1e4d0, 0x1e7e0, 0x1e7e8, 0x1e7ed, 0x1e7f0, 0x1e800, 0x1e900, 0x1e947, 0x1e94b, 0x1ee00, 0x1ee05, 0x1ee21, 0x1ee24, 0x1ee27, 0x1ee29, 0x1ee34,
		 0x1ee39, 0x1ee3b, 0x1ee42, 0x1ee47, 0x1ee49, 0x1ee4b, 0x1ee4d, 0x1ee51, 0x1ee54, 0x1ee57, 0x1ee59, 0x1ee5b, 0x1ee5d, 0x1ee5f, 0x1ee61, 0x1ee64, 0x1ee67, 0x1ee6c, 0x1ee74, 0x1ee79, 0x1ee7e, 0x1ee80, 0x1ee8b,
		 0x1eea1, 0x1eea5, 0x1eeab, 0x1f130, 0x1f150, 0x1f170, 0x20000, 0x2a700, 0x2b740, 0x2b820, 0x2ceb0, 0x2ebf0, 0x2f800, 0x30000, 0x31350
	};
	inline constexpr bool TestLetter(char32_t cp) {
		if (cp < 0x80) {
			if ((cp >= 0x0041 && cp <= 0x005a) || (cp >= 0x0061 && cp <= 0x007a))
				return true;
			return false;
		}
		if (cp < 0x10000) {
			size_t var1LowSizeResult = 0, var0LowIndex = gen::BinarySearch(cp, gen::LetterBuf1LowStart);
			var1LowSizeResult = size_t(gen::LetterBuf0LowSizeCluster[var0LowIndex]);
			if (cp - gen::LetterBuf1LowStart[var0LowIndex] > var1LowSizeResult)
				return false;
			return true;
		}
		size_t var3HighSizeResult = 0, var2HighIndex = gen::BinarySearch(cp, gen::LetterBuf3HighStart);
		var3HighSizeResult = size_t(gen::LetterBuf2HighSizeCluster[var2HighIndex]);
		if (cp - gen::LetterBuf3HighStart[var2HighIndex] > var3HighSizeResult)
			return false;
		return true;
	}


	/* Automatically generated from: Unicode derived property Alphabetic or Numeric_Type=Decimal,Digit,Numeric */
	static constexpr uint16_t AlNumBuf0LowSizeCluster[448] = {
		  0,  1,  0,  1,  2, 22, 30,457, 11,  4,  0,  0,  0,  4,  1,  3,  0,  0,  2,  0, 19, 82,138,165, 37,  0, 40, 13,  0,  1,  1,  0,
		 26,  3, 10, 55, 16,101,  7,  7, 15,  0, 47,100, 42,  1,  0, 23, 18, 24, 10, 23,  5, 41, 11,  6, 75, 15,  2, 14,  9, 18,  7,  1,
		 21,  6,  0,  3,  7,  1,  1,  0,  0,  1,  4, 11,  5,  0,  2,  5,  1, 21,  6,  1,  1,  1,  4,  1,  1,  0,  3,  0, 15,  2,  8,  2,
		 21,  6,  1,  4,  8,  2,  1,  0,  3,  9,  3,  2,  7,  1, 21,  6,  1,  4,  7,  1,  1,  1,  1,  4,  9,  6,  1,  5,  2,  3,  1,  0,
		  1,  1,  2, 11,  4,  2,  2,  0,  0, 12, 12,  2, 22, 15,  7,  2,  2,  1,  2,  0,  3,  9,  6,  3,  7,  2, 22,  9,  4,  7,  2,  2,
		  1,  1,  3,  9,  2, 12,  2, 40,  7,  2,  2,  0, 15, 18,  5,  2, 17, 23,  8,  0,  6,  5,  0,  7,  9,  1, 57,  6,  0,  9,  1,  0,
		  4, 23,  0, 18,  2,  4,  0,  0,  9,  3,  0, 19,  7, 35, 18, 15, 35, 54,  0, 14, 77, 37,  0,  0, 42,332,  3,  6,  0,  3, 40,  3,
		 32,  3,  6,  0,  3, 14, 56,  3, 66, 19, 15, 85,  5,619, 16, 25, 74, 10, 19, 20, 19, 12,  2,  1, 51, 18,  0,  0,  9,  9,  9, 88,
		 42, 69, 30, 11,  8, 39,  4, 43, 25, 10, 27, 62, 19,  9,  9,  0,  1,  2, 51, 14,  7,  9, 41, 57, 10, 54,  9, 48,  8, 42,  2,  3,
		  5,  1,  0,191, 13,277,  5, 37,  5,  7,  0,  0,  0, 30, 52,  6,  0,  2,  6,  3,  5, 12,  2,  6,  1,  5, 10, 12,  0,  0,  9,  0,
		  4,  0,  0,  0,  3, 10,  3,  4,  0, 57, 59, 73, 29,228,  3,  1,  0, 37,  0,  0, 55,  0, 22,  6,  6,  6,  6,  6,  6,  6,  6, 31,
		  0,  2,  8,  4,  4, 85,  2, 89,  3, 42, 93,  3, 31, 15,  9,  7, 14,  9, 14,6591,22156, 45,268, 27, 46,  7,112,  8,102, 63,  1,  0,
		  4, 19, 32,  5, 51, 67,  0,  9,  5,  0, 45, 34, 28, 50, 11, 10, 30, 54, 13,  9, 22, 68,  0,  0,  2, 15,  3,  5,  5,  5,  6,  6,
		 42, 13,122,  9,11171, 22, 48,365,105,  6,  4, 11, 12,  4,  0,  1,  1,107,362, 63, 53, 11,  4,134,  9, 25, 25, 88,  5,  5,  5,  2
	};
	static constexpr uint16_t AlNumBuf1LowStart[448] = {
		 0x00aa, 0x00b2, 0x00b5, 0x00b9, 0x00bc, 0x00c0, 0x00d8, 0x00f8, 0x02c6, 0x02e0, 0x02ec, 0x02ee, 0x0345, 0x0370, 0x0376, 0x037a, 0x037f, 0x0386, 0x0388, 0x038c, 0x038e, 0x03a3, 0x03f7, 0x048a,
		 0x0531, 0x0559, 0x0560, 0x05b0, 0x05bf, 0x05c1, 0x05c4, 0x05c7, 0x05d0, 0x05ef, 0x0610, 0x0620, 0x0659, 0x066e, 0x06d5, 0x06e1, 0x06ed, 0x06ff, 0x0710, 0x074d, 0x07c0, 0x07f4, 0x07fa, 0x0800,
		 0x081a, 0x0840, 0x0860, 0x0870, 0x0889, 0x08a0, 0x08d4, 0x08e3, 0x08f0, 0x093d, 0x094e, 0x0955, 0x0966, 0x0971, 0x0985, 0x098f, 0x0993, 0x09aa, 0x09b2, 0x09b6, 0x09bd, 0x09c7, 0x09cb, 0x09ce,
		 0x09d7, 0x09dc, 0x09df, 0x09e6, 0x09f4, 0x09fc, 0x0a01, 0x0a05, 0x0a0f, 0x0a13, 0x0a2a, 0x0a32, 0x0a35, 0x0a38, 0x0a3e, 0x0a47, 0x0a4b, 0x0a51, 0x0a59, 0x0a5e, 0x0a66, 0x0a81, 0x0a85, 0x0a8f,
		 0x0a93, 0x0aaa, 0x0ab2, 0x0ab5, 0x0abd, 0x0ac7, 0x0acb, 0x0ad0, 0x0ae0, 0x0ae6, 0x0af9, 0x0b01, 0x0b05, 0x0b0f, 0x0b13, 0x0b2a, 0x0b32, 0x0b35, 0x0b3d, 0x0b47, 0x0b4b, 0x0b56, 0x0b5c, 0x0b5f,
		 0x0b66, 0x0b71, 0x0b82, 0x0b85, 0x0b8e, 0x0b92, 0x0b99, 0x0b9c, 0x0b9e, 0x0ba3, 0x0ba8, 0x0bae, 0x0bbe, 0x0bc6, 0x0bca, 0x0bd0, 0x0bd7, 0x0be6, 0x0c00, 0x0c0e, 0x0c12, 0x0c2a, 0x0c3d, 0x0c46,
		 0x0c4a, 0x0c55, 0x0c58, 0x0c5d, 0x0c60, 0x0c66, 0x0c78, 0x0c80, 0x0c85, 0x0c8e, 0x0c92, 0x0caa, 0x0cb5, 0x0cbd, 0x0cc6, 0x0cca, 0x0cd5, 0x0cdd, 0x0ce0, 0x0ce6, 0x0cf1, 0x0d00, 0x0d0e, 0x0d12,
		 0x0d3d, 0x0d46, 0x0d4a, 0x0d4e, 0x0d54, 0x0d66, 0x0d7a, 0x0d81, 0x0d85, 0x0d9a, 0x0db3, 0x0dbd, 0x0dc0, 0x0dcf, 0x0dd6, 0x0dd8, 0x0de6, 0x0df2, 0x0e01, 0x0e40, 0x0e4d, 0x0e50, 0x0e81, 0x0e84,
		 0x0e86, 0x0e8c, 0x0ea5, 0x0ea7, 0x0ebb, 0x0ec0, 0x0ec6, 0x0ecd, 0x0ed0, 0x0edc, 0x0f00, 0x0f20, 0x0f40, 0x0f49, 0x0f71, 0x0f88, 0x0f99, 0x1000, 0x1038, 0x103b, 0x1050, 0x10a0, 0x10c7, 0x10cd,
		 0x10d0, 0x10fc, 0x124a, 0x1250, 0x1258, 0x125a, 0x1260, 0x128a, 0x1290, 0x12b2, 0x12b8, 0x12c0, 0x12c2, 0x12c8, 0x12d8, 0x1312, 0x1318, 0x1369, 0x1380, 0x13a0, 0x13f8, 0x1401, 0x166f, 0x1681,
		 0x16a0, 0x16ee, 0x1700, 0x171f, 0x1740, 0x1760, 0x176e, 0x1772, 0x1780, 0x17b6, 0x17d7, 0x17dc, 0x17e0, 0x17f0, 0x1810, 0x1820, 0x1880, 0x18b0, 0x1900, 0x1920, 0x1930, 0x1946, 0x1970, 0x1980,
		 0x19b0, 0x19d0, 0x1a00, 0x1a20, 0x1a61, 0x1a80, 0x1a90, 0x1aa7, 0x1abf, 0x1acc, 0x1b00, 0x1b35, 0x1b45, 0x1b50, 0x1b80, 0x1bac, 0x1be7, 0x1c00, 0x1c40, 0x1c4d, 0x1c80, 0x1c90, 0x1cbd, 0x1ce9,
		 0x1cee, 0x1cf5, 0x1cfa, 0x1d00, 0x1de7, 0x1e00, 0x1f18, 0x1f20, 0x1f48, 0x1f50, 0x1f59, 0x1f5b, 0x1f5d, 0x1f5f, 0x1f80, 0x1fb6, 0x1fbe, 0x1fc2, 0x1fc6, 0x1fd0, 0x1fd6, 0x1fe0, 0x1ff2, 0x1ff6,
		 0x2070, 0x2074, 0x207f, 0x2090, 0x2102, 0x2107, 0x210a, 0x2115, 0x2119, 0x2124, 0x2126, 0x2128, 0x212a, 0x212f, 0x213c, 0x2145, 0x214e, 0x2150, 0x2460, 0x24b6, 0x2776, 0x2c00, 0x2ceb, 0x2cf2,
		 0x2cfd, 0x2d00, 0x2d27, 0x2d2d, 0x2d30, 0x2d6f, 0x2d80, 0x2da0, 0x2da8, 0x2db0, 0x2db8, 0x2dc0, 0x2dc8, 0x2dd0, 0x2dd8, 0x2de0, 0x2e2f, 0x3005, 0x3021, 0x3031, 0x3038, 0x3041, 0x309d, 0x30a1,
		 0x30fc, 0x3105, 0x3131, 0x3192, 0x31a0, 0x31f0, 0x3220, 0x3248, 0x3251, 0x3280, 0x32b1, 0x3400, 0x4e00, 0xa4d0, 0xa500, 0xa610, 0xa640, 0xa674, 0xa67f, 0xa717, 0xa722, 0xa78b, 0xa7d0, 0xa7d3,
		 0xa7d5, 0xa7f2, 0xa807, 0xa830, 0xa840, 0xa880, 0xa8c5, 0xa8d0, 0xa8f2, 0xa8fb, 0xa8fd, 0xa930, 0xa960, 0xa980, 0xa9b4, 0xa9cf, 0xa9e0, 0xaa00, 0xaa40, 0xaa50, 0xaa60, 0xaa7a, 0xaac0, 0xaac2,
		 0xaadb, 0xaae0, 0xaaf2, 0xab01, 0xab09, 0xab11, 0xab20, 0xab28, 0xab30, 0xab5c, 0xab70, 0xabf0, 0xac00, 0xd7b0, 0xd7cb, 0xf900, 0xfa70, 0xfb00, 0xfb13, 0xfb1d, 0xfb2a, 0xfb38, 0xfb3e, 0xfb40,
		 0xfb43, 0xfb46, 0xfbd3, 0xfd50, 0xfd92, 0xfdf0, 0xfe70, 0xfe76, 0xff10, 0xff21, 0xff41, 0xff66, 0xffc2, 0xffca, 0xffd2, 0xffda
	};
	static constexpr uint16_t AlNumBuf2HighSizeCluster[359] = {
		 11, 25, 18,  1, 14, 13,122, 44, 56,  1, 28, 48, 26, 35, 29, 42, 29, 35,  7,  4,157,  9, 35, 35, 39, 51, 10, 14,  6,  1,
		 10, 14,  6,  1,310, 21,  7,  5, 41,  8,  5,  0, 43,  1,  0, 22, 30, 37,  8, 18,  1, 32, 25, 55, 19, 49,  1,  7,  2, 28,
		  8, 30, 31,  7, 27,  4, 53, 21, 26, 25,  6, 72, 50, 50, 45,  9, 30, 41,  1,  1, 39, 21,  3, 17, 27, 22, 69, 29,  4, 56,
		  0, 24,  9, 50,  9,  3, 34,  0, 63,  3, 12,  0, 19, 17, 33,  0,  3,  6,  0,  3, 14,  9, 56,  9,  3,  7,  1, 21,  6,  1,
		  4,  7,  1,  1,  0,  0,  6, 65,  2,  3,  9,  2, 65,  1,  0,  9, 53,  6,  5, 62,  0,  0,  9, 53,  0,  9, 26, 13, 11,  6,
		 56, 82,  7,  0,  7,  1, 29,  1,  1,  3,  9,  7, 45,  5,  0,  1, 50,  9, 71,  0, 72,  8, 44,  6,  0, 28, 29, 21, 13,  6,
		  1, 43,  0,  1,  2,  0,  1,  9,  5,  1, 36,  1,  3,  0,  9, 22, 16, 40,  2,  9,  0, 20,921,110,195, 96,1071,  5,582,568,
		 30,  9, 78,  9, 29, 47,  3,  9,  6, 20, 18, 86, 74, 56, 16,  1,  0,  1,6135,1237,  8,  3,  6,  1,290,  0,  2,  0,  3,395,
		106, 12,  8,  9,  0, 19, 19, 24, 84, 70,  1,  0,  1,  3, 11,  0,  6, 64,  3,  7,  6, 27,  3,  4,  0,  6,339, 24, 24, 30,
		 24, 30, 24, 30, 24, 30, 24,  7, 49, 30,  5,  6, 16,  6,  1,  4, 61,  0, 44,  6,  9,  0, 29, 43,  9, 27,  9,  6,  3,  1,
		 14,196,  8, 67,  0,  0,  9, 58,  2,  3, 44, 14,  3, 26,  1,  0,  0,  9,  3,  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,
		  0,  0,  0,  1,  0,  3,  6,  3,  3,  0,  9, 16,  2,  4, 16, 12, 25, 25, 25,  9,42719,4153,221,5761,7472,621,541,4938,4191
	};
	static constexpr uint32_t AlNumBuf3HighStart[359] = {
		 0x10000, 0x1000d, 0x10028, 0x1003c, 0x1003f, 0x10050, 0x10080, 0x10107, 0x10140, 0x1018a, 0x10280, 0x102a0, 0x102e1, 0x10300, 0x1032d, 0x10350, 0x10380, 0x103a0, 0x103c8, 0x103d1, 0x10400, 0x104a0, 0x104b0, 0x104d8,
		 0x10500, 0x10530, 0x10570, 0x1057c, 0x1058c, 0x10594, 0x10597, 0x105a3, 0x105b3, 0x105bb, 0x10600, 0x10740, 0x10760, 0x10780, 0x10787, 0x107b2, 0x10800, 0x10808, 0x1080a, 0x10837, 0x1083c, 0x1083f, 0x10858, 0x10879,
		 0x108a7, 0x108e0, 0x108f4, 0x108fb, 0x10920, 0x10980, 0x109bc, 0x109d2, 0x10a05, 0x10a0c, 0x10a15, 0x10a19, 0x10a40, 0x10a60, 0x10a80, 0x10ac0, 0x10ac9, 0x10aeb, 0x10b00, 0x10b40, 0x10b58, 0x10b78, 0x10ba9, 0x10c00,
		 0x10c80, 0x10cc0, 0x10cfa, 0x10d30, 0x10e60, 0x10e80, 0x10eab, 0x10eb0, 0x10f00, 0x10f30, 0x10f51, 0x10f70, 0x10fb0, 0x10fe0, 0x11000, 0x11052, 0x11071, 0x11080, 0x110c2, 0x110d0, 0x110f0, 0x11100, 0x11136, 0x11144,
		 0x11150, 0x11176, 0x11180, 0x111c1, 0x111ce, 0x111dc, 0x111e1, 0x11200, 0x11213, 0x11237, 0x1123e, 0x11280, 0x11288, 0x1128a, 0x1128f, 0x1129f, 0x112b0, 0x112f0, 0x11300, 0x11305, 0x1130f, 0x11313, 0x1132a, 0x11332,
		 0x11335, 0x1133d, 0x11347, 0x1134b, 0x11350, 0x11357, 0x1135d, 0x11400, 0x11443, 0x11447, 0x11450, 0x1145f, 0x11480, 0x114c4, 0x114c7, 0x114d0, 0x11580, 0x115b8, 0x115d8, 0x11600, 0x11640, 0x11644, 0x11650, 0x11680,
		 0x116b8, 0x116c0, 0x11700, 0x1171d, 0x11730, 0x11740, 0x11800, 0x118a0, 0x118ff, 0x11909, 0x1190c, 0x11915, 0x11918, 0x11937, 0x1193b, 0x1193f, 0x11950, 0x119a0, 0x119aa, 0x119da, 0x119e1, 0x119e3, 0x11a00, 0x11a35,
		 0x11a50, 0x11a9d, 0x11ab0, 0x11c00, 0x11c0a, 0x11c38, 0x11c40, 0x11c50, 0x11c72, 0x11c92, 0x11ca9, 0x11d00, 0x11d08, 0x11d0b, 0x11d3a, 0x11d3c, 0x11d3f, 0x11d43, 0x11d46, 0x11d50, 0x11d60, 0x11d67, 0x11d6a, 0x11d90,
		 0x11d93, 0x11d98, 0x11da0, 0x11ee0, 0x11f00, 0x11f12, 0x11f3e, 0x11f50, 0x11fb0, 0x11fc0, 0x12000, 0x12400, 0x12480, 0x12f90, 0x13000, 0x13441, 0x14400, 0x16800, 0x16a40, 0x16a60, 0x16a70, 0x16ac0, 0x16ad0, 0x16b00,
		 0x16b40, 0x16b50, 0x16b5b, 0x16b63, 0x16b7d, 0x16e40, 0x16f00, 0x16f4f, 0x16f8f, 0x16fe0, 0x16fe3, 0x16ff0, 0x17000, 0x18800, 0x18d00, 0x1aff0, 0x1aff5, 0x1affd, 0x1b000, 0x1b132, 0x1b150, 0x1b155, 0x1b164, 0x1b170,
		 0x1bc00, 0x1bc70, 0x1bc80, 0x1bc90, 0x1bc9e, 0x1d2c0, 0x1d2e0, 0x1d360, 0x1d400, 0x1d456, 0x1d49e, 0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4bb, 0x1d4bd, 0x1d4c5, 0x1d507, 0x1d50d, 0x1d516, 0x1d51e, 0x1d53b, 0x1d540,
		 0x1d546, 0x1d54a, 0x1d552, 0x1d6a8, 0x1d6c2, 0x1d6dc, 0x1d6fc, 0x1d716, 0x1d736, 0x1d750, 0x1d770, 0x1d78a, 0x1d7aa, 0x1d7c4, 0x1d7ce, 0x1df00, 0x1df25, 0x1e000, 0x1e008, 0x1e01b, 0x1e023, 0x1e026, 0x1e030, 0x1e08f,
		 0x1e100, 0x1e137, 0x1e140, 0x1e14e, 0x1e290, 0x1e2c0, 0x1e2f0, 0x1e4d0, 0x1e4f0, 0x1e7e0, 0x1e7e8, 0x1e7ed, 0x1e7f0, 0x1e800, 0x1e8c7, 0x1e900, 0x1e947, 0x1e94b, 0x1e950, 0x1ec71, 0x1ecad, 0x1ecb1, 0x1ed01, 0x1ed2f,
		 0x1ee00, 0x1ee05, 0x1ee21, 0x1ee24, 0x1ee27, 0x1ee29, 0x1ee34, 0x1ee39, 0x1ee3b, 0x1ee42, 0x1ee47, 0x1ee49, 0x1ee4b, 0x1ee4d, 0x1ee51, 0x1ee54, 0x1ee57, 0x1ee59, 0x1ee5b, 0x1ee5d, 0x1ee5f, 0x1ee61, 0x1ee64, 0x1ee67,
		 0x1ee6c, 0x1ee74, 0x1ee79, 0x1ee7e, 0x1ee80, 0x1ee8b, 0x1eea1, 0x1eea5, 0x1eeab, 0x1f100, 0x1f130, 0x1f150, 0x1f170, 0x1fbf0, 0x20000, 0x2a700, 0x2b740, 0x2b820, 0x2ceb0, 0x2ebf0, 0x2f800, 0x30000, 0x31350
	};
	inline constexpr bool TestAlNum(char32_t cp) {
		if (cp < 0x80) {
			if ((cp >= 0x0030 && cp <= 0x0039) || (cp >= 0x0041 && cp <= 0x005a) || (cp >= 0x0061 && cp <= 0x007a))
				return true;
			return false;
		}
		if (cp < 0x10000) {
			size_t var1LowSizeResult = 0, var0LowIndex = gen::BinarySearch(cp, gen::AlNumBuf1LowStart);
			var1LowSizeResult = size_t(gen::AlNumBuf0LowSizeCluster[var0LowIndex]);
			if (cp - gen::AlNumBuf1LowStart[var0LowIndex] > var1LowSizeResult)
				return false;
			return true;
		}
		size_t var3HighSizeResult = 0, var2HighIndex = gen::BinarySearch(cp, gen::AlNumBuf3HighStart);
		var3HighSizeResult = size_t(gen::AlNumBuf2HighSizeCluster[var2HighIndex]);
		if (cp - gen::AlNumBuf3HighStart[var2HighIndex] > var3HighSizeResult)
			return false;
		return true;
	}


	/* Automatically generated from: Unicode General_Category is L*,M*,N*,P*,S* or optionally Zs */
	enum class PrintableType : uint8_t {
		none,
		printable,
		printSpace
	};
	static constexpr uint16_t PrintableBuf0LowSizeCluster[350] = {
		  0, 11,713,  5,  6,  0, 19,396, 37, 49,  2, 54, 26,  5, 21,191, 47, 58,100, 58, 48, 14, 27,  0, 10, 30, 73,160,  7,  1, 21,  6,
		  0,  3,  8,  1,  3,  0,  1,  4, 24,  2,  5,  1, 21,  6,  1,  1,  1,  0,  4,  1,  2,  0,  3,  0, 16,  2,  8,  2, 21,  6,  1,  4,
		  9,  2,  2,  0,  3, 11,  6,  2,  7,  1, 21,  6,  1,  4,  8,  1,  2,  2,  1,  4, 17,  1,  5,  2,  3,  1,  0,  1,  1,  2, 11,  4,
		  2,  3,  0,  0, 20, 12,  2, 22, 15,  8,  2,  3,  1,  2,  0,  3,  9, 21,  2, 22,  9,  4,  8,  2,  3,  1,  1,  3,  9,  2, 12,  2,
		 50,  2,  5, 15, 25,  2, 17, 23,  8,  0,  6,  0,  5,  0,  7,  9,  2, 57, 28,  1,  0,  4, 23,  0, 22,  4,  0,  6,  9,  3, 71, 35,
		 38, 35, 14, 12,197,  0,  0,376,  3,  6,  0,  3, 40,  3, 32,  3,  6,  0,  3, 14, 56,  3, 66, 31, 25, 85,  5,639,  0, 27, 88, 21,
		 23, 19, 12,  2,  1, 93,  9,  9, 13, 10, 88, 42, 69, 30, 11, 11,  0, 41,  4, 43, 25, 10, 61, 64, 28, 10,  9, 13, 30, 76, 46,115,
		 59, 14, 59, 42, 10, 42,533,  5, 37,  5,  7,  0,  0,  0, 30, 52, 14, 13,  5, 18,  2,  8, 10, 23,  0, 46,  0,  1, 26, 12, 32, 32,
		139,662, 10,1811, 31,348, 44,  0,  0, 55,  1, 23,  6,  6,  6,  6,  6,  6,  6,  6,125, 25, 88,213, 15,  0, 62, 85,102, 42, 93, 83,
		 47,29292, 54,347,183,202,  1,  0,  4, 58,  9, 55, 69, 11,115, 29, 77, 10, 32, 54, 13,  9,102, 27,  5,  5,  5,  6,  6, 59,125,  9,
		11171, 22, 48,365,105,  6,  4, 25,  4,  0,  1,  1,124,444, 53,  0, 41, 50, 18,  3,  4,134,189,  5,  5,  5,  2,  6,  6,  1
	};
	static constexpr uint16_t PrintableBuf1LowStart[350] = {
		 0x00a0, 0x00a1, 0x00ae, 0x037a, 0x0384, 0x038c, 0x038e, 0x03a3, 0x0531, 0x0559, 0x058d, 0x0591, 0x05d0, 0x05ef, 0x0606, 0x061d, 0x06de, 0x0710, 0x074d, 0x07c0, 0x07fd, 0x0830, 0x0840, 0x085e,
		 0x0860, 0x0870, 0x0898, 0x08e3, 0x0985, 0x098f, 0x0993, 0x09aa, 0x09b2, 0x09b6, 0x09bc, 0x09c7, 0x09cb, 0x09d7, 0x09dc, 0x09df, 0x09e6, 0x0a01, 0x0a05, 0x0a0f, 0x0a13, 0x0a2a, 0x0a32, 0x0a35,
		 0x0a38, 0x0a3c, 0x0a3e, 0x0a47, 0x0a4b, 0x0a51, 0x0a59, 0x0a5e, 0x0a66, 0x0a81, 0x0a85, 0x0a8f, 0x0a93, 0x0aaa, 0x0ab2, 0x0ab5, 0x0abc, 0x0ac7, 0x0acb, 0x0ad0, 0x0ae0, 0x0ae6, 0x0af9, 0x0b01,
		 0x0b05, 0x0b0f, 0x0b13, 0x0b2a, 0x0b32, 0x0b35, 0x0b3c, 0x0b47, 0x0b4b, 0x0b55, 0x0b5c, 0x0b5f, 0x0b66, 0x0b82, 0x0b85, 0x0b8e, 0x0b92, 0x0b99, 0x0b9c, 0x0b9e, 0x0ba3, 0x0ba8, 0x0bae, 0x0bbe,
		 0x0bc6, 0x0bca, 0x0bd0, 0x0bd7, 0x0be6, 0x0c00, 0x0c0e, 0x0c12, 0x0c2a, 0x0c3c, 0x0c46, 0x0c4a, 0x0c55, 0x0c58, 0x0c5d, 0x0c60, 0x0c66, 0x0c77, 0x0c8e, 0x0c92, 0x0caa, 0x0cb5, 0x0cbc, 0x0cc6,
		 0x0cca, 0x0cd5, 0x0cdd, 0x0ce0, 0x0ce6, 0x0cf1, 0x0d00, 0x0d0e, 0x0d12, 0x0d46, 0x0d4a, 0x0d54, 0x0d66, 0x0d81, 0x0d85, 0x0d9a, 0x0db3, 0x0dbd, 0x0dc0, 0x0dca, 0x0dcf, 0x0dd6, 0x0dd8, 0x0de6,
		 0x0df2, 0x0e01, 0x0e3f, 0x0e81, 0x0e84, 0x0e86, 0x0e8c, 0x0ea5, 0x0ea7, 0x0ec0, 0x0ec6, 0x0ec8, 0x0ed0, 0x0edc, 0x0f00, 0x0f49, 0x0f71, 0x0f99, 0x0fbe, 0x0fce, 0x1000, 0x10c7, 0x10cd, 0x10d0,
		 0x124a, 0x1250, 0x1258, 0x125a, 0x1260, 0x128a, 0x1290, 0x12b2, 0x12b8, 0x12c0, 0x12c2, 0x12c8, 0x12d8, 0x1312, 0x1318, 0x135d, 0x1380, 0x13a0, 0x13f8, 0x1400, 0x1680, 0x1681, 0x16a0, 0x1700,
		 0x171f, 0x1740, 0x1760, 0x176e, 0x1772, 0x1780, 0x17e0, 0x17f0, 0x1800, 0x180f, 0x1820, 0x1880, 0x18b0, 0x1900, 0x1920, 0x1930, 0x1940, 0x1944, 0x1970, 0x1980, 0x19b0, 0x19d0, 0x19de, 0x1a1e,
		 0x1a60, 0x1a7f, 0x1a90, 0x1aa0, 0x1ab0, 0x1b00, 0x1b50, 0x1b80, 0x1bfc, 0x1c3b, 0x1c4d, 0x1c90, 0x1cbd, 0x1cd0, 0x1d00, 0x1f18, 0x1f20, 0x1f48, 0x1f50, 0x1f59, 0x1f5b, 0x1f5d, 0x1f5f, 0x1f80,
		 0x1fb6, 0x1fc6, 0x1fd6, 0x1fdd, 0x1ff2, 0x1ff6, 0x2000, 0x2010, 0x202f, 0x2030, 0x205f, 0x2070, 0x2074, 0x2090, 0x20a0, 0x20d0, 0x2100, 0x2190, 0x2440, 0x2460, 0x2b76, 0x2b97, 0x2cf9, 0x2d27,
		 0x2d2d, 0x2d30, 0x2d6f, 0x2d7f, 0x2da0, 0x2da8, 0x2db0, 0x2db8, 0x2dc0, 0x2dc8, 0x2dd0, 0x2dd8, 0x2de0, 0x2e80, 0x2e9b, 0x2f00, 0x2ff0, 0x3000, 0x3001, 0x3041, 0x3099, 0x3105, 0x3131, 0x3190,
		 0x31ef, 0x3220, 0xa490, 0xa4d0, 0xa640, 0xa700, 0xa7d0, 0xa7d3, 0xa7d5, 0xa7f2, 0xa830, 0xa840, 0xa880, 0xa8ce, 0xa8e0, 0xa95f, 0xa980, 0xa9cf, 0xa9de, 0xaa00, 0xaa40, 0xaa50, 0xaa5c, 0xaadb,
		 0xab01, 0xab09, 0xab11, 0xab20, 0xab28, 0xab30, 0xab70, 0xabf0, 0xac00, 0xd7b0, 0xd7cb, 0xf900, 0xfa70, 0xfb00, 0xfb13, 0xfb1d, 0xfb38, 0xfb3e, 0xfb40, 0xfb43, 0xfb46, 0xfbd3, 0xfd92, 0xfdcf,
		 0xfdf0, 0xfe20, 0xfe54, 0xfe68, 0xfe70, 0xfe76, 0xff01, 0xffc2, 0xffca, 0xffd2, 0xffda, 0xffe0, 0xffe8, 0xfffc
	};
	static constexpr uint16_t PrintableBuf2HighSizeCluster[367] = {
		 11, 25, 18,  1, 14, 13,122,  2, 44, 87, 12,  0, 45, 28, 48, 27, 35, 29, 42, 29, 36, 13,157,  9, 35, 35, 39, 51, 11, 14,  6,
		  1, 10, 14,  6,  1,310, 21,  7,  5, 41,  8,  5,  0, 43,  1,  0, 22, 71,  8, 18,  1, 32, 26,  0, 55, 19, 49,  1,  7,  2, 28,
		  2,  9,  8, 63, 38, 11, 53, 28, 26, 25,  3,  6, 72, 50, 50, 45,  9, 30, 41,  2,  1, 42, 41, 25, 27, 22, 77, 35, 61,  4, 24,
		  9, 52, 17, 38, 95, 19, 17, 46,  6,  0,  3, 14, 10, 58,  9,  3,  7,  1, 21,  6,  1,  4,  9,  1,  2,  0,  0,  6,  6,  4, 91,
		  4, 71,  9, 53, 37, 68,  9, 12, 57,  9, 26, 14, 22, 59, 82,  7,  0,  7,  1, 29,  1, 11,  9,  7, 45, 10, 71, 82, 72,  9,  8,
		 44, 13, 28, 31, 21, 13,  6,  1, 43,  0,  1,  8,  9,  5,  1, 36,  1,  5,  9, 24, 16, 40, 27,  0, 49,922,110,  4,195, 98,1071,
		 21,582,568, 30,  9, 80,  9, 29,  5, 69,  9,  6, 20, 18, 90, 74, 56, 16,  4,  1,6135,1237,  8,  3,  6,  1,290,  0,  2,  0,  3,
		395,106, 12,  8,  9,  3, 45, 22,115,245, 38, 73,111, 69, 19, 19, 86, 24, 84, 70,  1,  0,  1,  3, 11,  0,  6, 64,  3,  7,  6,
		 27,  3,  4,  0,  6,339,291,701,  4, 14, 30,  5,  6, 16,  6,  1,  4, 61,  0, 44, 13,  9,  1, 30, 57,  0, 41,  6,  3,  1, 14,
		196, 15, 75,  9,  1, 67, 60,  3, 26,  1,  0,  0,  9,  3,  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,  0,  0,  1,  0,  3,
		  6,  3,  3,  0,  9, 16,  2,  4, 16,  1, 43, 99, 14, 14, 14, 36,173, 28, 43,  8,  1,  5,983, 16, 12,118, 94, 11,  0, 11, 55,
		  9, 39, 29,  1,339, 13, 12,  8, 45,  6, 13,  8,  8,146, 54,  9,42719,4153,221,5761,7472,621,541,4938,4191,239
	};
	static constexpr uint32_t PrintableBuf3HighStart[367] = {
		 0x10000, 0x1000d, 0x10028, 0x1003c, 0x1003f, 0x10050, 0x10080, 0x10100, 0x10107, 0x10137, 0x10190, 0x101a0, 0x101d0, 0x10280, 0x102a0, 0x102e0, 0x10300, 0x1032d, 0x10350, 0x10380, 0x1039f, 0x103c8, 0x10400,
		 0x104a0, 0x104b0, 0x104d8, 0x10500, 0x10530, 0x1056f, 0x1057c, 0x1058c, 0x10594, 0x10597, 0x105a3, 0x105b3, 0x105bb, 0x10600, 0x10740, 0x10760, 0x10780, 0x10787, 0x107b2, 0x10800, 0x10808, 0x1080a, 0x10837,
		 0x1083c, 0x1083f, 0x10857, 0x108a7, 0x108e0, 0x108f4, 0x108fb, 0x1091f, 0x1093f, 0x10980, 0x109bc, 0x109d2, 0x10a05, 0x10a0c, 0x10a15, 0x10a19, 0x10a38, 0x10a3f, 0x10a50, 0x10a60, 0x10ac0, 0x10aeb, 0x10b00,
		 0x10b39, 0x10b58, 0x10b78, 0x10b99, 0x10ba9, 0x10c00, 0x10c80, 0x10cc0, 0x10cfa, 0x10d30, 0x10e60, 0x10e80, 0x10eab, 0x10eb0, 0x10efd, 0x10f30, 0x10f70, 0x10fb0, 0x10fe0, 0x11000, 0x11052, 0x1107f, 0x110be,
		 0x110d0, 0x110f0, 0x11100, 0x11136, 0x11150, 0x11180, 0x111e1, 0x11200, 0x11213, 0x11280, 0x11288, 0x1128a, 0x1128f, 0x1129f, 0x112b0, 0x112f0, 0x11300, 0x11305, 0x1130f, 0x11313, 0x1132a, 0x11332, 0x11335,
		 0x1133b, 0x11347, 0x1134b, 0x11350, 0x11357, 0x1135d, 0x11366, 0x11370, 0x11400, 0x1145d, 0x11480, 0x114d0, 0x11580, 0x115b8, 0x11600, 0x11650, 0x11660, 0x11680, 0x116c0, 0x11700, 0x1171d, 0x11730, 0x11800,
		 0x118a0, 0x118ff, 0x11909, 0x1190c, 0x11915, 0x11918, 0x11937, 0x1193b, 0x11950, 0x119a0, 0x119aa, 0x119da, 0x11a00, 0x11a50, 0x11ab0, 0x11b00, 0x11c00, 0x11c0a, 0x11c38, 0x11c50, 0x11c70, 0x11c92, 0x11ca9,
		 0x11d00, 0x11d08, 0x11d0b, 0x11d3a, 0x11d3c, 0x11d3f, 0x11d50, 0x11d60, 0x11d67, 0x11d6a, 0x11d90, 0x11d93, 0x11da0, 0x11ee0, 0x11f00, 0x11f12, 0x11f3e, 0x11fb0, 0x11fc0, 0x11fff, 0x12400, 0x12470, 0x12480,
		 0x12f90, 0x13000, 0x13440, 0x14400, 0x16800, 0x16a40, 0x16a60, 0x16a6e, 0x16ac0, 0x16ad0, 0x16af0, 0x16b00, 0x16b50, 0x16b5b, 0x16b63, 0x16b7d, 0x16e40, 0x16f00, 0x16f4f, 0x16f8f, 0x16fe0, 0x16ff0, 0x17000,
		 0x18800, 0x18d00, 0x1aff0, 0x1aff5, 0x1affd, 0x1b000, 0x1b132, 0x1b150, 0x1b155, 0x1b164, 0x1b170, 0x1bc00, 0x1bc70, 0x1bc80, 0x1bc90, 0x1bc9c, 0x1cf00, 0x1cf30, 0x1cf50, 0x1d000, 0x1d100, 0x1d129, 0x1d17b,
		 0x1d200, 0x1d2c0, 0x1d2e0, 0x1d300, 0x1d360, 0x1d400, 0x1d456, 0x1d49e, 0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4bb, 0x1d4bd, 0x1d4c5, 0x1d507, 0x1d50d, 0x1d516, 0x1d51e, 0x1d53b, 0x1d540, 0x1d546, 0x1d54a,
		 0x1d552, 0x1d6a8, 0x1d7ce, 0x1da9b, 0x1daa1, 0x1df00, 0x1df25, 0x1e000, 0x1e008, 0x1e01b, 0x1e023, 0x1e026, 0x1e030, 0x1e08f, 0x1e100, 0x1e130, 0x1e140, 0x1e14e, 0x1e290, 0x1e2c0, 0x1e2ff, 0x1e4d0, 0x1e7e0,
		 0x1e7e8, 0x1e7ed, 0x1e7f0, 0x1e800, 0x1e8c7, 0x1e900, 0x1e950, 0x1e95e, 0x1ec71, 0x1ed01, 0x1ee00, 0x1ee05, 0x1ee21, 0x1ee24, 0x1ee27, 0x1ee29, 0x1ee34, 0x1ee39, 0x1ee3b, 0x1ee42, 0x1ee47, 0x1ee49, 0x1ee4b,
		 0x1ee4d, 0x1ee51, 0x1ee54, 0x1ee57, 0x1ee59, 0x1ee5b, 0x1ee5d, 0x1ee5f, 0x1ee61, 0x1ee64, 0x1ee67, 0x1ee6c, 0x1ee74, 0x1ee79, 0x1ee7e, 0x1ee80, 0x1ee8b, 0x1eea1, 0x1eea5, 0x1eeab, 0x1eef0, 0x1f000, 0x1f030,
		 0x1f0a0, 0x1f0b1, 0x1f0c1, 0x1f0d1, 0x1f100, 0x1f1e6, 0x1f210, 0x1f240, 0x1f250, 0x1f260, 0x1f300, 0x1f6dc, 0x1f6f0, 0x1f700, 0x1f77b, 0x1f7e0, 0x1f7f0, 0x1f800, 0x1f810, 0x1f850, 0x1f860, 0x1f890, 0x1f8b0,
		 0x1f900, 0x1fa60, 0x1fa70, 0x1fa80, 0x1fa90, 0x1fabf, 0x1face, 0x1fae0, 0x1faf0, 0x1fb00, 0x1fb94, 0x1fbf0, 0x20000, 0x2a700, 0x2b740, 0x2b820, 0x2ceb0, 0x2ebf0, 0x2f800, 0x30000, 0x31350, 0xe0100
	};
	inline constexpr gen::PrintableType GetPrintable(char32_t cp) {
		if (cp < 0x80) {
			if (cp >= 0x0021 && cp <= 0x007e)
				return gen::PrintableType::printable;
			if (cp == 0x0020)
				return gen::PrintableType::printSpace;
			return gen::PrintableType::none;
		}
		if (cp < 0x10000) {
			size_t var1LowSizeResult = 0, var0LowIndex = gen::BinarySearch(cp, gen::PrintableBuf1LowStart);
			var1LowSizeResult = size_t(gen::PrintableBuf0LowSizeCluster[var0LowIndex]);
			if (cp - gen::PrintableBuf1LowStart[var0LowIndex] > var1LowSizeResult)
				return gen::PrintableType::none;
			if ((var0LowIndex >= 0x0001 && var0LowIndex <= 0x00bb) || (var0LowIndex >= 0x00bd && var0LowIndex <= 0x00f5) || var0LowIndex == 0x00f7)
				return gen::PrintableType::printable;
			if (var0LowIndex == 0x00f9 || (var0LowIndex >= 0x00fb && var0LowIndex <= 0x0118) || var0LowIndex >= 0x011a)
				return gen::PrintableType::printable;
			return gen::PrintableType::printSpace;
		}
		size_t var3HighSizeResult = 0, var2HighIndex = gen::BinarySearch(cp, gen::PrintableBuf3HighStart);
		var3HighSizeResult = size_t(gen::PrintableBuf2HighSizeCluster[var2HighIndex]);
		if (cp - gen::PrintableBuf3HighStart[var2HighIndex] > var3HighSizeResult)
			return gen::PrintableType::none;
		return gen::PrintableType::printable;
	}


	/* Automatically generated from: Unicode derived property Lowercase, Uppercase or General_Category Lt */
	enum class CaseType : uint8_t {
		none,
		lowerCase,
		upperCase,
		titleCase
	};
	static constexpr uint8_t CaseBuf0LowValue[715] = {
		  0,  0,  0,  0,  2,  0,  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,  0,  2,  3,  2,  3,  2,
		  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,
		  2,  2,  0,  2,  0,  0,  2,  0,  2,  0,  2,  0,  2,  0,  2,  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,  0,  0,  2,  0,  2,  0,  2,  0,  0,  0,  2,  0,  0,  0,  2,  0,  2,  0,  0,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,  0,  2,  2,
		  0,  2,  0,  0,  2,  0,  2,  0,  2,  0,  2,  2,  0,  3,  3,  3,  0,  2,  3,  0,  0,  0,  2,  3,  0,  0,  2,  0,  2,  0,  0,  2,
		  3,  0,  0,  0,  0,  2,  0,  2,  0,  2,  2,  0,  2,  0,  2,  0,  2,  0,  2,  0,  2,  0,  2,  0,  2,  0,  0,  2,  0,  2,  0,  0,
		  2,  0,  2,  0,  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  0,  2,  2,  0,  2,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
		  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,
		  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,  0,  0,  2,  2,  0,
		  2,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0
	};
	static constexpr uint16_t CaseBuf1LowSize[715] = {
		 41,  9,  3,  4, 22,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  1,  0,  0,  1,  0,  1,  2,  3,  1,  2,  1,  1,  0,  0,  1,  0,  0,  1,  2,  0,  1,  0,  0,  3,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  3,  0,  0,  0,  0,  0,  6, 29, 95, 41,
		  0,  0,  1,  0,  1,  0,  0,  5,  0,  0,  2,  0,  0,  0,  1, 16,  0,  8,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  1, 50,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 37,  8,2838, 37,  0,  0,  4,  0,  1,  0,671, 85,  1,2177,  6, 42,  1,  2, 63, 63,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  1,  5,  1,  7,  7,
		  1,  5,  1,  0,  0,  0,  0,  0,  0,  0,  0,  7,  1,  7,  7,  7,  0,  3,  0,  0,  2,  0,  3,  0,  2,  1,  3,  3,  4,  4,  0,  3,
		  0,115, 12, 15,100,  0,  3,  0,  1,  2,  2,  0,  0,  2,  4,  5,  0,  0,  0,  0,  0,  0,  3,  0,  3,  3,  1,  1,  4,  0,  3, 16,
		 15,  2,  0,816, 25,1813, 47,  0,  2,  0,  0,  0,  3,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  5,  0,  0,  2,  0, 11,  0,  4,30993,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0, 17,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,131,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  2,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  0,  0,  0,  0,  0,  0,  0,  3,  0,  4,  0,  0,  0,  0,  0, 23,
		  0,  0,820,  0,  5,20287, 11,1032, 25,  5,164
	};
	static constexpr uint16_t CaseBuf2LowStart[715] = {
		 0x0080, 0x00ab, 0x00b6, 0x00bb, 0x00c0, 0x00d7, 0x00d8, 0x00f7, 0x0100, 0x0102, 0x0104, 0x0106, 0x0108, 0x010a, 0x010c, 0x010e, 0x0110, 0x0112, 0x0114, 0x0116, 0x0118, 0x011a, 0x011c, 0x011e,
		 0x0120, 0x0122, 0x0124, 0x0126, 0x0128, 0x012a, 0x012c, 0x012e, 0x0130, 0x0132, 0x0134, 0x0136, 0x0139, 0x013b, 0x013d, 0x013f, 0x0141, 0x0143, 0x0145, 0x0147, 0x014a, 0x014c, 0x014e, 0x0150,
		 0x0152, 0x0154, 0x0156, 0x0158, 0x015a, 0x015c, 0x015e, 0x0160, 0x0162, 0x0164, 0x0166, 0x0168, 0x016a, 0x016c, 0x016e, 0x0170, 0x0172, 0x0174, 0x0176, 0x0178, 0x017b, 0x017d, 0x0181, 0x0184,
		 0x0186, 0x0189, 0x018e, 0x0193, 0x0196, 0x019c, 0x019f, 0x01a2, 0x01a4, 0x01a6, 0x01a9, 0x01ac, 0x01ae, 0x01b1, 0x01b5, 0x01b7, 0x01bb, 0x01bc, 0x01c0, 0x01c4, 0x01c5, 0x01c7, 0x01c8, 0x01ca,
		 0x01cb, 0x01cd, 0x01cf, 0x01d1, 0x01d3, 0x01d5, 0x01d7, 0x01d9, 0x01db, 0x01de, 0x01e0, 0x01e2, 0x01e4, 0x01e6, 0x01e8, 0x01ea, 0x01ec, 0x01ee, 0x01f1, 0x01f2, 0x01f4, 0x01f6, 0x01fa, 0x01fc,
		 0x01fe, 0x0200, 0x0202, 0x0204, 0x0206, 0x0208, 0x020a, 0x020c, 0x020e, 0x0210, 0x0212, 0x0214, 0x0216, 0x0218, 0x021a, 0x021c, 0x021e, 0x0220, 0x0222, 0x0224, 0x0226, 0x0228, 0x022a, 0x022c,
		 0x022e, 0x0230, 0x0232, 0x023a, 0x023d, 0x0241, 0x0243, 0x0248, 0x024a, 0x024c, 0x024e, 0x0294, 0x02b9, 0x02c2, 0x02e5, 0x0346, 0x0370, 0x0372, 0x0374, 0x0376, 0x0378, 0x037e, 0x037f, 0x0380,
		 0x0386, 0x0387, 0x0388, 0x038b, 0x038c, 0x038d, 0x038e, 0x0391, 0x03a2, 0x03a3, 0x03cf, 0x03d2, 0x03d8, 0x03da, 0x03dc, 0x03de, 0x03e0, 0x03e2, 0x03e4, 0x03e6, 0x03e8, 0x03ea, 0x03ec, 0x03ee,
		 0x03f4, 0x03f6, 0x03f7, 0x03f9, 0x03fd, 0x0460, 0x0462, 0x0464, 0x0466, 0x0468, 0x046a, 0x046c, 0x046e, 0x0470, 0x0472, 0x0474, 0x0476, 0x0478, 0x047a, 0x047c, 0x047e, 0x0480, 0x0482, 0x048a,
		 0x048c, 0x048e, 0x0490, 0x0492, 0x0494, 0x0496, 0x0498, 0x049a, 0x049c, 0x049e, 0x04a0, 0x04a2, 0x04a4, 0x04a6, 0x04a8, 0x04aa, 0x04ac, 0x04ae, 0x04b0, 0x04b2, 0x04b4, 0x04b6, 0x04b8, 0x04ba,
		 0x04bc, 0x04be, 0x04c0, 0x04c3, 0x04c5, 0x04c7, 0x04c9, 0x04cb, 0x04cd, 0x04d0, 0x04d2, 0x04d4, 0x04d6, 0x04d8, 0x04da, 0x04dc, 0x04de, 0x04e0, 0x04e2, 0x04e4, 0x04e6, 0x04e8, 0x04ea, 0x04ec,
		 0x04ee, 0x04f0, 0x04f2, 0x04f4, 0x04f6, 0x04f8, 0x04fa, 0x04fc, 0x04fe, 0x0500, 0x0502, 0x0504, 0x0506, 0x0508, 0x050a, 0x050c, 0x050e, 0x0510, 0x0512, 0x0514, 0x0516, 0x0518, 0x051a, 0x051c,
		 0x051e, 0x0520, 0x0522, 0x0524, 0x0526, 0x0528, 0x052a, 0x052c, 0x052e, 0x0530, 0x0531, 0x0557, 0x0589, 0x10a0, 0x10c6, 0x10c7, 0x10c8, 0x10cd, 0x10ce, 0x10fb, 0x1100, 0x13a0, 0x13f6, 0x13fe,
		 0x1c89, 0x1c90, 0x1cbb, 0x1cbd, 0x1cc0, 0x1dc0, 0x1e00, 0x1e02, 0x1e04, 0x1e06, 0x1e08, 0x1e0a, 0x1e0c, 0x1e0e, 0x1e10, 0x1e12, 0x1e14, 0x1e16, 0x1e18, 0x1e1a, 0x1e1c, 0x1e1e, 0x1e20, 0x1e22,
		 0x1e24, 0x1e26, 0x1e28, 0x1e2a, 0x1e2c, 0x1e2e, 0x1e30, 0x1e32, 0x1e34, 0x1e36, 0x1e38, 0x1e3a, 0x1e3c, 0x1e3e, 0x1e40, 0x1e42, 0x1e44, 0x1e46, 0x1e48, 0x1e4a, 0x1e4c, 0x1e4e, 0x1e50, 0x1e52,
		 0x1e54, 0x1e56, 0x1e58, 0x1e5a, 0x1e5c, 0x1e5e, 0x1e60, 0x1e62, 0x1e64, 0x1e66, 0x1e68, 0x1e6a, 0x1e6c, 0x1e6e, 0x1e70, 0x1e72, 0x1e74, 0x1e76, 0x1e78, 0x1e7a, 0x1e7c, 0x1e7e, 0x1e80, 0x1e82,
		 0x1e84, 0x1e86, 0x1e88, 0x1e8a, 0x1e8c, 0x1e8e, 0x1e90, 0x1e92, 0x1e94, 0x1e9e, 0x1ea0, 0x1ea2, 0x1ea4, 0x1ea6, 0x1ea8, 0x1eaa, 0x1eac, 0x1eae, 0x1eb0, 0x1eb2, 0x1eb4, 0x1eb6, 0x1eb8, 0x1eba,
		 0x1ebc, 0x1ebe, 0x1ec0, 0x1ec2, 0x1ec4, 0x1ec6, 0x1ec8, 0x1eca, 0x1ecc, 0x1ece, 0x1ed0, 0x1ed2, 0x1ed4, 0x1ed6, 0x1ed8, 0x1eda, 0x1edc, 0x1ede, 0x1ee0, 0x1ee2, 0x1ee4, 0x1ee6, 0x1ee8, 0x1eea,
		 0x1eec, 0x1eee, 0x1ef0, 0x1ef2, 0x1ef4, 0x1ef6, 0x1ef8, 0x1efa, 0x1efc, 0x1efe, 0x1f08, 0x1f16, 0x1f18, 0x1f1e, 0x1f28, 0x1f38, 0x1f46, 0x1f48, 0x1f4e, 0x1f58, 0x1f59, 0x1f5a, 0x1f5b, 0x1f5c,
		 0x1f5d, 0x1f5e, 0x1f5f, 0x1f68, 0x1f7e, 0x1f88, 0x1f98, 0x1fa8, 0x1fb5, 0x1fb8, 0x1fbc, 0x1fbd, 0x1fbf, 0x1fc5, 0x1fc8, 0x1fcc, 0x1fcd, 0x1fd4, 0x1fd8, 0x1fdc, 0x1fe8, 0x1fed, 0x1ff5, 0x1ff8,
		 0x1ffc, 0x1ffd, 0x2072, 0x2080, 0x209d, 0x2102, 0x2103, 0x2107, 0x2108, 0x210b, 0x2110, 0x2114, 0x2115, 0x2116, 0x2119, 0x211e, 0x2124, 0x2125, 0x2126, 0x2127, 0x2128, 0x2129, 0x212a, 0x212e,
		 0x2130, 0x2135, 0x213a, 0x213e, 0x2140, 0x2145, 0x214a, 0x214f, 0x2160, 0x2180, 0x2183, 0x2185, 0x24b6, 0x24ea, 0x2c00, 0x2c60, 0x2c62, 0x2c67, 0x2c69, 0x2c6b, 0x2c6d, 0x2c72, 0x2c75, 0x2c7e,
		 0x2c82, 0x2c84, 0x2c86, 0x2c88, 0x2c8a, 0x2c8c, 0x2c8e, 0x2c90, 0x2c92, 0x2c94, 0x2c96, 0x2c98, 0x2c9a, 0x2c9c, 0x2c9e, 0x2ca0, 0x2ca2, 0x2ca4, 0x2ca6, 0x2ca8, 0x2caa, 0x2cac, 0x2cae, 0x2cb0,
		 0x2cb2, 0x2cb4, 0x2cb6, 0x2cb8, 0x2cba, 0x2cbc, 0x2cbe, 0x2cc0, 0x2cc2, 0x2cc4, 0x2cc6, 0x2cc8, 0x2cca, 0x2ccc, 0x2cce, 0x2cd0, 0x2cd2, 0x2cd4, 0x2cd6, 0x2cd8, 0x2cda, 0x2cdc, 0x2cde, 0x2ce0,
		 0x2ce2, 0x2ce5, 0x2ceb, 0x2ced, 0x2cef, 0x2cf2, 0x2cf4, 0x2d26, 0x2d28, 0x2d2e, 0xa640, 0xa642, 0xa644, 0xa646, 0xa648, 0xa64a, 0xa64c, 0xa64e, 0xa650, 0xa652, 0xa654, 0xa656, 0xa658, 0xa65a,
		 0xa65c, 0xa65e, 0xa660, 0xa662, 0xa664, 0xa666, 0xa668, 0xa66a, 0xa66c, 0xa66e, 0xa680, 0xa682, 0xa684, 0xa686, 0xa688, 0xa68a, 0xa68c, 0xa68e, 0xa690, 0xa692, 0xa694, 0xa696, 0xa698, 0xa69a,
		 0xa69e, 0xa722, 0xa724, 0xa726, 0xa728, 0xa72a, 0xa72c, 0xa72e, 0xa732, 0xa734, 0xa736, 0xa738, 0xa73a, 0xa73c, 0xa73e, 0xa740, 0xa742, 0xa744, 0xa746, 0xa748, 0xa74a, 0xa74c, 0xa74e, 0xa750,
		 0xa752, 0xa754, 0xa756, 0xa758, 0xa75a, 0xa75c, 0xa75e, 0xa760, 0xa762, 0xa764, 0xa766, 0xa768, 0xa76a, 0xa76c, 0xa76e, 0xa779, 0xa77b, 0xa77d, 0xa780, 0xa782, 0xa784, 0xa786, 0xa788, 0xa78b,
		 0xa78d, 0xa78f, 0xa790, 0xa792, 0xa796, 0xa798, 0xa79a, 0xa79c, 0xa79e, 0xa7a0, 0xa7a2, 0xa7a4, 0xa7a6, 0xa7a8, 0xa7aa, 0xa7b0, 0xa7b6, 0xa7b8, 0xa7ba, 0xa7bc, 0xa7be, 0xa7c0, 0xa7c2, 0xa7c4,
		 0xa7c9, 0xa7cb, 0xa7d0, 0xa7d2, 0xa7d4, 0xa7d6, 0xa7d8, 0xa7da, 0xa7f5, 0xa7f7, 0xa7fb, 0xab5b, 0xab6a, 0xabc0, 0xfb07, 0xfb18, 0xff21, 0xff3b, 0xff5b
	};
	static constexpr uint8_t CaseBuf3HighValueCluster[90] = {
		  2,  1,  2,  1,  2,  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  1,  2,  1,  2,
		  2,  2,  2,  2,  2,  1,  1,  1,  1,  2,  1,  2,  2,  2,  2,  1,  2,  2,  2,  2,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  1,  2,  1,  1,  2,  1,  1,  2,  1,  1,  2,  1,  1,  2,  1,  1,  1,  1,  1,  2,  1,  2,  2,  2
	};
	static constexpr uint8_t CaseBuf4HighSizeCluster[90] = {
		 39, 39, 35, 35, 10, 14,  6,  1, 10, 14,  6,  1,  0,  2, 41,  8, 50, 50, 31, 31, 31, 31, 25, 25, 25,  6, 17, 25, 25,  0,
		  1,  0,  1,  3,  7,  3,  0,  6, 10, 25, 25,  1,  3,  7,  6, 25,  1,  3,  4,  0,  6, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		 25, 25, 25, 27, 24, 24,  5, 24, 24,  5, 24, 24,  5, 24, 24,  5, 24, 24,  5,  0,  0,  9, 19,  5, 61, 33, 33, 25, 25, 25
	};
	static constexpr uint32_t CaseBuf5HighStart[90] = {
		 0x10400, 0x10428, 0x104b0, 0x104d8, 0x10570, 0x1057c, 0x1058c, 0x10594, 0x10597, 0x105a3, 0x105b3, 0x105bb, 0x10780, 0x10783, 0x10787, 0x107b2, 0x10c80, 0x10cc0, 0x118a0, 0x118c0, 0x16e40, 0x16e60, 0x1d400,
		 0x1d41a, 0x1d434, 0x1d44e, 0x1d456, 0x1d468, 0x1d482, 0x1d49c, 0x1d49e, 0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4b6, 0x1d4bb, 0x1d4bd, 0x1d4c5, 0x1d4d0, 0x1d4ea, 0x1d504, 0x1d507, 0x1d50d, 0x1d516, 0x1d51e,
		 0x1d538, 0x1d53b, 0x1d540, 0x1d546, 0x1d54a, 0x1d552, 0x1d56c, 0x1d586, 0x1d5a0, 0x1d5ba, 0x1d5d4, 0x1d5ee, 0x1d608, 0x1d622, 0x1d63c, 0x1d656, 0x1d670, 0x1d68a, 0x1d6a8, 0x1d6c2, 0x1d6dc, 0x1d6e2, 0x1d6fc,
		 0x1d716, 0x1d71c, 0x1d736, 0x1d750, 0x1d756, 0x1d770, 0x1d78a, 0x1d790, 0x1d7aa, 0x1d7c4, 0x1d7ca, 0x1d7cb, 0x1df00, 0x1df0b, 0x1df25, 0x1e030, 0x1e900, 0x1e922, 0x1f130, 0x1f150, 0x1f170
	};
	inline constexpr gen::CaseType GetCase(char32_t cp) {
		if (cp < 0x80) {
			if (cp >= 0x0041 && cp <= 0x005a)
				return gen::CaseType::upperCase;
			if (cp >= 0x0061 && cp <= 0x007a)
				return gen::CaseType::lowerCase;
			return gen::CaseType::none;
		}
		if (cp < 0x10000) {
			size_t var1LowSizeResult = 0, var0LowIndex = gen::BinarySearch(cp, gen::CaseBuf2LowStart);
			var1LowSizeResult = size_t(gen::CaseBuf1LowSize[var0LowIndex]);
			if (cp - gen::CaseBuf2LowStart[var0LowIndex] > var1LowSizeResult)
				return gen::CaseType::lowerCase;
			return static_cast<gen::CaseType>(gen::CaseBuf0LowValue[var0LowIndex]);
		}
		size_t var3HighSizeResult = 0, var2HighIndex = gen::BinarySearch(cp, gen::CaseBuf5HighStart);
		var3HighSizeResult = size_t(gen::CaseBuf4HighSizeCluster[var2HighIndex]);
		if (cp - gen::CaseBuf5HighStart[var2HighIndex] > var3HighSizeResult)
			return gen::CaseType::none;
		return static_cast<gen::CaseType>(gen::CaseBuf3HighValueCluster[var2HighIndex]);
	}


	/* Automatically generated from: Unicode General_Category */
	enum class CategoryType : uint8_t {
		lu,
		ll,
		lt,
		lm,
		lo,
		mn,
		mc,
		me,
		nd,
		nl,
		no,
		pc,
		pd,
		ps,
		pe,
		pi,
		pf,
		po,
		sm,
		sc,
		sk,
		so,
		zs,
		zl,
		zp,
		cc,
		cf,
		cs,
		co,
		cn
	};
	static constexpr uint8_t CategoryBuf0AsciiCluster[16] = {
		 22, 17, 17, 17, 19, 17, 17, 17, 13, 14, 17, 18, 17, 12, 17, 17
	};
	static constexpr uint8_t CategoryBuf1LowValueCluster[2248] = {
		 25, 22, 17, 19, 21, 17, 20, 21,  4, 15, 18, 26, 21, 20, 21, 18, 10, 20, 17, 20, 10,  4, 16, 10, 17,  0, 18,  0, 18,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  4,  0,  2,  0,  2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  3, 20,  3, 20,  3, 20,  3, 20,  3, 20,  5,  0,  0,  3, 20,
		  0, 29,  3, 17,  0, 29, 20,  0, 17,  0, 29,  0, 29,  0,  0, 29,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 18,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 21,  5,  7,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 29,  0, 29,  3, 17, 17, 12, 29, 21, 19, 29,  5, 12,  5, 17,  5, 17,  5, 17,  5, 29,  4,
		 29,  4, 17, 29, 26, 18, 17, 19, 17, 21,  5, 17, 26, 17,  4,  3,  4,  5,  8, 17,  4,  5,  4, 17,  4,  5, 26, 21,  5,  3,  5, 21,
		  5,  4,  8,  4, 21,  4, 17, 29, 26,  4,  5,  4,  5, 29,  4,  5,  4, 29,  8,  4,  5,  3, 21, 17,  3, 29,  5, 19,  4,  5,  3,  5,
		  3,  5,  3,  5, 29, 17, 29,  4,  5, 29, 17, 29,  4, 29,  4, 20,  4, 29, 26, 29,  5,  4,  3,  5, 26,  5,  6,  4,  5,  6,  5,  4,
		  6,  5,  6,  5,  6,  4,  5,  4,  5, 17,  8, 17,  3,  4,  5,  6, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  5,  4,  6,
		  5, 29,  6, 29,  6,  5,  4, 29,  6, 29,  4, 29,  4,  5, 29,  8,  4, 19, 10, 21, 19,  4, 17,  5, 29,  5,  6, 29,  4, 29,  4, 29,
		  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  5, 29,  6,  5, 29,  5, 29,  5, 29,  5, 29,  4, 29,  4, 29,  8,  5,  4,  5, 17, 29,  5,
		  6, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  5,  4,  6,  5, 29,  5,  6, 29,  6,  5, 29,  4, 29,  4,  5, 29,  8, 17,
		 19, 29,  4,  5, 29,  5,  6, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  5,  4,  6,  5,  6,  5, 29,  6, 29,  6,  5, 29,
		  5,  6, 29,  4, 29,  4,  5, 29,  8, 21,  4, 10, 29,  5,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,
		  4, 29,  6,  5,  6, 29,  6, 29,  6,  5, 29,  4, 29,  6, 29,  8, 10, 21, 19, 21, 29,  5,  6,  5,  4, 29,  4, 29,  4, 29,  4, 29,
		  5,  4,  5,  6, 29,  5, 29,  5, 29,  5, 29,  4, 29,  4, 29,  4,  5, 29,  8, 29, 17, 10, 21,  4,  5,  6, 17,  4, 29,  4, 29,  4,
		 29,  4, 29,  4, 29,  5,  4,  6,  5,  6, 29,  5,  6, 29,  6,  5, 29,  6, 29,  4, 29,  4,  5, 29,  8, 29,  4,  6, 29,  5,  6,  4,
		 29,  4, 29,  4,  5,  4,  6,  5, 29,  6, 29,  6,  5,  4, 21, 29,  4,  6, 10,  4,  5, 29,  8, 10, 21,  4, 29,  5,  6, 29,  4, 29,
		  4, 29,  4, 29,  4, 29,  4, 29,  5, 29,  6,  5, 29,  5, 29,  6, 29,  8, 29,  6, 17, 29,  4,  5,  4,  5, 29, 19,  4,  3,  5, 17,
		  8, 17, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4,  5,  4,  5,  4, 29,  4, 29,  3, 29,  5, 29,  8, 29,  4, 29,  4, 21, 17,
		 21, 17, 21,  5, 21,  8, 10, 21,  5, 21,  5, 21,  5, 13, 14, 13, 14,  6,  4, 29,  4, 29,  5,  6,  5, 17,  5,  4,  5, 29,  5, 29,
		 21,  5, 21, 29, 21, 17, 21, 17, 29,  4,  6,  5,  6,  5,  6,  5,  6,  5,  4,  8, 17,  4,  6,  5,  4,  5,  4,  6,  4,  6,  4,  5,
		  4,  5,  6,  5,  6,  5,  4,  6,  8,  6,  5, 21,  0, 29,  0, 29,  0, 29, 17,  3,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,
		  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  5, 17, 10, 29,  4, 21, 29,  0, 29, 29, 12,  4,
		 21, 17,  4, 22,  4, 13, 14, 29,  4, 17,  9,  4, 29,  4,  5,  6, 29,  4,  5,  6, 17, 29,  4,  5, 29,  4, 29,  4, 29,  5, 29,  4,
		  5,  6,  5,  6,  5,  6,  5, 17,  3, 17, 19,  4,  5, 29,  8, 29, 10, 29, 17, 12, 17,  5, 26,  5,  8, 29,  4,  3,  4, 29,  4,  5,
		  4,  5,  4, 29,  4, 29,  4, 29,  5,  6,  5,  6, 29,  6,  5,  6,  5, 29, 21, 29, 17,  8,  4, 29,  4, 29,  4, 29,  4, 29,  8, 10,
		 29, 21,  4,  5,  6,  5, 29, 17,  4,  6,  5,  6,  5, 29,  5,  6,  5,  6,  5,  6,  5, 29,  5,  8, 29,  8, 29, 17,  3, 17, 29,  5,
		  7,  5, 29,  5,  6,  4,  5,  6,  5,  6,  5,  6,  5,  6,  4, 29,  8, 17, 21,  5, 21, 17, 29,  5,  6,  4,  6,  5,  6,  5,  6,  5,
		  4,  8,  4,  5,  6,  5,  6,  5,  6,  5,  6, 29, 17,  4,  6,  5,  6,  5, 29, 17,  8, 29,  4,  8,  4,  3, 17, 29,  0, 29,  0, 17,
		 29,  5, 17,  5,  6,  5,  4,  5,  4,  5,  4,  6,  5,  4, 29,  3,  3,  3,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 29,  0, 29,  0,  0, 29,  0, 29, 29,  0, 29,  0, 29,  0, 29,  0,
		  0, 29,  2,  2,  2, 29,  0,  2, 20, 20, 29,  0,  2, 20, 29,  0, 29, 20,  0, 20, 29, 29,  0,  2, 20, 29, 22, 26, 12, 17, 15, 16,
		 13, 15, 16, 13, 15, 17, 23, 24, 26, 22, 17, 15, 16, 17, 11, 17, 18, 13, 14, 17, 18, 17, 11, 17, 22, 26, 29, 26, 10,  3, 29, 10,
		 18, 13, 14,  3, 10, 18, 13, 14, 29,  3, 29, 19, 29,  5,  7,  5,  7,  5, 29, 21,  0, 21,  0, 21,  0,  0, 21,  0, 21, 18,  0, 21,
		  0, 21,  0, 21,  0, 21,  0, 21,  0,  4, 21,  0, 18,  0, 21, 18, 21, 21, 10,  9,  0,  9, 10, 21, 29, 18, 21, 18, 21, 18, 21, 18,
		 21, 18, 21, 18, 21, 18, 21, 18, 21, 18, 21, 18, 21, 13, 14, 13, 14, 21, 18, 21, 13, 14, 21, 18, 21, 18, 21, 18, 21, 29, 21, 29,
		 10, 21, 10, 21, 18, 21, 18, 21, 18, 21, 18, 21, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 10, 21, 18, 13, 14, 18,
		 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 18, 21, 18, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13,
		 14, 13, 14, 18, 13, 14, 13, 14, 18, 13, 14, 18, 21, 18, 21, 18, 21, 29, 21, 29, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 21,  0,  0,  5,  0, 29, 17, 10, 17, 29, 29, 29,  4, 29,  3,
		 17, 29,  5,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29,  5, 17, 15, 16, 15, 16, 17, 15, 16, 17, 15,
		 16, 17, 12, 17, 12, 17, 15, 16, 17, 15, 16, 13, 14, 13, 14, 13, 14, 13, 14, 17,  3, 17, 12, 17, 12, 17, 13, 17, 21, 17, 13, 14,
		 13, 14, 13, 14, 13, 14, 12, 29, 21, 29, 21, 29, 21, 29, 21, 22, 17, 21,  3,  4,  9, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 21,
		 13, 14, 13, 14, 13, 14, 13, 14, 12, 13, 14, 21,  9,  5,  6, 12,  3, 21,  9,  3,  4, 17, 21, 29,  4, 29,  5, 20,  3,  4, 12,  4,
		 17,  3,  4, 29,  4, 29,  4, 29, 21, 10, 21,  4, 21, 29, 21,  4, 21, 29, 10, 21, 10, 21, 10, 21, 10, 21, 10, 21,  4, 21,  4,  3,
		  4, 29, 21, 29,  4,  3, 17,  4,  3, 17,  4,  8,  4, 29,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  4,  5,  7, 17,  5, 17,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  4,  9,  5, 17,
		 29, 20,  3, 20,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  3, 20,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 29,  0, 29, 29,  0,  0, 29,  3,  0,  4,  3,  4,  5,  4,  5,  4,  5,  4,
		  6,  5,  6, 21,  5, 29, 10, 21, 19, 21, 29,  4, 17, 29,  6,  4,  6,  5, 29, 17,  8, 29,  5,  4, 17,  4, 17,  4,  5,  8,  4,  5,
		 17,  4,  5,  6, 29, 17,  4, 29,  5,  6,  4,  5,  6,  5,  6,  5,  6, 17, 29,  3,  8, 29, 17,  4,  5,  3,  4,  8,  4, 29,  4,  5,
		  6,  5,  6,  5, 29,  4,  5,  4,  5,  6, 29,  8, 29, 17,  4,  3,  4, 21,  4,  6,  5,  6,  4,  5,  4,  5,  4,  5,  4,  5,  4,  5,
		  4, 29,  4,  3, 17,  4,  6,  5,  6, 17,  4,  3,  6,  5, 29,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29, 20,  3,  3, 20, 29,  4,  6,
		  5,  6,  5,  6, 17,  6,  5, 29,  8, 29,  4, 29,  4, 29,  4, 29, 27, 28,  4, 29,  4, 29, 29, 29,  4,  5,  4, 18,  4, 29,  4, 29,
		  4, 29,  4, 29,  4, 29,  4, 20, 29,  4, 14, 13, 21,  4, 29,  4, 29, 21, 29,  4, 19, 21,  5, 17, 13, 14, 17, 29,  5, 17, 12, 11,
		 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 17, 13, 14, 17, 11, 17, 29, 17, 12, 13, 14, 13, 14, 13, 14, 17,
		 18, 12, 18, 29, 17, 19, 17, 29,  4, 29,  4, 29, 26, 29, 17, 19, 17, 13, 14, 17, 18, 17, 12, 17,  8, 17, 18, 17,  0, 13, 17, 14,
		 20, 11, 20, 13, 18, 14, 18, 13, 14, 17, 13, 14, 17,  4,  3,  4,  3,  4, 29,  4, 29,  4, 29,  4, 29,  4, 29, 19, 18, 20, 21, 19,
		 29, 21, 18, 21, 29, 26, 21, 29
	};
	static constexpr uint16_t CategoryBuf2LowSizeCluster[2248] = {
		 31,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  2,  0, 22,  0,  6,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  2,  3,
		  1,  2,  1,  1,  0,  0,  1,  0,  0,  1,  2,  0,  1,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  3,  0,  0,  0,  0,  0, 17,  3, 11, 13,  4,  6,  0,  0,  0, 16,111,  0,  0,  0,  0,
		  0,  1,  0,  0,  0,  3,  1,  0,  0,  2,  0,  0,  0,  1, 16,  0,  8,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  1, 50,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  1,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 37,  1,  0,  5,  0,  0,  1,  1,  0,  0, 44,  0,  0,  0,  1,  0,  1,  0,  0,  7, 26,
		  3,  3,  1, 10,  5,  2,  1,  0,  1,  1, 10,  0,  0,  2, 31,  0,  9, 20,  9,  3,  1,  0, 98,  0,  0,  6,  0,  0,  5,  1,  1,  0,
		  3,  1,  9,  2,  1,  0, 13,  0,  0,  0,  0, 29, 26,  1, 88, 10,  0, 13,  9, 32,  8,  1,  0,  2,  0,  1,  0,  1, 21,  3,  0,  8,
		  0,  2,  0,  4,  1, 14,  0, 24,  2,  1,  0,  0, 10,  4, 23,  0,  5,  0,  1,  5,  7, 40,  0, 23,  0, 31,  0, 53,  0,  0,  0,  0,
		  2,  7,  3,  0,  1,  0,  6,  9,  1,  1,  9,  0,  0, 14,  0,  1,  0,  7,  1,  1,  1, 21,  0,  6,  0,  0,  2,  3,  1,  0,  0,  2,
		  3,  1,  1,  1,  1,  0,  0,  7,  0,  3,  1,  0,  2,  1,  1,  9,  1,  1,  5,  0,  0,  0,  0,  0,  1,  1,  0,  0,  5,  3,  1,  1,
		 21,  0,  6,  0,  1,  0,  1,  0,  1,  1,  0,  0,  2,  1,  3,  1,  1,  2,  2,  0,  6,  3,  0,  0,  6,  9,  1,  2,  0,  0,  9,  1,
		  0,  0,  8,  0,  2,  0, 21,  0,  6,  0,  1,  0,  4,  1,  0,  0,  2,  4,  0,  1,  0,  0,  1,  0,  1,  0, 14,  1,  1,  1,  9,  0,
		  0,  6,  0,  5,  0,  0,  1,  0,  7,  1,  1,  1, 21,  0,  6,  0,  1,  0,  4,  1,  0,  0,  0,  0,  0,  3,  1,  1,  1,  1,  0,  6,
		  1,  0,  3,  1,  0,  2,  1,  1,  9,  0,  0,  5,  9,  0,  0,  0,  5,  2,  2,  0,  3,  2,  1,  0,  0,  0,  1,  2,  1,  2,  2,  2,
		 11,  3,  1,  0,  1,  2,  2,  0,  2,  0,  1,  0,  5,  0, 13,  9,  2,  5,  0,  0,  4,  0,  2,  0,  7,  0,  2,  0, 22,  0, 15,  1,
		  0,  0,  2,  3,  0,  2,  0,  3,  6,  1,  0,  2,  1,  0,  1,  1,  1,  1,  9,  6,  0,  6,  0,  0,  0,  1,  0,  7,  0,  2,  0, 22,
		  0,  9,  0,  4,  1,  0,  0,  0,  0,  4,  0,  0,  1,  0,  1,  1,  6,  1,  5,  1,  0,  1,  1,  1,  9,  0,  1,  0, 11,  1,  1,  8,
		  0,  2,  0, 40,  1,  0,  2,  3,  0,  2,  0,  2,  0,  0,  0,  3,  2,  0,  6,  2,  1,  1,  9,  8,  0,  5,  0,  0,  1,  0, 17,  2,
		 23,  0,  8,  0,  0,  1,  6,  2,  0,  3,  2,  2,  0,  0,  0,  7,  5,  9,  1,  1,  0, 11, 47,  0,  1,  6,  3,  0,  5,  0,  7,  0,
		  9,  1, 36,  1,  0,  0,  0,  4,  0, 23,  0,  0,  0,  9,  0,  1,  8,  0,  1,  4,  0,  0,  0,  6,  0,  9,  1,  3, 31,  0,  2, 14,
		  0,  0,  2,  1,  5,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  7,  0, 35,  3, 13,  0,  4,  0,  1,  4, 10,  0, 35,  0,
		  7,  0,  5,  0,  1,  4,  3,  1, 36, 42,  1,  3,  0,  5,  0,  1,  1,  1,  0,  9,  5,  5,  1,  1,  3,  2,  0,  2,  1,  6,  2,  3,
		 12,  0,  1,  1,  5,  0,  0,  0,  9,  2,  0,  1, 37,  0,  0,  4,  0,  1,  0,  0,328,  0,  3,  1,  6,  0,  0,  0,  3,  1, 40,  0,
		  3,  1, 32,  0,  3,  1,  6,  0,  0,  0,  3,  1, 14,  0, 56,  0,  3,  1, 66,  1,  2,  8, 19,  2, 15,  9,  5, 85,  1,  1,  0,619,
		  0,  0, 16,  0, 25,  0,  0,  2, 74,  2,  2,  7,  6, 17,  2,  0,  8, 18,  1,  0,  1,  8, 17,  1, 11, 12,  0,  2,  0,  1, 11, 51,
		  1,  0,  6,  7,  0,  1, 10,  2,  0,  2,  0,  0,  0,  1,  9,  5,  9,  5,  5,  0,  3,  2,  0,  0,  9,  5, 34,  0, 52,  6,  4,  1,
		 33,  0,  0,  4, 69,  9, 30,  0,  2,  3,  1,  2,  3,  1,  0,  5,  2,  3,  0,  2,  1,  9, 29,  1,  4, 10, 43,  3, 25,  5,  9,  0,
		  2, 33, 22,  1,  1,  0,  1,  1, 52,  0,  0,  0,  6,  0,  0,  0,  0,  1,  7,  5,  9,  1,  0,  9,  5,  9,  5,  6,  0,  5,  1, 13,
		  0, 15, 48,  3,  0, 46,  0,  0,  4,  0,  0,  4,  0,  1,  7,  2,  9,  6,  9,  8,  8,  1,  0,  1,  0, 29,  0,  3,  1,  1,  0,  2,
		  1,  9, 43,  0,  0,  1,  2,  0,  0,  2,  1,  7,  3, 35,  7,  7,  1,  1,  2,  4,  9,  2,  2,  9, 29,  5,  1,  6, 42,  1,  2,  7,
		  7,  2,  0, 12,  0,  6,  3,  0,  5,  0,  1,  0,  1,  0,  4, 62,  0, 36, 63,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  1,  5,  1,  7,  7,  1,  5,  1,  0,  0,  0,  0,  0,  0,  0,  0,
		  7,  1,  7,  7,  7,  0,  3,  0,  0,  2,  0,  3,  0,  2,  1,  3,  0,  2,  4,  2,  1,  0,  3,  0,  1,  0, 10,  4,  5,  1,  0,  0,
		  0,  1,  0,  0,  0,  7,  0,  0,  4,  0,  8,  0,  0,  3,  1,  2,  0,  0,  0, 10,  0,  0,  0,  9,  0,  4,  0,  9,  0,  0,  1,  5,
		  2,  0,  0,  0,  9,  2,  0,  0,  0, 12,  2, 32, 14, 12,  3,  0,  2, 11, 14,  1,  0,  3,  0,  1,  2,  2,  0,  0,  1,  0,  4,  5,
		  0,  0,  0,  0,  0,  0,  3,  0,  3,  3,  1,  1,  4,  0,  0,  0,  1,  0, 15, 34,  0,  3,  0,  1,  3,  4,  4,  1,  3,  0,  1,  0,
		  1,  0,  6,  0, 30,  1,  1,  0,  0,  0, 30,267,  7,  0,  0,  0,  0, 19,  1,  6,  0,  0, 80,  0, 29, 24, 39,  5, 68, 24, 10, 20,
		 59, 77, 21,182,  0,  8,  0, 53,  7,110,  0,247,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 29, 43,  4,  0,  0, 30,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15,255,130,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0, 62,  0,  0,  0,  0, 31,  0,  0,257, 47, 20,  1,  5, 38,  1, 31,  0,104, 47,  0,  2,  0,  0,  0,  3,  0,  0,  1,  2,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  2,  0,  4,  3,  0,  1,  0,  4,  1, 55,  6,  0,
		  0, 13,  0, 22,  8,  6,  0,  6,  0,  6,  0,  6,  0,  6,  0,  6,  0,  6,  0,  6,  0, 31,  1,  0,  0,  0,  0,  2,  0,  0,  0,  0,
		  0,  8,  0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  9,  1,  3,  0,  0,  0, 12,  1,  2,  0,  0,
		  0,  0,  0,  0,  0,  0,  0, 33, 25,  0, 88, 11,213, 25, 15,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  8,  3,  1,  0,  4,  1,  2,  0,  0,  0,  1,  0, 85,  1,  1,  1,  1,  0,  0, 89,
		  0,  2,  0,  4, 42,  0, 93,  0,  1,  3,  9, 31, 35, 10,  0, 15, 30,  0,  9, 29,  7,  0, 14, 31,  9, 38, 14,319,6591, 63,21012,  0,
		1142,  2, 54,  8, 39,  5,  1,267,  0,  2, 15,  9,  1, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  2,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1, 69,  9,  1,  5,
		  7, 22,  8,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  4,  4,  0,  0,  0,  0,  0,  0,  0,  3,  0,  4,  0,  0,  0,  0,  0, 23,  2,  0,  0,  1,  6,  0,  2,  0,  3,  0, 22,
		  1,  1,  0,  3,  0,  2,  5,  1,  0,  0,  5, 51,  3,  7,  1, 49, 15,  1,  7,  1,  9,  5, 17,  5,  2,  0,  0,  1,  0,  9, 27,  7,
		  1, 22, 10,  1, 10,  0, 28,  2,  2,  0, 46,  0,  1,  3,  1,  1,  2, 12,  0,  0,  9,  3,  1,  4,  0,  0,  8,  9,  4,  0, 40,  5,
		  1,  1,  1,  1,  8,  2,  0,  7,  0,  0,  1,  9,  1,  3, 15,  0,  5,  2,  0,  0,  0,  0, 49,  0,  0,  2,  1,  1,  4,  1,  0,  0,
		  0, 23,  1,  0,  1, 10,  0,  1,  1,  1,  0,  1,  0,  0,  9,  5,  1,  5,  1,  5,  8,  6,  0,  6,  0,  0,  3,  0,  1,  3, 34,  1,
		  0,  1,  0,  1,  0,  0,  0,  1,  9,  5,11171, 11, 22,  3, 48,  3,2047,6399,365,  1,105, 37, 11,  4,  0,  0,  9,  0, 12,  0,  4,  0,
		  0,  0,  1,  0,  1,  0,107, 16, 15,362,  0,  0, 15, 63,  1, 53,  6,  0, 31, 11,  0,  2, 15,  6,  0,  0,  0,  5, 15,  0,  1,  1,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  3,  2,  2,  0,  3,  0,  0,  0,  0,  0,  0,  0,  2,
		  0,  0,  2,  0,  0,  0,  1,  3,  4,  0,134,  1,  0,  0,  2,  0,  2,  0,  0,  0,  0,  0,  0,  1,  9,  1,  2,  1, 25,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  9,  0, 44,  1, 30,  2,  5,  1,  5,  1,  5,  1,  2,  2,  1,  0,  0,  0,  1,
		  0,  0,  3,  1,  9,  2,  1,  1
	};
	static constexpr uint16_t CategoryBuf3LowStart[2248] = {
		 0x0080, 0x00a0, 0x00a1, 0x00a2, 0x00a6, 0x00a7, 0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af, 0x00b0, 0x00b1, 0x00b2, 0x00b4, 0x00b6, 0x00b8, 0x00b9, 0x00ba, 0x00bb, 0x00bc,
		 0x00bf, 0x00c0, 0x00d7, 0x00d8, 0x00f7, 0x0100, 0x0102, 0x0104, 0x0106, 0x0108, 0x010a, 0x010c, 0x010e, 0x0110, 0x0112, 0x0114, 0x0116, 0x0118, 0x011a, 0x011c, 0x011e, 0x0120, 0x0122, 0x0124,
		 0x0126, 0x0128, 0x012a, 0x012c, 0x012e, 0x0130, 0x0132, 0x0134, 0x0136, 0x0139, 0x013b, 0x013d, 0x013f, 0x0141, 0x0143, 0x0145, 0x0147, 0x014a, 0x014c, 0x014e, 0x0150, 0x0152, 0x0154, 0x0156,
		 0x0158, 0x015a, 0x015c, 0x015e, 0x0160, 0x0162, 0x0164, 0x0166, 0x0168, 0x016a, 0x016c, 0x016e, 0x0170, 0x0172, 0x0174, 0x0176, 0x0178, 0x017b, 0x017d, 0x0181, 0x0184, 0x0186, 0x0189, 0x018e,
		 0x0193, 0x0196, 0x019c, 0x019f, 0x01a2, 0x01a4, 0x01a6, 0x01a9, 0x01ac, 0x01ae, 0x01b1, 0x01b5, 0x01b7, 0x01bb, 0x01bc, 0x01c0, 0x01c4, 0x01c5, 0x01c7, 0x01c8, 0x01ca, 0x01cb, 0x01cd, 0x01cf,
		 0x01d1, 0x01d3, 0x01d5, 0x01d7, 0x01d9, 0x01db, 0x01de, 0x01e0, 0x01e2, 0x01e4, 0x01e6, 0x01e8, 0x01ea, 0x01ec, 0x01ee, 0x01f1, 0x01f2, 0x01f4, 0x01f6, 0x01fa, 0x01fc, 0x01fe, 0x0200, 0x0202,
		 0x0204, 0x0206, 0x0208, 0x020a, 0x020c, 0x020e, 0x0210, 0x0212, 0x0214, 0x0216, 0x0218, 0x021a, 0x021c, 0x021e, 0x0220, 0x0222, 0x0224, 0x0226, 0x0228, 0x022a, 0x022c, 0x022e, 0x0230, 0x0232,
		 0x023a, 0x023d, 0x0241, 0x0243, 0x0248, 0x024a, 0x024c, 0x024e, 0x0294, 0x02b0, 0x02c2, 0x02c6, 0x02d2, 0x02e0, 0x02e5, 0x02ec, 0x02ed, 0x02ee, 0x02ef, 0x0300, 0x0370, 0x0372, 0x0374, 0x0375,
		 0x0376, 0x0378, 0x037a, 0x037e, 0x037f, 0x0380, 0x0384, 0x0386, 0x0387, 0x0388, 0x038b, 0x038c, 0x038d, 0x038e, 0x0391, 0x03a2, 0x03a3, 0x03cf, 0x03d2, 0x03d8, 0x03da, 0x03dc, 0x03de, 0x03e0,
		 0x03e2, 0x03e4, 0x03e6, 0x03e8, 0x03ea, 0x03ec, 0x03ee, 0x03f4, 0x03f6, 0x03f7, 0x03f9, 0x03fd, 0x0460, 0x0462, 0x0464, 0x0466, 0x0468, 0x046a, 0x046c, 0x046e, 0x0470, 0x0472, 0x0474, 0x0476,
		 0x0478, 0x047a, 0x047c, 0x047e, 0x0480, 0x0482, 0x0483, 0x0488, 0x048a, 0x048c, 0x048e, 0x0490, 0x0492, 0x0494, 0x0496, 0x0498, 0x049a, 0x049c, 0x049e, 0x04a0, 0x04a2, 0x04a4, 0x04a6, 0x04a8,
		 0x04aa, 0x04ac, 0x04ae, 0x04b0, 0x04b2, 0x04b4, 0x04b6, 0x04b8, 0x04ba, 0x04bc, 0x04be, 0x04c0, 0x04c3, 0x04c5, 0x04c7, 0x04c9, 0x04cb, 0x04cd, 0x04d0, 0x04d2, 0x04d4, 0x04d6, 0x04d8, 0x04da,
		 0x04dc, 0x04de, 0x04e0, 0x04e2, 0x04e4, 0x04e6, 0x04e8, 0x04ea, 0x04ec, 0x04ee, 0x04f0, 0x04f2, 0x04f4, 0x04f6, 0x04f8, 0x04fa, 0x04fc, 0x04fe, 0x0500, 0x0502, 0x0504, 0x0506, 0x0508, 0x050a,
		 0x050c, 0x050e, 0x0510, 0x0512, 0x0514, 0x0516, 0x0518, 0x051a, 0x051c, 0x051e, 0x0520, 0x0522, 0x0524, 0x0526, 0x0528, 0x052a, 0x052c, 0x052e, 0x0530, 0x0531, 0x0557, 0x0559, 0x055a, 0x0589,
		 0x058a, 0x058b, 0x058d, 0x058f, 0x0590, 0x0591, 0x05be, 0x05bf, 0x05c0, 0x05c1, 0x05c3, 0x05c4, 0x05c6, 0x05c7, 0x05c8, 0x05d0, 0x05eb, 0x05ef, 0x05f3, 0x05f5, 0x0600, 0x0606, 0x0609, 0x060b,
		 0x060c, 0x060e, 0x0610, 0x061b, 0x061c, 0x061d, 0x0620, 0x0640, 0x0641, 0x064b, 0x0660, 0x066a, 0x066e, 0x0670, 0x0671, 0x06d4, 0x06d5, 0x06d6, 0x06dd, 0x06de, 0x06df, 0x06e5, 0x06e7, 0x06e9,
		 0x06ea, 0x06ee, 0x06f0, 0x06fa, 0x06fd, 0x06ff, 0x0700, 0x070e, 0x070f, 0x0710, 0x0711, 0x0712, 0x0730, 0x074b, 0x074d, 0x07a6, 0x07b1, 0x07b2, 0x07c0, 0x07ca, 0x07eb, 0x07f4, 0x07f6, 0x07f7,
		 0x07fa, 0x07fb, 0x07fd, 0x07fe, 0x0800, 0x0816, 0x081a, 0x081b, 0x0824, 0x0825, 0x0828, 0x0829, 0x082e, 0x0830, 0x083f, 0x0840, 0x0859, 0x085c, 0x085e, 0x085f, 0x0860, 0x086b, 0x0870, 0x0888,
		 0x0889, 0x088f, 0x0890, 0x0892, 0x0898, 0x08a0, 0x08c9, 0x08ca, 0x08e2, 0x08e3, 0x0903, 0x0904, 0x093a, 0x093b, 0x093c, 0x093d, 0x093e, 0x0941, 0x0949, 0x094d, 0x094e, 0x0950, 0x0951, 0x0958,
		 0x0962, 0x0964, 0x0966, 0x0970, 0x0971, 0x0972, 0x0981, 0x0982, 0x0984, 0x0985, 0x098d, 0x098f, 0x0991, 0x0993, 0x09a9, 0x09aa, 0x09b1, 0x09b2, 0x09b3, 0x09b6, 0x09ba, 0x09bc, 0x09bd, 0x09be,
		 0x09c1, 0x09c5, 0x09c7, 0x09c9, 0x09cb, 0x09cd, 0x09ce, 0x09cf, 0x09d7, 0x09d8, 0x09dc, 0x09de, 0x09df, 0x09e2, 0x09e4, 0x09e6, 0x09f0, 0x09f2, 0x09f4, 0x09fa, 0x09fb, 0x09fc, 0x09fd, 0x09fe,
		 0x09ff, 0x0a01, 0x0a03, 0x0a04, 0x0a05, 0x0a0b, 0x0a0f, 0x0a11, 0x0a13, 0x0a29, 0x0a2a, 0x0a31, 0x0a32, 0x0a34, 0x0a35, 0x0a37, 0x0a38, 0x0a3a, 0x0a3c, 0x0a3d, 0x0a3e, 0x0a41, 0x0a43, 0x0a47,
		 0x0a49, 0x0a4b, 0x0a4e, 0x0a51, 0x0a52, 0x0a59, 0x0a5d, 0x0a5e, 0x0a5f, 0x0a66, 0x0a70, 0x0a72, 0x0a75, 0x0a76, 0x0a77, 0x0a81, 0x0a83, 0x0a84, 0x0a85, 0x0a8e, 0x0a8f, 0x0a92, 0x0a93, 0x0aa9,
		 0x0aaa, 0x0ab1, 0x0ab2, 0x0ab4, 0x0ab5, 0x0aba, 0x0abc, 0x0abd, 0x0abe, 0x0ac1, 0x0ac6, 0x0ac7, 0x0ac9, 0x0aca, 0x0acb, 0x0acd, 0x0ace, 0x0ad0, 0x0ad1, 0x0ae0, 0x0ae2, 0x0ae4, 0x0ae6, 0x0af0,
		 0x0af1, 0x0af2, 0x0af9, 0x0afa, 0x0b00, 0x0b01, 0x0b02, 0x0b04, 0x0b05, 0x0b0d, 0x0b0f, 0x0b11, 0x0b13, 0x0b29, 0x0b2a, 0x0b31, 0x0b32, 0x0b34, 0x0b35, 0x0b3a, 0x0b3c, 0x0b3d, 0x0b3e, 0x0b3f,
		 0x0b40, 0x0b41, 0x0b45, 0x0b47, 0x0b49, 0x0b4b, 0x0b4d, 0x0b4e, 0x0b55, 0x0b57, 0x0b58, 0x0b5c, 0x0b5e, 0x0b5f, 0x0b62, 0x0b64, 0x0b66, 0x0b70, 0x0b71, 0x0b72, 0x0b78, 0x0b82, 0x0b83, 0x0b84,
		 0x0b85, 0x0b8b, 0x0b8e, 0x0b91, 0x0b92, 0x0b96, 0x0b99, 0x0b9b, 0x0b9c, 0x0b9d, 0x0b9e, 0x0ba0, 0x0ba3, 0x0ba5, 0x0ba8, 0x0bab, 0x0bae, 0x0bba, 0x0bbe, 0x0bc0, 0x0bc1, 0x0bc3, 0x0bc6, 0x0bc9,
		 0x0bca, 0x0bcd, 0x0bce, 0x0bd0, 0x0bd1, 0x0bd7, 0x0bd8, 0x0be6, 0x0bf0, 0x0bf3, 0x0bf9, 0x0bfa, 0x0bfb, 0x0c00, 0x0c01, 0x0c04, 0x0c05, 0x0c0d, 0x0c0e, 0x0c11, 0x0c12, 0x0c29, 0x0c2a, 0x0c3a,
		 0x0c3c, 0x0c3d, 0x0c3e, 0x0c41, 0x0c45, 0x0c46, 0x0c49, 0x0c4a, 0x0c4e, 0x0c55, 0x0c57, 0x0c58, 0x0c5b, 0x0c5d, 0x0c5e, 0x0c60, 0x0c62, 0x0c64, 0x0c66, 0x0c70, 0x0c77, 0x0c78, 0x0c7f, 0x0c80,
		 0x0c81, 0x0c82, 0x0c84, 0x0c85, 0x0c8d, 0x0c8e, 0x0c91, 0x0c92, 0x0ca9, 0x0caa, 0x0cb4, 0x0cb5, 0x0cba, 0x0cbc, 0x0cbd, 0x0cbe, 0x0cbf, 0x0cc0, 0x0cc5, 0x0cc6, 0x0cc7, 0x0cc9, 0x0cca, 0x0ccc,
		 0x0cce, 0x0cd5, 0x0cd7, 0x0cdd, 0x0cdf, 0x0ce0, 0x0ce2, 0x0ce4, 0x0ce6, 0x0cf0, 0x0cf1, 0x0cf3, 0x0cf4, 0x0d00, 0x0d02, 0x0d04, 0x0d0d, 0x0d0e, 0x0d11, 0x0d12, 0x0d3b, 0x0d3d, 0x0d3e, 0x0d41,
		 0x0d45, 0x0d46, 0x0d49, 0x0d4a, 0x0d4d, 0x0d4e, 0x0d4f, 0x0d50, 0x0d54, 0x0d57, 0x0d58, 0x0d5f, 0x0d62, 0x0d64, 0x0d66, 0x0d70, 0x0d79, 0x0d7a, 0x0d80, 0x0d81, 0x0d82, 0x0d84, 0x0d85, 0x0d97,
		 0x0d9a, 0x0db2, 0x0db3, 0x0dbc, 0x0dbd, 0x0dbe, 0x0dc0, 0x0dc7, 0x0dca, 0x0dcb, 0x0dcf, 0x0dd2, 0x0dd5, 0x0dd6, 0x0dd7, 0x0dd8, 0x0de0, 0x0de6, 0x0df0, 0x0df2, 0x0df4, 0x0df5, 0x0e01, 0x0e31,
		 0x0e32, 0x0e34, 0x0e3b, 0x0e3f, 0x0e40, 0x0e46, 0x0e47, 0x0e4f, 0x0e50, 0x0e5a, 0x0e5c, 0x0e81, 0x0e83, 0x0e84, 0x0e85, 0x0e86, 0x0e8b, 0x0e8c, 0x0ea4, 0x0ea5, 0x0ea6, 0x0ea7, 0x0eb1, 0x0eb2,
		 0x0eb4, 0x0ebd, 0x0ebe, 0x0ec0, 0x0ec5, 0x0ec6, 0x0ec7, 0x0ec8, 0x0ecf, 0x0ed0, 0x0eda, 0x0edc, 0x0ee0, 0x0f00, 0x0f01, 0x0f04, 0x0f13, 0x0f14, 0x0f15, 0x0f18, 0x0f1a, 0x0f20, 0x0f2a, 0x0f34,
		 0x0f35, 0x0f36, 0x0f37, 0x0f38, 0x0f39, 0x0f3a, 0x0f3b, 0x0f3c, 0x0f3d, 0x0f3e, 0x0f40, 0x0f48, 0x0f49, 0x0f6d, 0x0f71, 0x0f7f, 0x0f80, 0x0f85, 0x0f86, 0x0f88, 0x0f8d, 0x0f98, 0x0f99, 0x0fbd,
		 0x0fbe, 0x0fc6, 0x0fc7, 0x0fcd, 0x0fce, 0x0fd0, 0x0fd5, 0x0fd9, 0x0fdb, 0x1000, 0x102b, 0x102d, 0x1031, 0x1032, 0x1038, 0x1039, 0x103b, 0x103d, 0x103f, 0x1040, 0x104a, 0x1050, 0x1056, 0x1058,
		 0x105a, 0x105e, 0x1061, 0x1062, 0x1065, 0x1067, 0x106e, 0x1071, 0x1075, 0x1082, 0x1083, 0x1085, 0x1087, 0x108d, 0x108e, 0x108f, 0x1090, 0x109a, 0x109d, 0x109e, 0x10a0, 0x10c6, 0x10c7, 0x10c8,
		 0x10cd, 0x10ce, 0x10fb, 0x10fc, 0x1100, 0x1249, 0x124a, 0x124e, 0x1250, 0x1257, 0x1258, 0x1259, 0x125a, 0x125e, 0x1260, 0x1289, 0x128a, 0x128e, 0x1290, 0x12b1, 0x12b2, 0x12b6, 0x12b8, 0x12bf,
		 0x12c0, 0x12c1, 0x12c2, 0x12c6, 0x12c8, 0x12d7, 0x12d8, 0x1311, 0x1312, 0x1316, 0x1318, 0x135b, 0x135d, 0x1360, 0x1369, 0x137d, 0x1380, 0x1390, 0x139a, 0x13a0, 0x13f6, 0x13fe, 0x1400, 0x1401,
		 0x166d, 0x166e, 0x166f, 0x1680, 0x1681, 0x169b, 0x169c, 0x169d, 0x16a0, 0x16eb, 0x16ee, 0x16f1, 0x16f9, 0x1700, 0x1712, 0x1715, 0x1716, 0x171f, 0x1732, 0x1734, 0x1735, 0x1737, 0x1740, 0x1752,
		 0x1754, 0x1760, 0x176d, 0x176e, 0x1771, 0x1772, 0x1774, 0x1780, 0x17b4, 0x17b6, 0x17b7, 0x17be, 0x17c6, 0x17c7, 0x17c9, 0x17d4, 0x17d7, 0x17d8, 0x17db, 0x17dc, 0x17dd, 0x17de, 0x17e0, 0x17ea,
		 0x17f0, 0x17fa, 0x1800, 0x1806, 0x1807, 0x180b, 0x180e, 0x180f, 0x1810, 0x181a, 0x1820, 0x1843, 0x1844, 0x1879, 0x1880, 0x1885, 0x1887, 0x18a9, 0x18aa, 0x18ab, 0x18b0, 0x18f6, 0x1900, 0x191f,
		 0x1920, 0x1923, 0x1927, 0x1929, 0x192c, 0x1930, 0x1932, 0x1933, 0x1939, 0x193c, 0x1940, 0x1941, 0x1944, 0x1946, 0x1950, 0x196e, 0x1970, 0x1975, 0x1980, 0x19ac, 0x19b0, 0x19ca, 0x19d0, 0x19da,
		 0x19db, 0x19de, 0x1a00, 0x1a17, 0x1a19, 0x1a1b, 0x1a1c, 0x1a1e, 0x1a20, 0x1a55, 0x1a56, 0x1a57, 0x1a58, 0x1a5f, 0x1a60, 0x1a61, 0x1a62, 0x1a63, 0x1a65, 0x1a6d, 0x1a73, 0x1a7d, 0x1a7f, 0x1a80,
		 0x1a8a, 0x1a90, 0x1a9a, 0x1aa0, 0x1aa7, 0x1aa8, 0x1aae, 0x1ab0, 0x1abe, 0x1abf, 0x1acf, 0x1b00, 0x1b04, 0x1b05, 0x1b34, 0x1b35, 0x1b36, 0x1b3b, 0x1b3c, 0x1b3d, 0x1b42, 0x1b43, 0x1b45, 0x1b4d,
		 0x1b50, 0x1b5a, 0x1b61, 0x1b6b, 0x1b74, 0x1b7d, 0x1b7f, 0x1b80, 0x1b82, 0x1b83, 0x1ba1, 0x1ba2, 0x1ba6, 0x1ba8, 0x1baa, 0x1bab, 0x1bae, 0x1bb0, 0x1bba, 0x1be6, 0x1be7, 0x1be8, 0x1bea, 0x1bed,
		 0x1bee, 0x1bef, 0x1bf2, 0x1bf4, 0x1bfc, 0x1c00, 0x1c24, 0x1c2c, 0x1c34, 0x1c36, 0x1c38, 0x1c3b, 0x1c40, 0x1c4a, 0x1c4d, 0x1c50, 0x1c5a, 0x1c78, 0x1c7e, 0x1c89, 0x1c90, 0x1cbb, 0x1cbd, 0x1cc0,
		 0x1cc8, 0x1cd0, 0x1cd3, 0x1cd4, 0x1ce1, 0x1ce2, 0x1ce9, 0x1ced, 0x1cee, 0x1cf4, 0x1cf5, 0x1cf7, 0x1cf8, 0x1cfa, 0x1cfb, 0x1d2c, 0x1d78, 0x1d9b, 0x1dc0, 0x1e00, 0x1e02, 0x1e04, 0x1e06, 0x1e08,
		 0x1e0a, 0x1e0c, 0x1e0e, 0x1e10, 0x1e12, 0x1e14, 0x1e16, 0x1e18, 0x1e1a, 0x1e1c, 0x1e1e, 0x1e20, 0x1e22, 0x1e24, 0x1e26, 0x1e28, 0x1e2a, 0x1e2c, 0x1e2e, 0x1e30, 0x1e32, 0x1e34, 0x1e36, 0x1e38,
		 0x1e3a, 0x1e3c, 0x1e3e, 0x1e40, 0x1e42, 0x1e44, 0x1e46, 0x1e48, 0x1e4a, 0x1e4c, 0x1e4e, 0x1e50, 0x1e52, 0x1e54, 0x1e56, 0x1e58, 0x1e5a, 0x1e5c, 0x1e5e, 0x1e60, 0x1e62, 0x1e64, 0x1e66, 0x1e68,
		 0x1e6a, 0x1e6c, 0x1e6e, 0x1e70, 0x1e72, 0x1e74, 0x1e76, 0x1e78, 0x1e7a, 0x1e7c, 0x1e7e, 0x1e80, 0x1e82, 0x1e84, 0x1e86, 0x1e88, 0x1e8a, 0x1e8c, 0x1e8e, 0x1e90, 0x1e92, 0x1e94, 0x1e9e, 0x1ea0,
		 0x1ea2, 0x1ea4, 0x1ea6, 0x1ea8, 0x1eaa, 0x1eac, 0x1eae, 0x1eb0, 0x1eb2, 0x1eb4, 0x1eb6, 0x1eb8, 0x1eba, 0x1ebc, 0x1ebe, 0x1ec0, 0x1ec2, 0x1ec4, 0x1ec6, 0x1ec8, 0x1eca, 0x1ecc, 0x1ece, 0x1ed0,
		 0x1ed2, 0x1ed4, 0x1ed6, 0x1ed8, 0x1eda, 0x1edc, 0x1ede, 0x1ee0, 0x1ee2, 0x1ee4, 0x1ee6, 0x1ee8, 0x1eea, 0x1eec, 0x1eee, 0x1ef0, 0x1ef2, 0x1ef4, 0x1ef6, 0x1ef8, 0x1efa, 0x1efc, 0x1efe, 0x1f08,
		 0x1f16, 0x1f18, 0x1f1e, 0x1f28, 0x1f38, 0x1f46, 0x1f48, 0x1f4e, 0x1f58, 0x1f59, 0x1f5a, 0x1f5b, 0x1f5c, 0x1f5d, 0x1f5e, 0x1f5f, 0x1f68, 0x1f7e, 0x1f88, 0x1f98, 0x1fa8, 0x1fb5, 0x1fb8, 0x1fbc,
		 0x1fbd, 0x1fbf, 0x1fc5, 0x1fc8, 0x1fcc, 0x1fcd, 0x1fd4, 0x1fd8, 0x1fdc, 0x1fdd, 0x1fe8, 0x1fed, 0x1ff0, 0x1ff5, 0x1ff8, 0x1ffc, 0x1ffd, 0x1fff, 0x2000, 0x200b, 0x2010, 0x2016, 0x2018, 0x2019,
		 0x201a, 0x201b, 0x201d, 0x201e, 0x201f, 0x2020, 0x2028, 0x2029, 0x202a, 0x202f, 0x2030, 0x2039, 0x203a, 0x203b, 0x203f, 0x2041, 0x2044, 0x2045, 0x2046, 0x2047, 0x2052, 0x2053, 0x2054, 0x2055,
		 0x205f, 0x2060, 0x2065, 0x2066, 0x2070, 0x2071, 0x2072, 0x2074, 0x207a, 0x207d, 0x207e, 0x207f, 0x2080, 0x208a, 0x208d, 0x208e, 0x208f, 0x2090, 0x209d, 0x20a0, 0x20c1, 0x20d0, 0x20dd, 0x20e1,
		 0x20e2, 0x20e5, 0x20f1, 0x2100, 0x2102, 0x2103, 0x2107, 0x2108, 0x210b, 0x2110, 0x2114, 0x2115, 0x2116, 0x2118, 0x2119, 0x211e, 0x2124, 0x2125, 0x2126, 0x2127, 0x2128, 0x2129, 0x212a, 0x212e,
		 0x2130, 0x2135, 0x213a, 0x213e, 0x2140, 0x2145, 0x214a, 0x214b, 0x214c, 0x214f, 0x2150, 0x2160, 0x2183, 0x2185, 0x2189, 0x218a, 0x218c, 0x2190, 0x2195, 0x219a, 0x219c, 0x21a0, 0x21a1, 0x21a3,
		 0x21a4, 0x21a6, 0x21a7, 0x21ae, 0x21af, 0x21ce, 0x21d0, 0x21d2, 0x21d3, 0x21d4, 0x21d5, 0x21f4, 0x2300, 0x2308, 0x2309, 0x230a, 0x230b, 0x230c, 0x2320, 0x2322, 0x2329, 0x232a, 0x232b, 0x237c,
		 0x237d, 0x239b, 0x23b4, 0x23dc, 0x23e2, 0x2427, 0x2440, 0x244b, 0x2460, 0x249c, 0x24ea, 0x2500, 0x25b7, 0x25b8, 0x25c1, 0x25c2, 0x25f8, 0x2600, 0x266f, 0x2670, 0x2768, 0x2769, 0x276a, 0x276b,
		 0x276c, 0x276d, 0x276e, 0x276f, 0x2770, 0x2771, 0x2772, 0x2773, 0x2774, 0x2775, 0x2776, 0x2794, 0x27c0, 0x27c5, 0x27c6, 0x27c7, 0x27e6, 0x27e7, 0x27e8, 0x27e9, 0x27ea, 0x27eb, 0x27ec, 0x27ed,
		 0x27ee, 0x27ef, 0x27f0, 0x2800, 0x2900, 0x2983, 0x2984, 0x2985, 0x2986, 0x2987, 0x2988, 0x2989, 0x298a, 0x298b, 0x298c, 0x298d, 0x298e, 0x298f, 0x2990, 0x2991, 0x2992, 0x2993, 0x2994, 0x2995,
		 0x2996, 0x2997, 0x2998, 0x2999, 0x29d8, 0x29d9, 0x29da, 0x29db, 0x29dc, 0x29fc, 0x29fd, 0x29fe, 0x2b00, 0x2b30, 0x2b45, 0x2b47, 0x2b4d, 0x2b74, 0x2b76, 0x2b96, 0x2b97, 0x2c00, 0x2c60, 0x2c62,
		 0x2c67, 0x2c69, 0x2c6b, 0x2c6d, 0x2c72, 0x2c75, 0x2c7c, 0x2c7e, 0x2c82, 0x2c84, 0x2c86, 0x2c88, 0x2c8a, 0x2c8c, 0x2c8e, 0x2c90, 0x2c92, 0x2c94, 0x2c96, 0x2c98, 0x2c9a, 0x2c9c, 0x2c9e, 0x2ca0,
		 0x2ca2, 0x2ca4, 0x2ca6, 0x2ca8, 0x2caa, 0x2cac, 0x2cae, 0x2cb0, 0x2cb2, 0x2cb4, 0x2cb6, 0x2cb8, 0x2cba, 0x2cbc, 0x2cbe, 0x2cc0, 0x2cc2, 0x2cc4, 0x2cc6, 0x2cc8, 0x2cca, 0x2ccc, 0x2cce, 0x2cd0,
		 0x2cd2, 0x2cd4, 0x2cd6, 0x2cd8, 0x2cda, 0x2cdc, 0x2cde, 0x2ce0, 0x2ce2, 0x2ce5, 0x2ceb, 0x2ced, 0x2cef, 0x2cf2, 0x2cf4, 0x2cf9, 0x2cfd, 0x2cfe, 0x2d26, 0x2d28, 0x2d2e, 0x2d30, 0x2d68, 0x2d6f,
		 0x2d70, 0x2d71, 0x2d7f, 0x2d80, 0x2d97, 0x2da0, 0x2da7, 0x2da8, 0x2daf, 0x2db0, 0x2db7, 0x2db8, 0x2dbf, 0x2dc0, 0x2dc7, 0x2dc8, 0x2dcf, 0x2dd0, 0x2dd7, 0x2dd8, 0x2ddf, 0x2de0, 0x2e00, 0x2e02,
		 0x2e03, 0x2e04, 0x2e05, 0x2e06, 0x2e09, 0x2e0a, 0x2e0b, 0x2e0c, 0x2e0d, 0x2e0e, 0x2e17, 0x2e18, 0x2e1a, 0x2e1b, 0x2e1c, 0x2e1d, 0x2e1e, 0x2e20, 0x2e21, 0x2e22, 0x2e23, 0x2e24, 0x2e25, 0x2e26,
		 0x2e27, 0x2e28, 0x2e29, 0x2e2a, 0x2e2f, 0x2e30, 0x2e3a, 0x2e3c, 0x2e40, 0x2e41, 0x2e42, 0x2e43, 0x2e50, 0x2e52, 0x2e55, 0x2e56, 0x2e57, 0x2e58, 0x2e59, 0x2e5a, 0x2e5b, 0x2e5c, 0x2e5d, 0x2e5e,
		 0x2e80, 0x2e9a, 0x2e9b, 0x2ef4, 0x2f00, 0x2fd6, 0x2ff0, 0x3000, 0x3001, 0x3004, 0x3005, 0x3006, 0x3007, 0x3008, 0x3009, 0x300a, 0x300b, 0x300c, 0x300d, 0x300e, 0x300f, 0x3010, 0x3011, 0x3012,
		 0x3014, 0x3015, 0x3016, 0x3017, 0x3018, 0x3019, 0x301a, 0x301b, 0x301c, 0x301d, 0x301e, 0x3020, 0x3021, 0x302a, 0x302e, 0x3030, 0x3031, 0x3036, 0x3038, 0x303b, 0x303c, 0x303d, 0x303e, 0x3040,
		 0x3041, 0x3097, 0x3099, 0x309b, 0x309d, 0x309f, 0x30a0, 0x30a1, 0x30fb, 0x30fc, 0x30ff, 0x3100, 0x3105, 0x3130, 0x3131, 0x318f, 0x3190, 0x3192, 0x3196, 0x31a0, 0x31c0, 0x31e4, 0x31ef, 0x31f0,
		 0x3200, 0x321f, 0x3220, 0x322a, 0x3248, 0x3250, 0x3251, 0x3260, 0x3280, 0x328a, 0x32b1, 0x32c0, 0x3400, 0x4dc0, 0x4e00, 0xa015, 0xa016, 0xa48d, 0xa490, 0xa4c7, 0xa4d0, 0xa4f8, 0xa4fe, 0xa500,
		 0xa60c, 0xa60d, 0xa610, 0xa620, 0xa62a, 0xa62c, 0xa640, 0xa642, 0xa644, 0xa646, 0xa648, 0xa64a, 0xa64c, 0xa64e, 0xa650, 0xa652, 0xa654, 0xa656, 0xa658, 0xa65a, 0xa65c, 0xa65e, 0xa660, 0xa662,
		 0xa664, 0xa666, 0xa668, 0xa66a, 0xa66c, 0xa66e, 0xa66f, 0xa670, 0xa673, 0xa674, 0xa67e, 0xa67f, 0xa680, 0xa682, 0xa684, 0xa686, 0xa688, 0xa68a, 0xa68c, 0xa68e, 0xa690, 0xa692, 0xa694, 0xa696,
		 0xa698, 0xa69a, 0xa69c, 0xa69e, 0xa6a0, 0xa6e6, 0xa6f0, 0xa6f2, 0xa6f8, 0xa700, 0xa717, 0xa720, 0xa722, 0xa724, 0xa726, 0xa728, 0xa72a, 0xa72c, 0xa72e, 0xa732, 0xa734, 0xa736, 0xa738, 0xa73a,
		 0xa73c, 0xa73e, 0xa740, 0xa742, 0xa744, 0xa746, 0xa748, 0xa74a, 0xa74c, 0xa74e, 0xa750, 0xa752, 0xa754, 0xa756, 0xa758, 0xa75a, 0xa75c, 0xa75e, 0xa760, 0xa762, 0xa764, 0xa766, 0xa768, 0xa76a,
		 0xa76c, 0xa76e, 0xa770, 0xa779, 0xa77b, 0xa77d, 0xa780, 0xa782, 0xa784, 0xa786, 0xa788, 0xa789, 0xa78b, 0xa78d, 0xa78f, 0xa790, 0xa792, 0xa796, 0xa798, 0xa79a, 0xa79c, 0xa79e, 0xa7a0, 0xa7a2,
		 0xa7a4, 0xa7a6, 0xa7a8, 0xa7aa, 0xa7b0, 0xa7b6, 0xa7b8, 0xa7ba, 0xa7bc, 0xa7be, 0xa7c0, 0xa7c2, 0xa7c4, 0xa7c9, 0xa7cb, 0xa7d0, 0xa7d2, 0xa7d4, 0xa7d6, 0xa7d8, 0xa7da, 0xa7f2, 0xa7f5, 0xa7f7,
		 0xa7f8, 0xa7fb, 0xa802, 0xa803, 0xa806, 0xa807, 0xa80b, 0xa80c, 0xa823, 0xa825, 0xa827, 0xa828, 0xa82c, 0xa82d, 0xa830, 0xa836, 0xa838, 0xa839, 0xa83a, 0xa840, 0xa874, 0xa878, 0xa880, 0xa882,
		 0xa8b4, 0xa8c4, 0xa8c6, 0xa8ce, 0xa8d0, 0xa8da, 0xa8e0, 0xa8f2, 0xa8f8, 0xa8fb, 0xa8fc, 0xa8fd, 0xa8ff, 0xa900, 0xa90a, 0xa926, 0xa92e, 0xa930, 0xa947, 0xa952, 0xa954, 0xa95f, 0xa960, 0xa97d,
		 0xa980, 0xa983, 0xa984, 0xa9b3, 0xa9b4, 0xa9b6, 0xa9ba, 0xa9bc, 0xa9be, 0xa9c1, 0xa9ce, 0xa9cf, 0xa9d0, 0xa9da, 0xa9de, 0xa9e0, 0xa9e5, 0xa9e6, 0xa9e7, 0xa9f0, 0xa9fa, 0xa9ff, 0xaa00, 0xaa29,
		 0xaa2f, 0xaa31, 0xaa33, 0xaa35, 0xaa37, 0xaa40, 0xaa43, 0xaa44, 0xaa4c, 0xaa4d, 0xaa4e, 0xaa50, 0xaa5a, 0xaa5c, 0xaa60, 0xaa70, 0xaa71, 0xaa77, 0xaa7a, 0xaa7b, 0xaa7c, 0xaa7d, 0xaa7e, 0xaab0,
		 0xaab1, 0xaab2, 0xaab5, 0xaab7, 0xaab9, 0xaabe, 0xaac0, 0xaac1, 0xaac2, 0xaac3, 0xaadb, 0xaadd, 0xaade, 0xaae0, 0xaaeb, 0xaaec, 0xaaee, 0xaaf0, 0xaaf2, 0xaaf3, 0xaaf5, 0xaaf6, 0xaaf7, 0xab01,
		 0xab07, 0xab09, 0xab0f, 0xab11, 0xab17, 0xab20, 0xab27, 0xab28, 0xab2f, 0xab5b, 0xab5c, 0xab69, 0xab6a, 0xab6c, 0xabc0, 0xabe3, 0xabe5, 0xabe6, 0xabe8, 0xabe9, 0xabeb, 0xabec, 0xabed, 0xabee,
		 0xabf0, 0xabfa, 0xac00, 0xd7a4, 0xd7b0, 0xd7c7, 0xd7cb, 0xd7fc, 0xd800, 0xe000, 0xf900, 0xfa6e, 0xfa70, 0xfada, 0xfb07, 0xfb18, 0xfb1d, 0xfb1e, 0xfb1f, 0xfb29, 0xfb2a, 0xfb37, 0xfb38, 0xfb3d,
		 0xfb3e, 0xfb3f, 0xfb40, 0xfb42, 0xfb43, 0xfb45, 0xfb46, 0xfbb2, 0xfbc3, 0xfbd3, 0xfd3e, 0xfd3f, 0xfd40, 0xfd50, 0xfd90, 0xfd92, 0xfdc8, 0xfdcf, 0xfdd0, 0xfdf0, 0xfdfc, 0xfdfd, 0xfe00, 0xfe10,
		 0xfe17, 0xfe18, 0xfe19, 0xfe1a, 0xfe20, 0xfe30, 0xfe31, 0xfe33, 0xfe35, 0xfe36, 0xfe37, 0xfe38, 0xfe39, 0xfe3a, 0xfe3b, 0xfe3c, 0xfe3d, 0xfe3e, 0xfe3f, 0xfe40, 0xfe41, 0xfe42, 0xfe43, 0xfe44,
		 0xfe45, 0xfe47, 0xfe48, 0xfe49, 0xfe4d, 0xfe50, 0xfe53, 0xfe54, 0xfe58, 0xfe59, 0xfe5a, 0xfe5b, 0xfe5c, 0xfe5d, 0xfe5e, 0xfe5f, 0xfe62, 0xfe63, 0xfe64, 0xfe67, 0xfe68, 0xfe69, 0xfe6a, 0xfe6c,
		 0xfe70, 0xfe75, 0xfe76, 0xfefd, 0xfeff, 0xff00, 0xff01, 0xff04, 0xff05, 0xff08, 0xff09, 0xff0a, 0xff0b, 0xff0c, 0xff0d, 0xff0e, 0xff10, 0xff1a, 0xff1c, 0xff1f, 0xff21, 0xff3b, 0xff3c, 0xff3d,
		 0xff3e, 0xff3f, 0xff40, 0xff5b, 0xff5c, 0xff5d, 0xff5e, 0xff5f, 0xff60, 0xff61, 0xff62, 0xff63, 0xff64, 0xff66, 0xff70, 0xff71, 0xff9e, 0xffa0, 0xffbf, 0xffc2, 0xffc8, 0xffca, 0xffd0, 0xffd2,
		 0xffd8, 0xffda, 0xffdd, 0xffe0, 0xffe2, 0xffe3, 0xffe4, 0xffe5, 0xffe7, 0xffe8, 0xffe9, 0xffed, 0xffef, 0xfff9, 0xfffc, 0xfffe
	};
	static constexpr uint8_t CategoryBuf4HighValueCluster[748] = {
		  4,  4,  4,  4,  4,  4,  4, 17, 10, 21,  9, 10, 21, 10, 21, 21, 21, 21,  5,  4,  4,  5, 10,  4, 10,  4,  9,  4,  9,  4,  5,  4,
		 17,  4,  4, 17,  9,  0,  1,  4,  8,  0,  1,  4,  4, 17,  0,  0,  0,  0,  1,  1,  1,  1,  4,  4,  4,  3,  3,  3,  4,  4,  4,  4,
		  4,  4, 17, 10,  4, 21, 10,  4, 10,  4,  4, 10,  4, 10, 17,  4, 17,  4, 10,  4, 10, 10,  4,  5,  5,  5,  4,  4,  4,  5,  5, 10,
		 17,  4, 10, 17,  4, 10,  4, 21,  4,  5, 10, 17,  4, 17,  4, 10,  4, 10,  4, 17, 10,  4,  0,  1, 10,  4,  5,  8, 10,  4,  5, 12,
		  4,  5,  4, 10,  4,  4,  5, 10, 17,  4,  5, 17,  4, 10,  4,  6,  5,  6,  4,  5, 17, 10,  8,  5,  4,  5,  4,  5,  6,  4,  6,  5,
		  6,  5, 17, 26, 17,  5, 26,  4,  8,  5,  4,  5,  6,  5,  8, 17,  4,  6,  4,  4,  5, 17,  4,  5,  6,  4,  6,  5,  6,  4, 17,  5,
		 17,  6,  5,  8,  4, 17,  4, 17, 10,  4,  4,  6,  5,  6,  5,  6,  5, 17,  5,  4,  5,  4,  4,  4,  4,  4, 17,  4,  5,  6,  5,  8,
		  5,  6,  4,  4,  4,  4,  4,  4,  5,  4,  6,  5,  6,  6,  6,  4,  6,  4,  6,  5,  5,  4,  6,  5,  6,  5,  6,  5,  4, 17,  8, 17,
		 17,  5,  4,  4,  6,  5,  6,  5,  6,  5,  6,  5,  4, 17,  4,  8,  4,  6,  5,  6,  5,  6,  5, 17,  4,  5,  4,  6,  5,  6,  5,  6,
		  5, 17,  4,  8, 17,  4,  5,  6,  5,  6,  5,  6,  5,  4, 17,  8,  4,  5,  6,  5,  6,  5,  8, 10, 17, 21,  4,  4,  6,  5,  6,  5,
		 17,  0,  1,  8, 10,  4,  4,  4,  4,  4,  6,  6,  5,  6,  5,  4,  6,  4,  6,  5, 17,  8,  4,  4,  6,  5,  5,  6,  5,  4, 17,  4,
		  6,  4,  5,  4,  5,  6,  4,  5, 17,  5,  4,  5,  6,  5,  4,  5,  6,  5, 17,  4, 17,  4, 17,  4,  4,  6,  5,  5,  6,  5,  4, 17,
		  8, 10, 17,  4,  5,  6,  5,  6,  5,  6,  5,  4,  4,  4,  5,  5,  5,  5,  4,  5,  8,  4,  4,  4,  6,  5,  6,  5,  6,  5,  4,  8,
		  4,  5,  6, 17,  5,  4,  6,  4,  4,  6,  5,  6,  5,  6,  5, 17,  8,  4, 10, 21, 19, 21, 17,  4,  9, 17,  4,  4, 17,  4, 26,  5,
		  4,  5,  4,  4,  4,  8, 17,  4,  8,  4,  5, 17,  4,  5, 17, 21,  3, 17, 21,  8, 10,  4,  4,  0,  1, 10, 17,  4,  5,  4,  6,  5,
		  3,  3, 17,  3,  5,  6,  4,  4,  4,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 21,  5, 17, 26,  5,  5, 21, 21, 21, 21,
		  6,  5, 21,  6, 26,  5, 21,  5, 21,  5, 21, 21,  5, 21, 10, 10, 21, 10,  0,  1,  0,  1,  1,  0,  1,  0,  0,  0,  0,  0,  0,  1,
		  1,  1,  1,  0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0, 18,  1, 18,
		  1,  0, 18,  1, 18,  1,  0, 18,  1, 18,  1,  0, 18,  1, 18,  1,  0, 18,  1, 18,  1,  0,  1,  8, 21,  5, 21,  5, 21,  5, 21,  5,
		 21, 17,  5,  5,  1,  4,  1,  1,  5,  5,  5,  5,  5,  3,  5,  4,  5,  3,  8,  4, 21,  4,  5,  4,  5,  8, 19,  4,  3,  5,  8,  4,
		  4,  4,  4,  4, 10,  5,  0,  1,  5,  3,  8, 17, 10, 21, 10, 19, 10, 10, 21, 10,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
		  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 18, 21, 21, 21, 21, 21, 21, 10, 21, 21, 21,
		 21, 21, 21, 21, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  8,  4,  4,
		  4,  4,  4,  4,  4,  4,  4, 26, 26,  5, 28, 28
	};
	static constexpr uint16_t CategoryBuf5HighSizeCluster[748] = {
		 11, 25, 18,  1, 14, 13,122,  2, 44,  8, 52,  3, 16,  1,  2, 12,  0, 44,  0, 28, 48,  0, 26, 31,  3, 19,  0,  7,  0, 37,  4, 29,
		  0, 35,  7,  0,  4, 39, 39, 77,  9, 35, 35, 39, 51,  0, 10, 14,  6,  1, 10, 14,  6,  1,310, 21,  7,  5, 41,  8,  5,  0, 43,  1,
		  0, 22,  0,  7, 22,  1,  6, 30,  8, 18,  1,  4, 21,  5,  0, 25,  0, 55,  1,  1, 15, 45,  0,  2,  1,  3,  3,  2, 28,  2,  0,  8,
		  8, 28,  1,  0, 28,  2,  7,  0, 27,  1,  4,  6, 53,  6, 21,  7, 18,  7, 17,  3,  6, 72, 50, 50,  5, 35,  3,  9, 30, 41,  1,  0,
		  1,  2, 28,  9,  0, 21, 10,  3,  4, 17,  3,  3, 20,  6, 22,  0,  0,  0, 52, 14,  6, 19,  9,  0,  1,  1,  0,  2,  0, 44,  2,  3,
		  1,  1,  1,  0,  3,  0,  0, 24,  9,  2, 35,  4,  0,  7,  9,  3,  0,  1,  0, 34,  0,  1,  0,  1,  0, 47,  2,  8,  1,  3,  3,  3,
		  0,  0,  0,  9,  0,  0,  0,  2, 19, 17, 24,  2,  2,  1,  0,  0,  1,  5,  0,  1,  0,  6,  0,  3, 14,  9,  0, 46,  0,  2,  7,  9,
		  1,  1,  7,  1, 21,  6,  1,  4,  1,  0,  1,  0,  3,  1,  2,  0,  0,  4,  1,  6,  4, 52,  2,  7,  1,  2,  0,  0,  3,  4,  9,  1,
		  0,  0,  2, 47,  2,  5,  0,  0,  3,  1,  0,  1,  1,  0,  0,  9, 46,  2,  3,  3,  1,  0,  1, 22,  3,  1, 47,  2,  7,  1,  0,  0,
		  1,  2,  0,  9, 12, 42,  0,  0,  0,  1,  5,  0,  0,  0,  0,  9, 26,  2,  1,  3,  0,  4,  9,  1,  2,  0,  6, 43,  2,  8,  0,  1,
		  0, 31, 31,  9,  8,  7,  0,  7,  1, 23,  5,  1,  1,  0,  0,  0,  0,  0,  0,  0,  2,  9,  7, 38,  2,  3,  1,  3,  0,  0,  0,  0,
		  0,  0,  9, 39,  5,  0,  0,  3,  7,  0,  0,  5,  1,  2, 45, 12,  0,  1,  2,  0,  4, 72,  9,  8, 36,  0,  6,  5,  0,  0,  0,  4,
		  9, 18,  1, 29, 21,  0,  6,  0,  1,  0,  1,  6,  1, 37,  5,  0,  1,  6,  0,  0,  9,  5,  1, 31,  4,  1,  1,  0,  0,  0,  0,  9,
		 18,  1,  1,  1,  1,  0,  0, 12, 33,  1,  4,  1,  0,  0,  0, 12,  9,  0, 20,  7,  3, 16,  0,921,110,  4,195, 96,  1,1071, 15,  0,
		  5, 14,582,568, 30,  9,  1, 78,  9, 29,  4,  0, 47,  6,  4,  3,  3,  0,  0,  9,  6, 20, 18, 31, 31, 22,  3, 74,  0,  0, 54,  3,
		 12,  1,  0,  0,  0,  1,6135,1237,  8,  3,  6,  1,290,  0,  2,  0,  3,395,106, 12,  8,  9,  0,  1,  0,  3, 45, 22,115,245, 38, 59,
		  1,  2,  2,  5,  7,  7,  1,  6, 29,  3, 60, 65,  2,  0, 19, 19, 86, 24, 25, 25, 25,  6, 17, 25, 25,  0,  1,  0,  1,  3,  7,  3,
		  0,  6, 10, 25, 25,  1,  3,  7,  6, 25,  1,  3,  4,  0,  6, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 24,  0, 24,  0,
		  5, 24,  0, 24,  0,  5, 24,  0, 24,  0,  5, 24,  0, 24,  0,  5, 24,  0, 24,  0,  5,  0,  0, 49,511, 54,  3, 49,  7,  0, 13,  0,
		  1,  4,  4, 14,  9,  0, 19,  5,  6, 16,  6,  1,  4, 61,  0, 44,  6,  6,  9,  0,  0, 29,  0, 43,  3,  9,  0, 26,  0,  3,  9,  6,
		  3,  1, 14,196,  8,  6, 33, 33,  6,  0,  9,  1, 58,  0,  2,  0,  3, 44,  0, 14,  3, 26,  1,  0,  0,  9,  3,  0,  0,  0,  0,  0,
		  0,  2,  1,  0,  0,  0,  0,  0,  0,  1,  0,  3,  6,  3,  3,  0,  9, 16,  2,  4, 16,  1, 43, 99, 14, 14, 14, 36, 12,160, 28, 43,
		  8,  1,  5,250,  4,727, 16, 12,118, 94, 11,  0, 11, 55,  9, 39, 29,  1,339, 13, 12,  8, 45,  6, 13,  8,  8,146, 54,  9,42719,4153,
		221,5761,7472,621,541,4938,4191,  0, 95,239,65533,65533
	};
	static constexpr uint32_t CategoryBuf6HighStart[748] = {
		 0x10000, 0x1000d, 0x10028, 0x1003c, 0x1003f, 0x10050, 0x10080, 0x10100, 0x10107, 0x10137, 0x10140, 0x10175, 0x10179, 0x1018a, 0x1018c, 0x10190, 0x101a0, 0x101d0, 0x101fd, 0x10280, 0x102a0, 0x102e0, 0x102e1, 0x10300,
		 0x10320, 0x1032d, 0x10341, 0x10342, 0x1034a, 0x10350, 0x10376, 0x10380, 0x1039f, 0x103a0, 0x103c8, 0x103d0, 0x103d1, 0x10400, 0x10428, 0x10450, 0x104a0, 0x104b0, 0x104d8, 0x10500, 0x10530, 0x1056f, 0x10570, 0x1057c,
		 0x1058c, 0x10594, 0x10597, 0x105a3, 0x105b3, 0x105bb, 0x10600, 0x10740, 0x10760, 0x10780, 0x10787, 0x107b2, 0x10800, 0x10808, 0x1080a, 0x10837, 0x1083c, 0x1083f, 0x10857, 0x10858, 0x10860, 0x10877, 0x10879, 0x10880,
		 0x108a7, 0x108e0, 0x108f4, 0x108fb, 0x10900, 0x10916, 0x1091f, 0x10920, 0x1093f, 0x10980, 0x109bc, 0x109be, 0x109c0, 0x109d2, 0x10a00, 0x10a01, 0x10a05, 0x10a0c, 0x10a10, 0x10a15, 0x10a19, 0x10a38, 0x10a3f, 0x10a40,
		 0x10a50, 0x10a60, 0x10a7d, 0x10a7f, 0x10a80, 0x10a9d, 0x10ac0, 0x10ac8, 0x10ac9, 0x10ae5, 0x10aeb, 0x10af0, 0x10b00, 0x10b39, 0x10b40, 0x10b58, 0x10b60, 0x10b78, 0x10b80, 0x10b99, 0x10ba9, 0x10c00, 0x10c80, 0x10cc0,
		 0x10cfa, 0x10d00, 0x10d24, 0x10d30, 0x10e60, 0x10e80, 0x10eab, 0x10ead, 0x10eb0, 0x10efd, 0x10f00, 0x10f1d, 0x10f27, 0x10f30, 0x10f46, 0x10f51, 0x10f55, 0x10f70, 0x10f82, 0x10f86, 0x10fb0, 0x10fc5, 0x10fe0, 0x11000,
		 0x11001, 0x11002, 0x11003, 0x11038, 0x11047, 0x11052, 0x11066, 0x11070, 0x11071, 0x11073, 0x11075, 0x1107f, 0x11082, 0x11083, 0x110b0, 0x110b3, 0x110b7, 0x110b9, 0x110bb, 0x110bd, 0x110be, 0x110c2, 0x110cd, 0x110d0,
		 0x110f0, 0x11100, 0x11103, 0x11127, 0x1112c, 0x1112d, 0x11136, 0x11140, 0x11144, 0x11145, 0x11147, 0x11150, 0x11173, 0x11174, 0x11176, 0x11180, 0x11182, 0x11183, 0x111b3, 0x111b6, 0x111bf, 0x111c1, 0x111c5, 0x111c9,
		 0x111cd, 0x111ce, 0x111cf, 0x111d0, 0x111da, 0x111db, 0x111dc, 0x111dd, 0x111e1, 0x11200, 0x11213, 0x1122c, 0x1122f, 0x11232, 0x11234, 0x11235, 0x11236, 0x11238, 0x1123e, 0x1123f, 0x11241, 0x11280, 0x11288, 0x1128a,
		 0x1128f, 0x1129f, 0x112a9, 0x112b0, 0x112df, 0x112e0, 0x112e3, 0x112f0, 0x11300, 0x11302, 0x11305, 0x1130f, 0x11313, 0x1132a, 0x11332, 0x11335, 0x1133b, 0x1133d, 0x1133e, 0x11340, 0x11341, 0x11347, 0x1134b, 0x11350,
		 0x11357, 0x1135d, 0x11362, 0x11366, 0x11370, 0x11400, 0x11435, 0x11438, 0x11440, 0x11442, 0x11445, 0x11446, 0x11447, 0x1144b, 0x11450, 0x1145a, 0x1145d, 0x1145e, 0x1145f, 0x11480, 0x114b0, 0x114b3, 0x114b9, 0x114ba,
		 0x114bb, 0x114bf, 0x114c1, 0x114c2, 0x114c4, 0x114c6, 0x114c7, 0x114d0, 0x11580, 0x115af, 0x115b2, 0x115b8, 0x115bc, 0x115be, 0x115bf, 0x115c1, 0x115d8, 0x115dc, 0x11600, 0x11630, 0x11633, 0x1163b, 0x1163d, 0x1163e,
		 0x1163f, 0x11641, 0x11644, 0x11650, 0x11660, 0x11680, 0x116ab, 0x116ac, 0x116ad, 0x116ae, 0x116b0, 0x116b6, 0x116b7, 0x116b8, 0x116b9, 0x116c0, 0x11700, 0x1171d, 0x11720, 0x11722, 0x11726, 0x11727, 0x11730, 0x1173a,
		 0x1173c, 0x1173f, 0x11740, 0x11800, 0x1182c, 0x1182f, 0x11838, 0x11839, 0x1183b, 0x118a0, 0x118c0, 0x118e0, 0x118ea, 0x118ff, 0x11909, 0x1190c, 0x11915, 0x11918, 0x11930, 0x11937, 0x1193b, 0x1193d, 0x1193e, 0x1193f,
		 0x11940, 0x11941, 0x11942, 0x11943, 0x11944, 0x11950, 0x119a0, 0x119aa, 0x119d1, 0x119d4, 0x119da, 0x119dc, 0x119e0, 0x119e1, 0x119e2, 0x119e3, 0x119e4, 0x11a00, 0x11a01, 0x11a0b, 0x11a33, 0x11a39, 0x11a3a, 0x11a3b,
		 0x11a3f, 0x11a47, 0x11a50, 0x11a51, 0x11a57, 0x11a59, 0x11a5c, 0x11a8a, 0x11a97, 0x11a98, 0x11a9a, 0x11a9d, 0x11a9e, 0x11ab0, 0x11b00, 0x11c00, 0x11c0a, 0x11c2f, 0x11c30, 0x11c38, 0x11c3e, 0x11c3f, 0x11c40, 0x11c41,
		 0x11c50, 0x11c5a, 0x11c70, 0x11c72, 0x11c92, 0x11ca9, 0x11caa, 0x11cb1, 0x11cb2, 0x11cb4, 0x11cb5, 0x11d00, 0x11d08, 0x11d0b, 0x11d31, 0x11d3a, 0x11d3c, 0x11d3f, 0x11d46, 0x11d47, 0x11d50, 0x11d60, 0x11d67, 0x11d6a,
		 0x11d8a, 0x11d90, 0x11d93, 0x11d95, 0x11d96, 0x11d97, 0x11d98, 0x11da0, 0x11ee0, 0x11ef3, 0x11ef5, 0x11ef7, 0x11f00, 0x11f02, 0x11f03, 0x11f04, 0x11f12, 0x11f34, 0x11f36, 0x11f3e, 0x11f40, 0x11f41, 0x11f42, 0x11f43,
		 0x11f50, 0x11fb0, 0x11fc0, 0x11fd5, 0x11fdd, 0x11fe1, 0x11fff, 0x12000, 0x12400, 0x12470, 0x12480, 0x12f90, 0x12ff1, 0x13000, 0x13430, 0x13440, 0x13441, 0x13447, 0x14400, 0x16800, 0x16a40, 0x16a60, 0x16a6e, 0x16a70,
		 0x16ac0, 0x16ad0, 0x16af0, 0x16af5, 0x16b00, 0x16b30, 0x16b37, 0x16b3c, 0x16b40, 0x16b44, 0x16b45, 0x16b50, 0x16b5b, 0x16b63, 0x16b7d, 0x16e40, 0x16e60, 0x16e80, 0x16e97, 0x16f00, 0x16f4f, 0x16f50, 0x16f51, 0x16f8f,
		 0x16f93, 0x16fe0, 0x16fe2, 0x16fe3, 0x16fe4, 0x16ff0, 0x17000, 0x18800, 0x18d00, 0x1aff0, 0x1aff5, 0x1affd, 0x1b000, 0x1b132, 0x1b150, 0x1b155, 0x1b164, 0x1b170, 0x1bc00, 0x1bc70, 0x1bc80, 0x1bc90, 0x1bc9c, 0x1bc9d,
		 0x1bc9f, 0x1bca0, 0x1cf00, 0x1cf30, 0x1cf50, 0x1d000, 0x1d100, 0x1d129, 0x1d165, 0x1d167, 0x1d16a, 0x1d16d, 0x1d173, 0x1d17b, 0x1d183, 0x1d185, 0x1d18c, 0x1d1aa, 0x1d1ae, 0x1d200, 0x1d242, 0x1d245, 0x1d2c0, 0x1d2e0,
		 0x1d300, 0x1d360, 0x1d400, 0x1d41a, 0x1d434, 0x1d44e, 0x1d456, 0x1d468, 0x1d482, 0x1d49c, 0x1d49e, 0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4b6, 0x1d4bb, 0x1d4bd, 0x1d4c5, 0x1d4d0, 0x1d4ea, 0x1d504, 0x1d507, 0x1d50d,
		 0x1d516, 0x1d51e, 0x1d538, 0x1d53b, 0x1d540, 0x1d546, 0x1d54a, 0x1d552, 0x1d56c, 0x1d586, 0x1d5a0, 0x1d5ba, 0x1d5d4, 0x1d5ee, 0x1d608, 0x1d622, 0x1d63c, 0x1d656, 0x1d670, 0x1d68a, 0x1d6a8, 0x1d6c1, 0x1d6c2, 0x1d6db,
		 0x1d6dc, 0x1d6e2, 0x1d6fb, 0x1d6fc, 0x1d715, 0x1d716, 0x1d71c, 0x1d735, 0x1d736, 0x1d74f, 0x1d750, 0x1d756, 0x1d76f, 0x1d770, 0x1d789, 0x1d78a, 0x1d790, 0x1d7a9, 0x1d7aa, 0x1d7c3, 0x1d7c4, 0x1d7ca, 0x1d7cb, 0x1d7ce,
		 0x1d800, 0x1da00, 0x1da37, 0x1da3b, 0x1da6d, 0x1da75, 0x1da76, 0x1da84, 0x1da85, 0x1da87, 0x1da9b, 0x1daa1, 0x1df00, 0x1df0a, 0x1df0b, 0x1df25, 0x1e000, 0x1e008, 0x1e01b, 0x1e023, 0x1e026, 0x1e030, 0x1e08f, 0x1e100,
		 0x1e130, 0x1e137, 0x1e140, 0x1e14e, 0x1e14f, 0x1e290, 0x1e2ae, 0x1e2c0, 0x1e2ec, 0x1e2f0, 0x1e2ff, 0x1e4d0, 0x1e4eb, 0x1e4ec, 0x1e4f0, 0x1e7e0, 0x1e7e8, 0x1e7ed, 0x1e7f0, 0x1e800, 0x1e8c7, 0x1e8d0, 0x1e900, 0x1e922,
		 0x1e944, 0x1e94b, 0x1e950, 0x1e95e, 0x1ec71, 0x1ecac, 0x1ecad, 0x1ecb0, 0x1ecb1, 0x1ed01, 0x1ed2e, 0x1ed2f, 0x1ee00, 0x1ee05, 0x1ee21, 0x1ee24, 0x1ee27, 0x1ee29, 0x1ee34, 0x1ee39, 0x1ee3b, 0x1ee42, 0x1ee47, 0x1ee49,
		 0x1ee4b, 0x1ee4d, 0x1ee51, 0x1ee54, 0x1ee57, 0x1ee59, 0x1ee5b, 0x1ee5d, 0x1ee5f, 0x1ee61, 0x1ee64, 0x1ee67, 0x1ee6c, 0x1ee74, 0x1ee79, 0x1ee7e, 0x1ee80, 0x1ee8b, 0x1eea1, 0x1eea5, 0x1eeab, 0x1eef0, 0x1f000, 0x1f030,
		 0x1f0a0, 0x1f0b1, 0x1f0c1, 0x1f0d1, 0x1f100, 0x1f10d, 0x1f1e6, 0x1f210, 0x1f240, 0x1f250, 0x1f260, 0x1f300, 0x1f3fb, 0x1f400, 0x1f6dc, 0x1f6f0, 0x1f700, 0x1f77b, 0x1f7e0, 0x1f7f0, 0x1f800, 0x1f810, 0x1f850, 0x1f860,
		 0x1f890, 0x1f8b0, 0x1f900, 0x1fa60, 0x1fa70, 0x1fa80, 0x1fa90, 0x1fabf, 0x1face, 0x1fae0, 0x1faf0, 0x1fb00, 0x1fb94, 0x1fbf0, 0x20000, 0x2a700, 0x2b740, 0x2b820, 0x2ceb0, 0x2ebf0, 0x2f800, 0x30000, 0x31350, 0xe0001,
		 0xe0020, 0xe0100, 0xf0000, 0x100000
	};
	inline constexpr gen::CategoryType GetCategory(char32_t cp) {
		if (cp < 0x80) {
			if (cp >= 0x0041 && cp <= 0x005a)
				return gen::CategoryType::lu;
			if (cp >= 0x0061 && cp <= 0x007a)
				return gen::CategoryType::ll;
			if (cp >= 0x0020 && cp <= 0x002f)
				return static_cast<gen::CategoryType>(gen::CategoryBuf0AsciiCluster[cp - 32]);
			if (cp >= 0x0030 && cp <= 0x0039)
				return gen::CategoryType::nd;
			if (cp == 0x005f)
				return gen::CategoryType::pc;
			if (cp <= 0x001f || cp >= 0x007f)
				return gen::CategoryType::cc;
			if (cp == 0x005b || cp == 0x007b)
				return gen::CategoryType::ps;
			if (cp == 0x005d || cp == 0x007d)
				return gen::CategoryType::pe;
			if (cp == 0x005e || cp == 0x0060)
				return gen::CategoryType::sk;
			if (cp <= 0x003b || (cp >= 0x003f && cp <= 0x005c))
				return gen::CategoryType::po;
			return gen::CategoryType::sm;
		}
		if (cp < 0x10000) {
			size_t var1LowSizeResult = 0, var0LowIndex = gen::BinarySearch(cp, gen::CategoryBuf3LowStart);
			var1LowSizeResult = size_t(gen::CategoryBuf2LowSizeCluster[var0LowIndex]);
			if (cp - gen::CategoryBuf3LowStart[var0LowIndex] > var1LowSizeResult)
				return gen::CategoryType::ll;
			return static_cast<gen::CategoryType>(gen::CategoryBuf1LowValueCluster[var0LowIndex]);
		}
		size_t var3HighSizeResult = 0, var2HighIndex = gen::BinarySearch(cp, gen::CategoryBuf6HighStart);
		var3HighSizeResult = size_t(gen::CategoryBuf5HighSizeCluster[var2HighIndex]);
		if (cp - gen::CategoryBuf6HighStart[var2HighIndex] > var3HighSizeResult)
			return gen::CategoryType::cn;
		return static_cast<gen::CategoryType>(gen::CategoryBuf4HighValueCluster[var2HighIndex]);
	}
}
