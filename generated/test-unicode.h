#pragma once

#include <cinttypes>

/*
*	This is an automatically generated file and should not be modified
*/
namespace str::cp::detail {
	inline constexpr bool TestAscii(char32_t cp) {
		if (cp <= U'\x7f')
			return true;
		return false;
	}

	inline constexpr bool TestAlpha(char32_t cp) {
		if ((cp >= U'A' && cp <= U'Z') || (cp >= U'a' && cp <= U'z'))
			return true;
		return false;
	}

	static constexpr uint8_t DigitBuf0[75] = {
		  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,255,255,255,255,255,255,255, 10, 11, 12, 13, 14, 15, 16, 17,
		 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,255,255,255,255,255,255, 10,
		 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
	};
	inline constexpr uint8_t TestDigit(char32_t cp) {
		if (cp >= U'0' || cp <= U'z')
			return uint8_t(detail::DigitBuf0[cp - 48]);
		return 0xff;
	}

	inline constexpr bool TestWhiteSpace(char32_t cp) {
		if ((cp >= U'\t' && cp <= U'\r') || cp == U' ' || cp == U'\u0085' || cp == U'\u00a0')
			return true;
		if (cp == U'\u1680' || (cp >= U'\u2000' && cp <= U'\u200a') || cp == U'\u2028' || cp == U'\u2029')
			return true;
		if (cp == U'\u202f' || cp == U'\u205f' || cp == U'\u3000')
			return true;
		return false;
	}

	enum class PrintableType : uint8_t {
		printable,
		printSpace,
		none
	};
	inline constexpr detail::PrintableType TestPrintableAscii(char32_t cp) {
		if (cp >= U'!' && cp <= U'~')
			return detail::PrintableType::printable;
		if (cp == U' ')
			return detail::PrintableType::printSpace;
		return detail::PrintableType::none;
	}
	inline constexpr detail::PrintableType PrintableValue(char32_t cp) {
		if ((cp >= U'\x01' && cp <= U'\u00bb') || (cp >= U'\u00bd' && cp <= U'\u00f5') || cp == U'\u00f7')
			return detail::PrintableType::printable;
		if (cp == U'\u00f9' || (cp >= U'\u00fb' && cp <= U'\u0118') || cp >= U'\u011a')
			return detail::PrintableType::printable;
		return detail::PrintableType::printSpace;
	}
	static constexpr uint16_t PrintableSize[717] = {
		  0, 11,713,  5,  6,  0, 19,396, 37, 49,  2, 54, 26,  5, 21,191, 47, 58,100, 58, 48, 14, 27,  0, 10, 30, 73,160,  7,  1, 21,  6,
		  0,  3,  8,  1,  3,  0,  1,  4, 24,  2,  5,  1, 21,  6,  1,  1,  1,  0,  4,  1,  2,  0,  3,  0, 16,  2,  8,  2, 21,  6,  1,  4,
		  9,  2,  2,  0,  3, 11,  6,  2,  7,  1, 21,  6,  1,  4,  8,  1,  2,  2,  1,  4, 17,  1,  5,  2,  3,  1,  0,  1,  1,  2, 11,  4,
		  2,  3,  0,  0, 20, 12,  2, 22, 15,  8,  2,  3,  1,  2,  0,  3,  9, 21,  2, 22,  9,  4,  8,  2,  3,  1,  1,  3,  9,  2, 12,  2,
		 50,  2,  5, 15, 25,  2, 17, 23,  8,  0,  6,  0,  5,  0,  7,  9,  2, 57, 28,  1,  0,  4, 23,  0, 22,  4,  0,  6,  9,  3, 71, 35,
		 38, 35, 14, 12,197,  0,  0,376,  3,  6,  0,  3, 40,  3, 32,  3,  6,  0,  3, 14, 56,  3, 66, 31, 25, 85,  5,639,  0, 27, 88, 21,
		 23, 19, 12,  2,  1, 93,  9,  9, 13, 10, 88, 42, 69, 30, 11, 11,  0, 41,  4, 43, 25, 10, 61, 64, 28, 10,  9, 13, 30, 76, 46,115,
		 59, 14, 59, 42, 10, 42,533,  5, 37,  5,  7,  0,  0,  0, 30, 52, 14, 13,  5, 18,  2,  8, 10, 23,  0, 46,  0,  1, 26, 12, 32, 32,
		139,662, 10,1811, 31,348, 44,  0,  0, 55,  1, 23,  6,  6,  6,  6,  6,  6,  6,  6,125, 25, 88,213, 15,  0, 62, 85,102, 42, 93, 83,
		 47,29292, 54,347,183,202,  1,  0,  4, 58,  9, 55, 69, 11,115, 29, 77, 10, 32, 54, 13,  9,102, 27,  5,  5,  5,  6,  6, 59,125,  9,
		11171, 22, 48,365,105,  6,  4, 25,  4,  0,  1,  1,124,444, 53,  0, 41, 50, 18,  3,  4,134,189,  5,  5,  5,  2,  6,  6,  1, 11, 25,
		 18,  1, 14, 13,122,  2, 44, 87, 12,  0, 45, 28, 48, 27, 35, 29, 42, 29, 36, 13,157,  9, 35, 35, 39, 51, 11, 14,  6,  1, 10, 14,
		  6,  1,310, 21,  7,  5, 41,  8,  5,  0, 43,  1,  0, 22, 71,  8, 18,  1, 32, 26,  0, 55, 19, 49,  1,  7,  2, 28,  2,  9,  8, 63,
		 38, 11, 53, 28, 26, 25,  3,  6, 72, 50, 50, 45,  9, 30, 41,  2,  1, 42, 41, 25, 27, 22, 77, 35, 61,  4, 24,  9, 52, 17, 38, 95,
		 19, 17, 46,  6,  0,  3, 14, 10, 58,  9,  3,  7,  1, 21,  6,  1,  4,  9,  1,  2,  0,  0,  6,  6,  4, 91,  4, 71,  9, 53, 37, 68,
		  9, 12, 57,  9, 26, 14, 22, 59, 82,  7,  0,  7,  1, 29,  1, 11,  9,  7, 45, 10, 71, 82, 72,  9,  8, 44, 13, 28, 31, 21, 13,  6,
		  1, 43,  0,  1,  8,  9,  5,  1, 36,  1,  5,  9, 24, 16, 40, 27,  0, 49,922,110,  4,195, 98,1071, 21,582,568, 30,  9, 80,  9, 29,
		  5, 69,  9,  6, 20, 18, 90, 74, 56, 16,  4,  1,6135,1237,  8,  3,  6,  1,290,  0,  2,  0,  3,395,106, 12,  8,  9,  3, 45, 22,115,
		245, 38, 73,111, 69, 19, 19, 86, 24, 84, 70,  1,  0,  1,  3, 11,  0,  6, 64,  3,  7,  6, 27,  3,  4,  0,  6,339,291,701,  4, 14,
		 30,  5,  6, 16,  6,  1,  4, 61,  0, 44, 13,  9,  1, 30, 57,  0, 41,  6,  3,  1, 14,196, 15, 75,  9,  1, 67, 60,  3, 26,  1,  0,
		  0,  9,  3,  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,  0,  0,  1,  0,  3,  6,  3,  3,  0,  9, 16,  2,  4, 16,  1, 43, 99,
		 14, 14, 14, 36,173, 28, 43,  8,  1,  5,983, 16, 12,118, 94, 11,  0, 11, 55,  9, 39, 29,  1,339, 13, 12,  8, 45,  6, 13,  8,  8,
		146, 54,  9,42719,4153,221,5761,7472,621,541,4938,4191,239
	};
	static constexpr uint32_t PrintableStart[717] = {
		 0x000a0, 0x000a1, 0x000ae, 0x0037a, 0x00384, 0x0038c, 0x0038e, 0x003a3, 0x00531, 0x00559, 0x0058d, 0x00591, 0x005d0, 0x005ef, 0x00606, 0x0061d, 0x006de, 0x00710, 0x0074d, 0x007c0, 0x007fd, 0x00830, 0x00840, 0x0085e,
		 0x00860, 0x00870, 0x00898, 0x008e3, 0x00985, 0x0098f, 0x00993, 0x009aa, 0x009b2, 0x009b6, 0x009bc, 0x009c7, 0x009cb, 0x009d7, 0x009dc, 0x009df, 0x009e6, 0x00a01, 0x00a05, 0x00a0f, 0x00a13, 0x00a2a, 0x00a32, 0x00a35,
		 0x00a38, 0x00a3c, 0x00a3e, 0x00a47, 0x00a4b, 0x00a51, 0x00a59, 0x00a5e, 0x00a66, 0x00a81, 0x00a85, 0x00a8f, 0x00a93, 0x00aaa, 0x00ab2, 0x00ab5, 0x00abc, 0x00ac7, 0x00acb, 0x00ad0, 0x00ae0, 0x00ae6, 0x00af9, 0x00b01,
		 0x00b05, 0x00b0f, 0x00b13, 0x00b2a, 0x00b32, 0x00b35, 0x00b3c, 0x00b47, 0x00b4b, 0x00b55, 0x00b5c, 0x00b5f, 0x00b66, 0x00b82, 0x00b85, 0x00b8e, 0x00b92, 0x00b99, 0x00b9c, 0x00b9e, 0x00ba3, 0x00ba8, 0x00bae, 0x00bbe,
		 0x00bc6, 0x00bca, 0x00bd0, 0x00bd7, 0x00be6, 0x00c00, 0x00c0e, 0x00c12, 0x00c2a, 0x00c3c, 0x00c46, 0x00c4a, 0x00c55, 0x00c58, 0x00c5d, 0x00c60, 0x00c66, 0x00c77, 0x00c8e, 0x00c92, 0x00caa, 0x00cb5, 0x00cbc, 0x00cc6,
		 0x00cca, 0x00cd5, 0x00cdd, 0x00ce0, 0x00ce6, 0x00cf1, 0x00d00, 0x00d0e, 0x00d12, 0x00d46, 0x00d4a, 0x00d54, 0x00d66, 0x00d81, 0x00d85, 0x00d9a, 0x00db3, 0x00dbd, 0x00dc0, 0x00dca, 0x00dcf, 0x00dd6, 0x00dd8, 0x00de6,
		 0x00df2, 0x00e01, 0x00e3f, 0x00e81, 0x00e84, 0x00e86, 0x00e8c, 0x00ea5, 0x00ea7, 0x00ec0, 0x00ec6, 0x00ec8, 0x00ed0, 0x00edc, 0x00f00, 0x00f49, 0x00f71, 0x00f99, 0x00fbe, 0x00fce, 0x01000, 0x010c7, 0x010cd, 0x010d0,
		 0x0124a, 0x01250, 0x01258, 0x0125a, 0x01260, 0x0128a, 0x01290, 0x012b2, 0x012b8, 0x012c0, 0x012c2, 0x012c8, 0x012d8, 0x01312, 0x01318, 0x0135d, 0x01380, 0x013a0, 0x013f8, 0x01400, 0x01680, 0x01681, 0x016a0, 0x01700,
		 0x0171f, 0x01740, 0x01760, 0x0176e, 0x01772, 0x01780, 0x017e0, 0x017f0, 0x01800, 0x0180f, 0x01820, 0x01880, 0x018b0, 0x01900, 0x01920, 0x01930, 0x01940, 0x01944, 0x01970, 0x01980, 0x019b0, 0x019d0, 0x019de, 0x01a1e,
		 0x01a60, 0x01a7f, 0x01a90, 0x01aa0, 0x01ab0, 0x01b00, 0x01b50, 0x01b80, 0x01bfc, 0x01c3b, 0x01c4d, 0x01c90, 0x01cbd, 0x01cd0, 0x01d00, 0x01f18, 0x01f20, 0x01f48, 0x01f50, 0x01f59, 0x01f5b, 0x01f5d, 0x01f5f, 0x01f80,
		 0x01fb6, 0x01fc6, 0x01fd6, 0x01fdd, 0x01ff2, 0x01ff6, 0x02000, 0x02010, 0x0202f, 0x02030, 0x0205f, 0x02070, 0x02074, 0x02090, 0x020a0, 0x020d0, 0x02100, 0x02190, 0x02440, 0x02460, 0x02b76, 0x02b97, 0x02cf9, 0x02d27,
		 0x02d2d, 0x02d30, 0x02d6f, 0x02d7f, 0x02da0, 0x02da8, 0x02db0, 0x02db8, 0x02dc0, 0x02dc8, 0x02dd0, 0x02dd8, 0x02de0, 0x02e80, 0x02e9b, 0x02f00, 0x02ff0, 0x03000, 0x03001, 0x03041, 0x03099, 0x03105, 0x03131, 0x03190,
		 0x031ef, 0x03220, 0x0a490, 0x0a4d0, 0x0a640, 0x0a700, 0x0a7d0, 0x0a7d3, 0x0a7d5, 0x0a7f2, 0x0a830, 0x0a840, 0x0a880, 0x0a8ce, 0x0a8e0, 0x0a95f, 0x0a980, 0x0a9cf, 0x0a9de, 0x0aa00, 0x0aa40, 0x0aa50, 0x0aa5c, 0x0aadb,
		 0x0ab01, 0x0ab09, 0x0ab11, 0x0ab20, 0x0ab28, 0x0ab30, 0x0ab70, 0x0abf0, 0x0ac00, 0x0d7b0, 0x0d7cb, 0x0f900, 0x0fa70, 0x0fb00, 0x0fb13, 0x0fb1d, 0x0fb38, 0x0fb3e, 0x0fb40, 0x0fb43, 0x0fb46, 0x0fbd3, 0x0fd92, 0x0fdcf,
		 0x0fdf0, 0x0fe20, 0x0fe54, 0x0fe68, 0x0fe70, 0x0fe76, 0x0ff01, 0x0ffc2, 0x0ffca, 0x0ffd2, 0x0ffda, 0x0ffe0, 0x0ffe8, 0x0fffc, 0x10000, 0x1000d, 0x10028, 0x1003c, 0x1003f, 0x10050, 0x10080, 0x10100, 0x10107, 0x10137,
		 0x10190, 0x101a0, 0x101d0, 0x10280, 0x102a0, 0x102e0, 0x10300, 0x1032d, 0x10350, 0x10380, 0x1039f, 0x103c8, 0x10400, 0x104a0, 0x104b0, 0x104d8, 0x10500, 0x10530, 0x1056f, 0x1057c, 0x1058c, 0x10594, 0x10597, 0x105a3,
		 0x105b3, 0x105bb, 0x10600, 0x10740, 0x10760, 0x10780, 0x10787, 0x107b2, 0x10800, 0x10808, 0x1080a, 0x10837, 0x1083c, 0x1083f, 0x10857, 0x108a7, 0x108e0, 0x108f4, 0x108fb, 0x1091f, 0x1093f, 0x10980, 0x109bc, 0x109d2,
		 0x10a05, 0x10a0c, 0x10a15, 0x10a19, 0x10a38, 0x10a3f, 0x10a50, 0x10a60, 0x10ac0, 0x10aeb, 0x10b00, 0x10b39, 0x10b58, 0x10b78, 0x10b99, 0x10ba9, 0x10c00, 0x10c80, 0x10cc0, 0x10cfa, 0x10d30, 0x10e60, 0x10e80, 0x10eab,
		 0x10eb0, 0x10efd, 0x10f30, 0x10f70, 0x10fb0, 0x10fe0, 0x11000, 0x11052, 0x1107f, 0x110be, 0x110d0, 0x110f0, 0x11100, 0x11136, 0x11150, 0x11180, 0x111e1, 0x11200, 0x11213, 0x11280, 0x11288, 0x1128a, 0x1128f, 0x1129f,
		 0x112b0, 0x112f0, 0x11300, 0x11305, 0x1130f, 0x11313, 0x1132a, 0x11332, 0x11335, 0x1133b, 0x11347, 0x1134b, 0x11350, 0x11357, 0x1135d, 0x11366, 0x11370, 0x11400, 0x1145d, 0x11480, 0x114d0, 0x11580, 0x115b8, 0x11600,
		 0x11650, 0x11660, 0x11680, 0x116c0, 0x11700, 0x1171d, 0x11730, 0x11800, 0x118a0, 0x118ff, 0x11909, 0x1190c, 0x11915, 0x11918, 0x11937, 0x1193b, 0x11950, 0x119a0, 0x119aa, 0x119da, 0x11a00, 0x11a50, 0x11ab0, 0x11b00,
		 0x11c00, 0x11c0a, 0x11c38, 0x11c50, 0x11c70, 0x11c92, 0x11ca9, 0x11d00, 0x11d08, 0x11d0b, 0x11d3a, 0x11d3c, 0x11d3f, 0x11d50, 0x11d60, 0x11d67, 0x11d6a, 0x11d90, 0x11d93, 0x11da0, 0x11ee0, 0x11f00, 0x11f12, 0x11f3e,
		 0x11fb0, 0x11fc0, 0x11fff, 0x12400, 0x12470, 0x12480, 0x12f90, 0x13000, 0x13440, 0x14400, 0x16800, 0x16a40, 0x16a60, 0x16a6e, 0x16ac0, 0x16ad0, 0x16af0, 0x16b00, 0x16b50, 0x16b5b, 0x16b63, 0x16b7d, 0x16e40, 0x16f00,
		 0x16f4f, 0x16f8f, 0x16fe0, 0x16ff0, 0x17000, 0x18800, 0x18d00, 0x1aff0, 0x1aff5, 0x1affd, 0x1b000, 0x1b132, 0x1b150, 0x1b155, 0x1b164, 0x1b170, 0x1bc00, 0x1bc70, 0x1bc80, 0x1bc90, 0x1bc9c, 0x1cf00, 0x1cf30, 0x1cf50,
		 0x1d000, 0x1d100, 0x1d129, 0x1d17b, 0x1d200, 0x1d2c0, 0x1d2e0, 0x1d300, 0x1d360, 0x1d400, 0x1d456, 0x1d49e, 0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4bb, 0x1d4bd, 0x1d4c5, 0x1d507, 0x1d50d, 0x1d516, 0x1d51e, 0x1d53b,
		 0x1d540, 0x1d546, 0x1d54a, 0x1d552, 0x1d6a8, 0x1d7ce, 0x1da9b, 0x1daa1, 0x1df00, 0x1df25, 0x1e000, 0x1e008, 0x1e01b, 0x1e023, 0x1e026, 0x1e030, 0x1e08f, 0x1e100, 0x1e130, 0x1e140, 0x1e14e, 0x1e290, 0x1e2c0, 0x1e2ff,
		 0x1e4d0, 0x1e7e0, 0x1e7e8, 0x1e7ed, 0x1e7f0, 0x1e800, 0x1e8c7, 0x1e900, 0x1e950, 0x1e95e, 0x1ec71, 0x1ed01, 0x1ee00, 0x1ee05, 0x1ee21, 0x1ee24, 0x1ee27, 0x1ee29, 0x1ee34, 0x1ee39, 0x1ee3b, 0x1ee42, 0x1ee47, 0x1ee49,
		 0x1ee4b, 0x1ee4d, 0x1ee51, 0x1ee54, 0x1ee57, 0x1ee59, 0x1ee5b, 0x1ee5d, 0x1ee5f, 0x1ee61, 0x1ee64, 0x1ee67, 0x1ee6c, 0x1ee74, 0x1ee79, 0x1ee7e, 0x1ee80, 0x1ee8b, 0x1eea1, 0x1eea5, 0x1eeab, 0x1eef0, 0x1f000, 0x1f030,
		 0x1f0a0, 0x1f0b1, 0x1f0c1, 0x1f0d1, 0x1f100, 0x1f1e6, 0x1f210, 0x1f240, 0x1f250, 0x1f260, 0x1f300, 0x1f6dc, 0x1f6f0, 0x1f700, 0x1f77b, 0x1f7e0, 0x1f7f0, 0x1f800, 0x1f810, 0x1f850, 0x1f860, 0x1f890, 0x1f8b0, 0x1f900,
		 0x1fa60, 0x1fa70, 0x1fa80, 0x1fa90, 0x1fabf, 0x1face, 0x1fae0, 0x1faf0, 0x1fb00, 0x1fb94, 0x1fbf0, 0x20000, 0x2a700, 0x2b740, 0x2b820, 0x2ceb0, 0x2ebf0, 0x2f800, 0x30000, 0x31350, 0xe0100
	};
	inline constexpr detail::PrintableType TestPrintableBinSearch(char32_t cp) {
		size_t left = 0, right = 716;
		while (left < right) {
			size_t center = (right - left) / 2;
			if (cp < detail::PrintableStart[center])
				right = center - 1;
			else
				left = center;
		}

		if (cp - detail::PrintableStart[left] > detail::PrintableSize[left])
			return detail::PrintableType::none;
		return detail::PrintableValue(left);
	}
	inline constexpr detail::PrintableType TestPrintable(char32_t cp) {
		if (cp < 0x80)
			return detail::TestPrintableAscii(cp);
		return detail::TestPrintableBinSearch(cp);
	}

	inline constexpr bool TestControl(char32_t cp) {
		if ((cp >= U' ' && cp <= U'~') || cp >= U'\u00a0')
			return false;
		return true;
	}
}
