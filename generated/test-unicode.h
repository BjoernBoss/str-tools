#pragma once

#include <cinttypes>

/*
*	This is an automatically generated file and should not be modified
*/
namespace str::cp::detail {
	inline constexpr bool TestAscii(char32_t cp) {
		if (cp <= U'\x7f')
			return true;
		return false;
	}

	inline constexpr bool TestAlpha(char32_t cp) {
		if ((cp >= U'A' && cp <= U'Z') || (cp >= U'a' && cp <= U'z'))
			return true;
		return false;
	}

	static constexpr uint8_t DigitBuf0[75] = {
		  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,255,255,255,255,255,255,255, 10, 11, 12, 13, 14, 15, 16, 17,
		 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,255,255,255,255,255,255, 10,
		 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
	};
	inline constexpr uint8_t TestDigit(char32_t cp) {
		if (cp >= U'0' || cp <= U'z')
			return uint8_t(detail::DigitBuf0[cp - 48]);
		return 0xff;
	}

	inline constexpr bool TestWhiteSpace(char32_t cp) {
		if ((cp >= U'\t' && cp <= U'\r') || cp == U' ' || cp == U'\u0085' || cp == U'\u00a0')
			return true;
		if (cp == U'\u1680' || (cp >= U'\u2000' && cp <= U'\u200a') || cp == U'\u2028' || cp == U'\u2029')
			return true;
		if (cp == U'\u202f' || cp == U'\u205f' || cp == U'\u3000')
			return true;
		return false;
	}

	inline constexpr bool TestControl(char32_t cp) {
		if ((cp >= U' ' && cp <= U'~') || cp >= U'\u00a0')
			return false;
		return true;
	}

	enum class PrintableType : uint8_t {
		none,
		printable,
		printSpace
	};
	inline constexpr detail::PrintableType PrintableAscii(char32_t cp) {
		if (cp >= U'!' && cp <= U'~')
			return detail::PrintableType::printable;
		if (cp == U' ')
			return detail::PrintableType::printSpace;
		return detail::PrintableType::none;
	}
	inline constexpr detail::PrintableType PrintableLowValue(char32_t cp) {
		if ((cp >= U'\x01' && cp <= U'\u00bb') || (cp >= U'\u00bd' && cp <= U'\u00f5') || cp == U'\u00f7')
			return detail::PrintableType::printable;
		if (cp == U'\u00f9' || (cp >= U'\u00fb' && cp <= U'\u0118') || cp >= U'\u011a')
			return detail::PrintableType::printable;
		return detail::PrintableType::printSpace;
	}
	static constexpr uint16_t PrintableLowSize[350] = {
		  0, 11,713,  5,  6,  0, 19,396, 37, 49,  2, 54, 26,  5, 21,191, 47, 58,100, 58, 48, 14, 27,  0, 10, 30, 73,160,  7,  1, 21,  6,
		  0,  3,  8,  1,  3,  0,  1,  4, 24,  2,  5,  1, 21,  6,  1,  1,  1,  0,  4,  1,  2,  0,  3,  0, 16,  2,  8,  2, 21,  6,  1,  4,
		  9,  2,  2,  0,  3, 11,  6,  2,  7,  1, 21,  6,  1,  4,  8,  1,  2,  2,  1,  4, 17,  1,  5,  2,  3,  1,  0,  1,  1,  2, 11,  4,
		  2,  3,  0,  0, 20, 12,  2, 22, 15,  8,  2,  3,  1,  2,  0,  3,  9, 21,  2, 22,  9,  4,  8,  2,  3,  1,  1,  3,  9,  2, 12,  2,
		 50,  2,  5, 15, 25,  2, 17, 23,  8,  0,  6,  0,  5,  0,  7,  9,  2, 57, 28,  1,  0,  4, 23,  0, 22,  4,  0,  6,  9,  3, 71, 35,
		 38, 35, 14, 12,197,  0,  0,376,  3,  6,  0,  3, 40,  3, 32,  3,  6,  0,  3, 14, 56,  3, 66, 31, 25, 85,  5,639,  0, 27, 88, 21,
		 23, 19, 12,  2,  1, 93,  9,  9, 13, 10, 88, 42, 69, 30, 11, 11,  0, 41,  4, 43, 25, 10, 61, 64, 28, 10,  9, 13, 30, 76, 46,115,
		 59, 14, 59, 42, 10, 42,533,  5, 37,  5,  7,  0,  0,  0, 30, 52, 14, 13,  5, 18,  2,  8, 10, 23,  0, 46,  0,  1, 26, 12, 32, 32,
		139,662, 10,1811, 31,348, 44,  0,  0, 55,  1, 23,  6,  6,  6,  6,  6,  6,  6,  6,125, 25, 88,213, 15,  0, 62, 85,102, 42, 93, 83,
		 47,29292, 54,347,183,202,  1,  0,  4, 58,  9, 55, 69, 11,115, 29, 77, 10, 32, 54, 13,  9,102, 27,  5,  5,  5,  6,  6, 59,125,  9,
		11171, 22, 48,365,105,  6,  4, 25,  4,  0,  1,  1,124,444, 53,  0, 41, 50, 18,  3,  4,134,189,  5,  5,  5,  2,  6,  6,  1
	};
	static constexpr uint16_t PrintableLowStart[350] = {
		 0x00a0, 0x00a1, 0x00ae, 0x037a, 0x0384, 0x038c, 0x038e, 0x03a3, 0x0531, 0x0559, 0x058d, 0x0591, 0x05d0, 0x05ef, 0x0606, 0x061d, 0x06de, 0x0710, 0x074d, 0x07c0, 0x07fd, 0x0830, 0x0840, 0x085e,
		 0x0860, 0x0870, 0x0898, 0x08e3, 0x0985, 0x098f, 0x0993, 0x09aa, 0x09b2, 0x09b6, 0x09bc, 0x09c7, 0x09cb, 0x09d7, 0x09dc, 0x09df, 0x09e6, 0x0a01, 0x0a05, 0x0a0f, 0x0a13, 0x0a2a, 0x0a32, 0x0a35,
		 0x0a38, 0x0a3c, 0x0a3e, 0x0a47, 0x0a4b, 0x0a51, 0x0a59, 0x0a5e, 0x0a66, 0x0a81, 0x0a85, 0x0a8f, 0x0a93, 0x0aaa, 0x0ab2, 0x0ab5, 0x0abc, 0x0ac7, 0x0acb, 0x0ad0, 0x0ae0, 0x0ae6, 0x0af9, 0x0b01,
		 0x0b05, 0x0b0f, 0x0b13, 0x0b2a, 0x0b32, 0x0b35, 0x0b3c, 0x0b47, 0x0b4b, 0x0b55, 0x0b5c, 0x0b5f, 0x0b66, 0x0b82, 0x0b85, 0x0b8e, 0x0b92, 0x0b99, 0x0b9c, 0x0b9e, 0x0ba3, 0x0ba8, 0x0bae, 0x0bbe,
		 0x0bc6, 0x0bca, 0x0bd0, 0x0bd7, 0x0be6, 0x0c00, 0x0c0e, 0x0c12, 0x0c2a, 0x0c3c, 0x0c46, 0x0c4a, 0x0c55, 0x0c58, 0x0c5d, 0x0c60, 0x0c66, 0x0c77, 0x0c8e, 0x0c92, 0x0caa, 0x0cb5, 0x0cbc, 0x0cc6,
		 0x0cca, 0x0cd5, 0x0cdd, 0x0ce0, 0x0ce6, 0x0cf1, 0x0d00, 0x0d0e, 0x0d12, 0x0d46, 0x0d4a, 0x0d54, 0x0d66, 0x0d81, 0x0d85, 0x0d9a, 0x0db3, 0x0dbd, 0x0dc0, 0x0dca, 0x0dcf, 0x0dd6, 0x0dd8, 0x0de6,
		 0x0df2, 0x0e01, 0x0e3f, 0x0e81, 0x0e84, 0x0e86, 0x0e8c, 0x0ea5, 0x0ea7, 0x0ec0, 0x0ec6, 0x0ec8, 0x0ed0, 0x0edc, 0x0f00, 0x0f49, 0x0f71, 0x0f99, 0x0fbe, 0x0fce, 0x1000, 0x10c7, 0x10cd, 0x10d0,
		 0x124a, 0x1250, 0x1258, 0x125a, 0x1260, 0x128a, 0x1290, 0x12b2, 0x12b8, 0x12c0, 0x12c2, 0x12c8, 0x12d8, 0x1312, 0x1318, 0x135d, 0x1380, 0x13a0, 0x13f8, 0x1400, 0x1680, 0x1681, 0x16a0, 0x1700,
		 0x171f, 0x1740, 0x1760, 0x176e, 0x1772, 0x1780, 0x17e0, 0x17f0, 0x1800, 0x180f, 0x1820, 0x1880, 0x18b0, 0x1900, 0x1920, 0x1930, 0x1940, 0x1944, 0x1970, 0x1980, 0x19b0, 0x19d0, 0x19de, 0x1a1e,
		 0x1a60, 0x1a7f, 0x1a90, 0x1aa0, 0x1ab0, 0x1b00, 0x1b50, 0x1b80, 0x1bfc, 0x1c3b, 0x1c4d, 0x1c90, 0x1cbd, 0x1cd0, 0x1d00, 0x1f18, 0x1f20, 0x1f48, 0x1f50, 0x1f59, 0x1f5b, 0x1f5d, 0x1f5f, 0x1f80,
		 0x1fb6, 0x1fc6, 0x1fd6, 0x1fdd, 0x1ff2, 0x1ff6, 0x2000, 0x2010, 0x202f, 0x2030, 0x205f, 0x2070, 0x2074, 0x2090, 0x20a0, 0x20d0, 0x2100, 0x2190, 0x2440, 0x2460, 0x2b76, 0x2b97, 0x2cf9, 0x2d27,
		 0x2d2d, 0x2d30, 0x2d6f, 0x2d7f, 0x2da0, 0x2da8, 0x2db0, 0x2db8, 0x2dc0, 0x2dc8, 0x2dd0, 0x2dd8, 0x2de0, 0x2e80, 0x2e9b, 0x2f00, 0x2ff0, 0x3000, 0x3001, 0x3041, 0x3099, 0x3105, 0x3131, 0x3190,
		 0x31ef, 0x3220, 0xa490, 0xa4d0, 0xa640, 0xa700, 0xa7d0, 0xa7d3, 0xa7d5, 0xa7f2, 0xa830, 0xa840, 0xa880, 0xa8ce, 0xa8e0, 0xa95f, 0xa980, 0xa9cf, 0xa9de, 0xaa00, 0xaa40, 0xaa50, 0xaa5c, 0xaadb,
		 0xab01, 0xab09, 0xab11, 0xab20, 0xab28, 0xab30, 0xab70, 0xabf0, 0xac00, 0xd7b0, 0xd7cb, 0xf900, 0xfa70, 0xfb00, 0xfb13, 0xfb1d, 0xfb38, 0xfb3e, 0xfb40, 0xfb43, 0xfb46, 0xfbd3, 0xfd92, 0xfdcf,
		 0xfdf0, 0xfe20, 0xfe54, 0xfe68, 0xfe70, 0xfe76, 0xff01, 0xffc2, 0xffca, 0xffd2, 0xffda, 0xffe0, 0xffe8, 0xfffc
	};
	inline constexpr detail::PrintableType PrintableLow(char32_t cp) {
		size_t left = 0, right = 349;
		while (left < right) {
			size_t center = (right - left) / 2;
			if (cp < detail::PrintableLowStart[center])
				right = center - 1;
			else
				left = center;
		}
		if (cp - detail::PrintableLowStart[left] > detail::PrintableLowSize[left])
			return detail::PrintableType::none;
		return detail::PrintableLowValue(left);
	}
	inline constexpr detail::PrintableType PrintableHighValue(char32_t cp) {
		return detail::PrintableType::printable;
	}
	static constexpr uint16_t PrintableHighSize[367] = {
		 11, 25, 18,  1, 14, 13,122,  2, 44, 87, 12,  0, 45, 28, 48, 27, 35, 29, 42, 29, 36, 13,157,  9, 35, 35, 39, 51, 11, 14,  6,
		  1, 10, 14,  6,  1,310, 21,  7,  5, 41,  8,  5,  0, 43,  1,  0, 22, 71,  8, 18,  1, 32, 26,  0, 55, 19, 49,  1,  7,  2, 28,
		  2,  9,  8, 63, 38, 11, 53, 28, 26, 25,  3,  6, 72, 50, 50, 45,  9, 30, 41,  2,  1, 42, 41, 25, 27, 22, 77, 35, 61,  4, 24,
		  9, 52, 17, 38, 95, 19, 17, 46,  6,  0,  3, 14, 10, 58,  9,  3,  7,  1, 21,  6,  1,  4,  9,  1,  2,  0,  0,  6,  6,  4, 91,
		  4, 71,  9, 53, 37, 68,  9, 12, 57,  9, 26, 14, 22, 59, 82,  7,  0,  7,  1, 29,  1, 11,  9,  7, 45, 10, 71, 82, 72,  9,  8,
		 44, 13, 28, 31, 21, 13,  6,  1, 43,  0,  1,  8,  9,  5,  1, 36,  1,  5,  9, 24, 16, 40, 27,  0, 49,922,110,  4,195, 98,1071,
		 21,582,568, 30,  9, 80,  9, 29,  5, 69,  9,  6, 20, 18, 90, 74, 56, 16,  4,  1,6135,1237,  8,  3,  6,  1,290,  0,  2,  0,  3,
		395,106, 12,  8,  9,  3, 45, 22,115,245, 38, 73,111, 69, 19, 19, 86, 24, 84, 70,  1,  0,  1,  3, 11,  0,  6, 64,  3,  7,  6,
		 27,  3,  4,  0,  6,339,291,701,  4, 14, 30,  5,  6, 16,  6,  1,  4, 61,  0, 44, 13,  9,  1, 30, 57,  0, 41,  6,  3,  1, 14,
		196, 15, 75,  9,  1, 67, 60,  3, 26,  1,  0,  0,  9,  3,  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,  0,  0,  1,  0,  3,
		  6,  3,  3,  0,  9, 16,  2,  4, 16,  1, 43, 99, 14, 14, 14, 36,173, 28, 43,  8,  1,  5,983, 16, 12,118, 94, 11,  0, 11, 55,
		  9, 39, 29,  1,339, 13, 12,  8, 45,  6, 13,  8,  8,146, 54,  9,42719,4153,221,5761,7472,621,541,4938,4191,239
	};
	static constexpr uint32_t PrintableHighStart[367] = {
		 0x10000, 0x1000d, 0x10028, 0x1003c, 0x1003f, 0x10050, 0x10080, 0x10100, 0x10107, 0x10137, 0x10190, 0x101a0, 0x101d0, 0x10280, 0x102a0, 0x102e0, 0x10300, 0x1032d, 0x10350, 0x10380, 0x1039f, 0x103c8, 0x10400,
		 0x104a0, 0x104b0, 0x104d8, 0x10500, 0x10530, 0x1056f, 0x1057c, 0x1058c, 0x10594, 0x10597, 0x105a3, 0x105b3, 0x105bb, 0x10600, 0x10740, 0x10760, 0x10780, 0x10787, 0x107b2, 0x10800, 0x10808, 0x1080a, 0x10837,
		 0x1083c, 0x1083f, 0x10857, 0x108a7, 0x108e0, 0x108f4, 0x108fb, 0x1091f, 0x1093f, 0x10980, 0x109bc, 0x109d2, 0x10a05, 0x10a0c, 0x10a15, 0x10a19, 0x10a38, 0x10a3f, 0x10a50, 0x10a60, 0x10ac0, 0x10aeb, 0x10b00,
		 0x10b39, 0x10b58, 0x10b78, 0x10b99, 0x10ba9, 0x10c00, 0x10c80, 0x10cc0, 0x10cfa, 0x10d30, 0x10e60, 0x10e80, 0x10eab, 0x10eb0, 0x10efd, 0x10f30, 0x10f70, 0x10fb0, 0x10fe0, 0x11000, 0x11052, 0x1107f, 0x110be,
		 0x110d0, 0x110f0, 0x11100, 0x11136, 0x11150, 0x11180, 0x111e1, 0x11200, 0x11213, 0x11280, 0x11288, 0x1128a, 0x1128f, 0x1129f, 0x112b0, 0x112f0, 0x11300, 0x11305, 0x1130f, 0x11313, 0x1132a, 0x11332, 0x11335,
		 0x1133b, 0x11347, 0x1134b, 0x11350, 0x11357, 0x1135d, 0x11366, 0x11370, 0x11400, 0x1145d, 0x11480, 0x114d0, 0x11580, 0x115b8, 0x11600, 0x11650, 0x11660, 0x11680, 0x116c0, 0x11700, 0x1171d, 0x11730, 0x11800,
		 0x118a0, 0x118ff, 0x11909, 0x1190c, 0x11915, 0x11918, 0x11937, 0x1193b, 0x11950, 0x119a0, 0x119aa, 0x119da, 0x11a00, 0x11a50, 0x11ab0, 0x11b00, 0x11c00, 0x11c0a, 0x11c38, 0x11c50, 0x11c70, 0x11c92, 0x11ca9,
		 0x11d00, 0x11d08, 0x11d0b, 0x11d3a, 0x11d3c, 0x11d3f, 0x11d50, 0x11d60, 0x11d67, 0x11d6a, 0x11d90, 0x11d93, 0x11da0, 0x11ee0, 0x11f00, 0x11f12, 0x11f3e, 0x11fb0, 0x11fc0, 0x11fff, 0x12400, 0x12470, 0x12480,
		 0x12f90, 0x13000, 0x13440, 0x14400, 0x16800, 0x16a40, 0x16a60, 0x16a6e, 0x16ac0, 0x16ad0, 0x16af0, 0x16b00, 0x16b50, 0x16b5b, 0x16b63, 0x16b7d, 0x16e40, 0x16f00, 0x16f4f, 0x16f8f, 0x16fe0, 0x16ff0, 0x17000,
		 0x18800, 0x18d00, 0x1aff0, 0x1aff5, 0x1affd, 0x1b000, 0x1b132, 0x1b150, 0x1b155, 0x1b164, 0x1b170, 0x1bc00, 0x1bc70, 0x1bc80, 0x1bc90, 0x1bc9c, 0x1cf00, 0x1cf30, 0x1cf50, 0x1d000, 0x1d100, 0x1d129, 0x1d17b,
		 0x1d200, 0x1d2c0, 0x1d2e0, 0x1d300, 0x1d360, 0x1d400, 0x1d456, 0x1d49e, 0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4bb, 0x1d4bd, 0x1d4c5, 0x1d507, 0x1d50d, 0x1d516, 0x1d51e, 0x1d53b, 0x1d540, 0x1d546, 0x1d54a,
		 0x1d552, 0x1d6a8, 0x1d7ce, 0x1da9b, 0x1daa1, 0x1df00, 0x1df25, 0x1e000, 0x1e008, 0x1e01b, 0x1e023, 0x1e026, 0x1e030, 0x1e08f, 0x1e100, 0x1e130, 0x1e140, 0x1e14e, 0x1e290, 0x1e2c0, 0x1e2ff, 0x1e4d0, 0x1e7e0,
		 0x1e7e8, 0x1e7ed, 0x1e7f0, 0x1e800, 0x1e8c7, 0x1e900, 0x1e950, 0x1e95e, 0x1ec71, 0x1ed01, 0x1ee00, 0x1ee05, 0x1ee21, 0x1ee24, 0x1ee27, 0x1ee29, 0x1ee34, 0x1ee39, 0x1ee3b, 0x1ee42, 0x1ee47, 0x1ee49, 0x1ee4b,
		 0x1ee4d, 0x1ee51, 0x1ee54, 0x1ee57, 0x1ee59, 0x1ee5b, 0x1ee5d, 0x1ee5f, 0x1ee61, 0x1ee64, 0x1ee67, 0x1ee6c, 0x1ee74, 0x1ee79, 0x1ee7e, 0x1ee80, 0x1ee8b, 0x1eea1, 0x1eea5, 0x1eeab, 0x1eef0, 0x1f000, 0x1f030,
		 0x1f0a0, 0x1f0b1, 0x1f0c1, 0x1f0d1, 0x1f100, 0x1f1e6, 0x1f210, 0x1f240, 0x1f250, 0x1f260, 0x1f300, 0x1f6dc, 0x1f6f0, 0x1f700, 0x1f77b, 0x1f7e0, 0x1f7f0, 0x1f800, 0x1f810, 0x1f850, 0x1f860, 0x1f890, 0x1f8b0,
		 0x1f900, 0x1fa60, 0x1fa70, 0x1fa80, 0x1fa90, 0x1fabf, 0x1face, 0x1fae0, 0x1faf0, 0x1fb00, 0x1fb94, 0x1fbf0, 0x20000, 0x2a700, 0x2b740, 0x2b820, 0x2ceb0, 0x2ebf0, 0x2f800, 0x30000, 0x31350, 0xe0100
	};
	inline constexpr detail::PrintableType PrintableHigh(char32_t cp) {
		size_t left = 0, right = 366;
		while (left < right) {
			size_t center = (right - left) / 2;
			if (cp < detail::PrintableHighStart[center])
				right = center - 1;
			else
				left = center;
		}
		if (cp - detail::PrintableHighStart[left] > detail::PrintableHighSize[left])
			return detail::PrintableType::none;
		return detail::PrintableHighValue(left);
	}
	inline constexpr detail::PrintableType GetPrintable(char32_t cp) {
		if (cp < 0x80)
			return detail::PrintableAscii(cp);
		if (cp < 0x10000)
			return detail::PrintableLow(cp);
		return detail::PrintableHigh(cp);
	}

	enum class CaseType : uint8_t {
		none,
		lowerCase,
		upperCase,
		titleCase
	};
	inline constexpr detail::CaseType CaseAscii(char32_t cp) {
		if (cp >= U'a' && cp <= U'z')
			return detail::CaseType::lowerCase;
		if (cp >= U'A' && cp <= U'Z')
			return detail::CaseType::upperCase;
		return detail::CaseType::none;
	}
	static constexpr uint8_t CaseLowValue[1240] = {
		  1,  1,  1,  2,  2,  1,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  3,  1,  2,  3,  1,  2,  3,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  3,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  1,  1,  1,  1,  2,  1,  2,  1,  2,  1,  1,  2,  2,  2,  2,  2,  1,  2,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  2,  2,  1,  1,  2,  1,  1,  2,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  2,  2,  2,  1,  2,  1,  1,  3,  1,  3,  1,  3,  1,
		  1,  2,  3,  1,  1,  1,  2,  3,  1,  1,  2,  1,  2,  1,  1,  2,  3,  1,  1,  1,  2,  2,  1,  2,  1,  2,  1,  2,  2,  2,  2,  2,
		  2,  1,  2,  1,  1,  1,  2,  2,  1,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  1,  1,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,
		  1,  2,  1,  2,  1,  2,  1,  1,  1,  2,  1,  2,  1,  1,  2,  1,  1,  1,  1,  1,  1,  1,  2,  1
	};
	static constexpr uint8_t CaseLowSize[1240] = {
		  0,  0,  0, 22,  6, 23,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,
		  0,  0,  2,  1,  0,  0,  0,  1,  0,  2,  1,  3,  0,  1,  0,  2,  2,  1,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  1,  0,  0,  1,
		  0,  2,  0,  0,  0,  1,  1,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  1,  0,  1,  1,  0,  0,  3,  0,  0,  0,  0,
		  0,  0,  0,  0, 68, 35,  1,  4,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  2,  0,  1,  0, 16,  8, 34,  0,  1,  2,  2,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  1,  1, 50, 47,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0, 37, 40, 37,  0,  0, 42,  3, 85,  5,  8, 42,  2,191,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  8,  7,  5,  5,  7,  7,  7,  7,  5,  5,  7,  0,  0,  0,  0,  7,  7, 13,  7,  7,  7,  7,  7,  7,  4,
		  1,  3,  0,  0,  2,  1,  3,  0,  3,  1,  3,  7,  4,  2,  1,  3,  0,  0,  0, 12,  0,  0,  0,  2,  1,  2,  0,  0,  4,  0,  0,  0,
		  3,  0,  3,  0,  0,  1,  1,  0,  3,  0, 15, 15,  0,  0, 25, 25, 47, 47,  0,  0,  2,  1,  0,  0,  0,  0,  0,  0,  3,  0,  0,  1,
		  0,  7,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  9,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  2, 42, 13, 79,  6,  4, 25, 25
	};
	static constexpr uint16_t CaseLowStart[1240] = {
		 0x00aa, 0x00b5, 0x00ba, 0x00c0, 0x00d8, 0x00df, 0x00f8, 0x0100, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107, 0x0108, 0x0109, 0x010a, 0x010b, 0x010c, 0x010d, 0x010e, 0x010f, 0x0110,
		 0x0111, 0x0112, 0x0113, 0x0114, 0x0115, 0x0116, 0x0117, 0x0118, 0x0119, 0x011a, 0x011b, 0x011c, 0x011d, 0x011e, 0x011f, 0x0120, 0x0121, 0x0122, 0x0123, 0x0124, 0x0125, 0x0126, 0x0127, 0x0128,
		 0x0129, 0x012a, 0x012b, 0x012c, 0x012d, 0x012e, 0x012f, 0x0130, 0x0131, 0x0132, 0x0133, 0x0134, 0x0135, 0x0136, 0x0137, 0x0139, 0x013a, 0x013b, 0x013c, 0x013d, 0x013e, 0x013f, 0x0140, 0x0141,
		 0x0142, 0x0143, 0x0144, 0x0145, 0x0146, 0x0147, 0x0148, 0x014a, 0x014b, 0x014c, 0x014d, 0x014e, 0x014f, 0x0150, 0x0151, 0x0152, 0x0153, 0x0154, 0x0155, 0x0156, 0x0157, 0x0158, 0x0159, 0x015a,
		 0x015b, 0x015c, 0x015d, 0x015e, 0x015f, 0x0160, 0x0161, 0x0162, 0x0163, 0x0164, 0x0165, 0x0166, 0x0167, 0x0168, 0x0169, 0x016a, 0x016b, 0x016c, 0x016d, 0x016e, 0x016f, 0x0170, 0x0171, 0x0172,
		 0x0173, 0x0174, 0x0175, 0x0176, 0x0177, 0x0178, 0x017a, 0x017b, 0x017c, 0x017d, 0x017e, 0x0181, 0x0183, 0x0184, 0x0185, 0x0186, 0x0188, 0x0189, 0x018c, 0x018e, 0x0192, 0x0193, 0x0195, 0x0196,
		 0x0199, 0x019c, 0x019e, 0x019f, 0x01a1, 0x01a2, 0x01a3, 0x01a4, 0x01a5, 0x01a6, 0x01a8, 0x01a9, 0x01aa, 0x01ac, 0x01ad, 0x01ae, 0x01b0, 0x01b1, 0x01b4, 0x01b5, 0x01b6, 0x01b7, 0x01b9, 0x01bc,
		 0x01bd, 0x01c4, 0x01c5, 0x01c6, 0x01c7, 0x01c8, 0x01c9, 0x01ca, 0x01cb, 0x01cc, 0x01cd, 0x01ce, 0x01cf, 0x01d0, 0x01d1, 0x01d2, 0x01d3, 0x01d4, 0x01d5, 0x01d6, 0x01d7, 0x01d8, 0x01d9, 0x01da,
		 0x01db, 0x01dc, 0x01de, 0x01df, 0x01e0, 0x01e1, 0x01e2, 0x01e3, 0x01e4, 0x01e5, 0x01e6, 0x01e7, 0x01e8, 0x01e9, 0x01ea, 0x01eb, 0x01ec, 0x01ed, 0x01ee, 0x01ef, 0x01f1, 0x01f2, 0x01f3, 0x01f4,
		 0x01f5, 0x01f6, 0x01f9, 0x01fa, 0x01fb, 0x01fc, 0x01fd, 0x01fe, 0x01ff, 0x0200, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207, 0x0208, 0x0209, 0x020a, 0x020b, 0x020c, 0x020d, 0x020e,
		 0x020f, 0x0210, 0x0211, 0x0212, 0x0213, 0x0214, 0x0215, 0x0216, 0x0217, 0x0218, 0x0219, 0x021a, 0x021b, 0x021c, 0x021d, 0x021e, 0x021f, 0x0220, 0x0221, 0x0222, 0x0223, 0x0224, 0x0225, 0x0226,
		 0x0227, 0x0228, 0x0229, 0x022a, 0x022b, 0x022c, 0x022d, 0x022e, 0x022f, 0x0230, 0x0231, 0x0232, 0x0233, 0x023a, 0x023c, 0x023d, 0x023f, 0x0241, 0x0242, 0x0243, 0x0247, 0x0248, 0x0249, 0x024a,
		 0x024b, 0x024c, 0x024d, 0x024e, 0x024f, 0x0295, 0x02c0, 0x02e0, 0x0345, 0x0370, 0x0371, 0x0372, 0x0373, 0x0376, 0x0377, 0x037a, 0x037f, 0x0386, 0x0388, 0x038c, 0x038e, 0x0390, 0x0391, 0x03a3,
		 0x03ac, 0x03cf, 0x03d0, 0x03d2, 0x03d5, 0x03d8, 0x03d9, 0x03da, 0x03db, 0x03dc, 0x03dd, 0x03de, 0x03df, 0x03e0, 0x03e1, 0x03e2, 0x03e3, 0x03e4, 0x03e5, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea,
		 0x03eb, 0x03ec, 0x03ed, 0x03ee, 0x03ef, 0x03f4, 0x03f5, 0x03f7, 0x03f8, 0x03f9, 0x03fb, 0x03fd, 0x0430, 0x0460, 0x0461, 0x0462, 0x0463, 0x0464, 0x0465, 0x0466, 0x0467, 0x0468, 0x0469, 0x046a,
		 0x046b, 0x046c, 0x046d, 0x046e, 0x046f, 0x0470, 0x0471, 0x0472, 0x0473, 0x0474, 0x0475, 0x0476, 0x0477, 0x0478, 0x0479, 0x047a, 0x047b, 0x047c, 0x047d, 0x047e, 0x047f, 0x0480, 0x0481, 0x048a,
		 0x048b, 0x048c, 0x048d, 0x048e, 0x048f, 0x0490, 0x0491, 0x0492, 0x0493, 0x0494, 0x0495, 0x0496, 0x0497, 0x0498, 0x0499, 0x049a, 0x049b, 0x049c, 0x049d, 0x049e, 0x049f, 0x04a0, 0x04a1, 0x04a2,
		 0x04a3, 0x04a4, 0x04a5, 0x04a6, 0x04a7, 0x04a8, 0x04a9, 0x04aa, 0x04ab, 0x04ac, 0x04ad, 0x04ae, 0x04af, 0x04b0, 0x04b1, 0x04b2, 0x04b3, 0x04b4, 0x04b5, 0x04b6, 0x04b7, 0x04b8, 0x04b9, 0x04ba,
		 0x04bb, 0x04bc, 0x04bd, 0x04be, 0x04bf, 0x04c0, 0x04c2, 0x04c3, 0x04c4, 0x04c5, 0x04c6, 0x04c7, 0x04c8, 0x04c9, 0x04ca, 0x04cb, 0x04cc, 0x04cd, 0x04ce, 0x04d0, 0x04d1, 0x04d2, 0x04d3, 0x04d4,
		 0x04d5, 0x04d6, 0x04d7, 0x04d8, 0x04d9, 0x04da, 0x04db, 0x04dc, 0x04dd, 0x04de, 0x04df, 0x04e0, 0x04e1, 0x04e2, 0x04e3, 0x04e4, 0x04e5, 0x04e6, 0x04e7, 0x04e8, 0x04e9, 0x04ea, 0x04eb, 0x04ec,
		 0x04ed, 0x04ee, 0x04ef, 0x04f0, 0x04f1, 0x04f2, 0x04f3, 0x04f4, 0x04f5, 0x04f6, 0x04f7, 0x04f8, 0x04f9, 0x04fa, 0x04fb, 0x04fc, 0x04fd, 0x04fe, 0x04ff, 0x0500, 0x0501, 0x0502, 0x0503, 0x0504,
		 0x0505, 0x0506, 0x0507, 0x0508, 0x0509, 0x050a, 0x050b, 0x050c, 0x050d, 0x050e, 0x050f, 0x0510, 0x0511, 0x0512, 0x0513, 0x0514, 0x0515, 0x0516, 0x0517, 0x0518, 0x0519, 0x051a, 0x051b, 0x051c,
		 0x051d, 0x051e, 0x051f, 0x0520, 0x0521, 0x0522, 0x0523, 0x0524, 0x0525, 0x0526, 0x0527, 0x0528, 0x0529, 0x052a, 0x052b, 0x052c, 0x052d, 0x052e, 0x052f, 0x0531, 0x0560, 0x10a0, 0x10c7, 0x10cd,
		 0x10d0, 0x10fc, 0x13a0, 0x13f8, 0x1c80, 0x1c90, 0x1cbd, 0x1d00, 0x1e00, 0x1e01, 0x1e02, 0x1e03, 0x1e04, 0x1e05, 0x1e06, 0x1e07, 0x1e08, 0x1e09, 0x1e0a, 0x1e0b, 0x1e0c, 0x1e0d, 0x1e0e, 0x1e0f,
		 0x1e10, 0x1e11, 0x1e12, 0x1e13, 0x1e14, 0x1e15, 0x1e16, 0x1e17, 0x1e18, 0x1e19, 0x1e1a, 0x1e1b, 0x1e1c, 0x1e1d, 0x1e1e, 0x1e1f, 0x1e20, 0x1e21, 0x1e22, 0x1e23, 0x1e24, 0x1e25, 0x1e26, 0x1e27,
		 0x1e28, 0x1e29, 0x1e2a, 0x1e2b, 0x1e2c, 0x1e2d, 0x1e2e, 0x1e2f, 0x1e30, 0x1e31, 0x1e32, 0x1e33, 0x1e34, 0x1e35, 0x1e36, 0x1e37, 0x1e38, 0x1e39, 0x1e3a, 0x1e3b, 0x1e3c, 0x1e3d, 0x1e3e, 0x1e3f,
		 0x1e40, 0x1e41, 0x1e42, 0x1e43, 0x1e44, 0x1e45, 0x1e46, 0x1e47, 0x1e48, 0x1e49, 0x1e4a, 0x1e4b, 0x1e4c, 0x1e4d, 0x1e4e, 0x1e4f, 0x1e50, 0x1e51, 0x1e52, 0x1e53, 0x1e54, 0x1e55, 0x1e56, 0x1e57,
		 0x1e58, 0x1e59, 0x1e5a, 0x1e5b, 0x1e5c, 0x1e5d, 0x1e5e, 0x1e5f, 0x1e60, 0x1e61, 0x1e62, 0x1e63, 0x1e64, 0x1e65, 0x1e66, 0x1e67, 0x1e68, 0x1e69, 0x1e6a, 0x1e6b, 0x1e6c, 0x1e6d, 0x1e6e, 0x1e6f,
		 0x1e70, 0x1e71, 0x1e72, 0x1e73, 0x1e74, 0x1e75, 0x1e76, 0x1e77, 0x1e78, 0x1e79, 0x1e7a, 0x1e7b, 0x1e7c, 0x1e7d, 0x1e7e, 0x1e7f, 0x1e80, 0x1e81, 0x1e82, 0x1e83, 0x1e84, 0x1e85, 0x1e86, 0x1e87,
		 0x1e88, 0x1e89, 0x1e8a, 0x1e8b, 0x1e8c, 0x1e8d, 0x1e8e, 0x1e8f, 0x1e90, 0x1e91, 0x1e92, 0x1e93, 0x1e94, 0x1e95, 0x1e9e, 0x1e9f, 0x1ea0, 0x1ea1, 0x1ea2, 0x1ea3, 0x1ea4, 0x1ea5, 0x1ea6, 0x1ea7,
		 0x1ea8, 0x1ea9, 0x1eaa, 0x1eab, 0x1eac, 0x1ead, 0x1eae, 0x1eaf, 0x1eb0, 0x1eb1, 0x1eb2, 0x1eb3, 0x1eb4, 0x1eb5, 0x1eb6, 0x1eb7, 0x1eb8, 0x1eb9, 0x1eba, 0x1ebb, 0x1ebc, 0x1ebd, 0x1ebe, 0x1ebf,
		 0x1ec0, 0x1ec1, 0x1ec2, 0x1ec3, 0x1ec4, 0x1ec5, 0x1ec6, 0x1ec7, 0x1ec8, 0x1ec9, 0x1eca, 0x1ecb, 0x1ecc, 0x1ecd, 0x1ece, 0x1ecf, 0x1ed0, 0x1ed1, 0x1ed2, 0x1ed3, 0x1ed4, 0x1ed5, 0x1ed6, 0x1ed7,
		 0x1ed8, 0x1ed9, 0x1eda, 0x1edb, 0x1edc, 0x1edd, 0x1ede, 0x1edf, 0x1ee0, 0x1ee1, 0x1ee2, 0x1ee3, 0x1ee4, 0x1ee5, 0x1ee6, 0x1ee7, 0x1ee8, 0x1ee9, 0x1eea, 0x1eeb, 0x1eec, 0x1eed, 0x1eee, 0x1eef,
		 0x1ef0, 0x1ef1, 0x1ef2, 0x1ef3, 0x1ef4, 0x1ef5, 0x1ef6, 0x1ef7, 0x1ef8, 0x1ef9, 0x1efa, 0x1efb, 0x1efc, 0x1efd, 0x1efe, 0x1eff, 0x1f08, 0x1f10, 0x1f18, 0x1f20, 0x1f28, 0x1f30, 0x1f38, 0x1f40,
		 0x1f48, 0x1f50, 0x1f59, 0x1f5b, 0x1f5d, 0x1f5f, 0x1f60, 0x1f68, 0x1f70, 0x1f80, 0x1f88, 0x1f90, 0x1f98, 0x1fa0, 0x1fa8, 0x1fb0, 0x1fb6, 0x1fb8, 0x1fbc, 0x1fbe, 0x1fc2, 0x1fc6, 0x1fc8, 0x1fcc,
		 0x1fd0, 0x1fd6, 0x1fd8, 0x1fe0, 0x1fe8, 0x1ff2, 0x1ff6, 0x1ff8, 0x1ffc, 0x2071, 0x207f, 0x2090, 0x2102, 0x2107, 0x210a, 0x210b, 0x210e, 0x2110, 0x2113, 0x2115, 0x2119, 0x2124, 0x2126, 0x2128,
		 0x212a, 0x212f, 0x2130, 0x2134, 0x2139, 0x213c, 0x213e, 0x2145, 0x2146, 0x214e, 0x2160, 0x2170, 0x2183, 0x2184, 0x24b6, 0x24d0, 0x2c00, 0x2c30, 0x2c60, 0x2c61, 0x2c62, 0x2c65, 0x2c67, 0x2c68,
		 0x2c69, 0x2c6a, 0x2c6b, 0x2c6c, 0x2c6d, 0x2c71, 0x2c72, 0x2c73, 0x2c75, 0x2c76, 0x2c7e, 0x2c81, 0x2c82, 0x2c83, 0x2c84, 0x2c85, 0x2c86, 0x2c87, 0x2c88, 0x2c89, 0x2c8a, 0x2c8b, 0x2c8c, 0x2c8d,
		 0x2c8e, 0x2c8f, 0x2c90, 0x2c91, 0x2c92, 0x2c93, 0x2c94, 0x2c95, 0x2c96, 0x2c97, 0x2c98, 0x2c99, 0x2c9a, 0x2c9b, 0x2c9c, 0x2c9d, 0x2c9e, 0x2c9f, 0x2ca0, 0x2ca1, 0x2ca2, 0x2ca3, 0x2ca4, 0x2ca5,
		 0x2ca6, 0x2ca7, 0x2ca8, 0x2ca9, 0x2caa, 0x2cab, 0x2cac, 0x2cad, 0x2cae, 0x2caf, 0x2cb0, 0x2cb1, 0x2cb2, 0x2cb3, 0x2cb4, 0x2cb5, 0x2cb6, 0x2cb7, 0x2cb8, 0x2cb9, 0x2cba, 0x2cbb, 0x2cbc, 0x2cbd,
		 0x2cbe, 0x2cbf, 0x2cc0, 0x2cc1, 0x2cc2, 0x2cc3, 0x2cc4, 0x2cc5, 0x2cc6, 0x2cc7, 0x2cc8, 0x2cc9, 0x2cca, 0x2ccb, 0x2ccc, 0x2ccd, 0x2cce, 0x2ccf, 0x2cd0, 0x2cd1, 0x2cd2, 0x2cd3, 0x2cd4, 0x2cd5,
		 0x2cd6, 0x2cd7, 0x2cd8, 0x2cd9, 0x2cda, 0x2cdb, 0x2cdc, 0x2cdd, 0x2cde, 0x2cdf, 0x2ce0, 0x2ce1, 0x2ce2, 0x2ce3, 0x2ceb, 0x2cec, 0x2ced, 0x2cee, 0x2cf2, 0x2cf3, 0x2d00, 0x2d27, 0x2d2d, 0xa640,
		 0xa641, 0xa642, 0xa643, 0xa644, 0xa645, 0xa646, 0xa647, 0xa648, 0xa649, 0xa64a, 0xa64b, 0xa64c, 0xa64d, 0xa64e, 0xa64f, 0xa650, 0xa651, 0xa652, 0xa653, 0xa654, 0xa655, 0xa656, 0xa657, 0xa658,
		 0xa659, 0xa65a, 0xa65b, 0xa65c, 0xa65d, 0xa65e, 0xa65f, 0xa660, 0xa661, 0xa662, 0xa663, 0xa664, 0xa665, 0xa666, 0xa667, 0xa668, 0xa669, 0xa66a, 0xa66b, 0xa66c, 0xa66d, 0xa680, 0xa681, 0xa682,
		 0xa683, 0xa684, 0xa685, 0xa686, 0xa687, 0xa688, 0xa689, 0xa68a, 0xa68b, 0xa68c, 0xa68d, 0xa68e, 0xa68f, 0xa690, 0xa691, 0xa692, 0xa693, 0xa694, 0xa695, 0xa696, 0xa697, 0xa698, 0xa699, 0xa69a,
		 0xa69b, 0xa722, 0xa723, 0xa724, 0xa725, 0xa726, 0xa727, 0xa728, 0xa729, 0xa72a, 0xa72b, 0xa72c, 0xa72d, 0xa72e, 0xa72f, 0xa732, 0xa733, 0xa734, 0xa735, 0xa736, 0xa737, 0xa738, 0xa739, 0xa73a,
		 0xa73b, 0xa73c, 0xa73d, 0xa73e, 0xa73f, 0xa740, 0xa741, 0xa742, 0xa743, 0xa744, 0xa745, 0xa746, 0xa747, 0xa748, 0xa749, 0xa74a, 0xa74b, 0xa74c, 0xa74d, 0xa74e, 0xa74f, 0xa750, 0xa751, 0xa752,
		 0xa753, 0xa754, 0xa755, 0xa756, 0xa757, 0xa758, 0xa759, 0xa75a, 0xa75b, 0xa75c, 0xa75d, 0xa75e, 0xa75f, 0xa760, 0xa761, 0xa762, 0xa763, 0xa764, 0xa765, 0xa766, 0xa767, 0xa768, 0xa769, 0xa76a,
		 0xa76b, 0xa76c, 0xa76d, 0xa76e, 0xa76f, 0xa779, 0xa77a, 0xa77b, 0xa77c, 0xa77d, 0xa77f, 0xa780, 0xa781, 0xa782, 0xa783, 0xa784, 0xa785, 0xa786, 0xa787, 0xa78b, 0xa78c, 0xa78d, 0xa78e, 0xa790,
		 0xa791, 0xa792, 0xa793, 0xa796, 0xa797, 0xa798, 0xa799, 0xa79a, 0xa79b, 0xa79c, 0xa79d, 0xa79e, 0xa79f, 0xa7a0, 0xa7a1, 0xa7a2, 0xa7a3, 0xa7a4, 0xa7a5, 0xa7a6, 0xa7a7, 0xa7a8, 0xa7a9, 0xa7aa,
		 0xa7af, 0xa7b0, 0xa7b5, 0xa7b6, 0xa7b7, 0xa7b8, 0xa7b9, 0xa7ba, 0xa7bb, 0xa7bc, 0xa7bd, 0xa7be, 0xa7bf, 0xa7c0, 0xa7c1, 0xa7c2, 0xa7c3, 0xa7c4, 0xa7c8, 0xa7c9, 0xa7ca, 0xa7d0, 0xa7d1, 0xa7d3,
		 0xa7d5, 0xa7d6, 0xa7d7, 0xa7d8, 0xa7d9, 0xa7f2, 0xa7f5, 0xa7f6, 0xa7f8, 0xab30, 0xab5c, 0xab70, 0xfb00, 0xfb13, 0xff21, 0xff41
	};
	inline constexpr detail::CaseType CaseLow(char32_t cp) {
		size_t left = 0, right = 1239;
		while (left < right) {
			size_t center = (right - left) / 2;
			if (cp < detail::CaseLowStart[center])
				right = center - 1;
			else
				left = center;
		}
		if (cp - detail::CaseLowStart[left] > detail::CaseLowSize[left])
			return detail::CaseType::none;
		return static_cast<detail::CaseType>(detail::CaseLowValue[left]);
	}
	static constexpr uint8_t CaseHighValue[90] = {
		  2,  1,  2,  1,  2,  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,  1,  2,  1,  2,
		  2,  2,  2,  2,  2,  1,  1,  1,  1,  2,  1,  2,  2,  2,  2,  1,  2,  2,  2,  2,  2,  1,  2,  1,  2,  1,  2,  1,  2,  1,
		  2,  1,  2,  1,  2,  1,  1,  2,  1,  1,  2,  1,  1,  2,  1,  1,  2,  1,  1,  2,  1,  1,  1,  1,  1,  2,  1,  2,  2,  2
	};
	static constexpr uint8_t CaseHighSize[90] = {
		 39, 39, 35, 35, 10, 14,  6,  1, 10, 14,  6,  1,  0,  2, 41,  8, 50, 50, 31, 31, 31, 31, 25, 25, 25,  6, 17, 25, 25,  0,
		  1,  0,  1,  3,  7,  3,  0,  6, 10, 25, 25,  1,  3,  7,  6, 25,  1,  3,  4,  0,  6, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		 25, 25, 25, 27, 24, 24,  5, 24, 24,  5, 24, 24,  5, 24, 24,  5, 24, 24,  5,  0,  0,  9, 19,  5, 61, 33, 33, 25, 25, 25
	};
	static constexpr uint32_t CaseHighStart[90] = {
		 0x10400, 0x10428, 0x104b0, 0x104d8, 0x10570, 0x1057c, 0x1058c, 0x10594, 0x10597, 0x105a3, 0x105b3, 0x105bb, 0x10780, 0x10783, 0x10787, 0x107b2, 0x10c80, 0x10cc0, 0x118a0, 0x118c0, 0x16e40, 0x16e60, 0x1d400,
		 0x1d41a, 0x1d434, 0x1d44e, 0x1d456, 0x1d468, 0x1d482, 0x1d49c, 0x1d49e, 0x1d4a2, 0x1d4a5, 0x1d4a9, 0x1d4ae, 0x1d4b6, 0x1d4bb, 0x1d4bd, 0x1d4c5, 0x1d4d0, 0x1d4ea, 0x1d504, 0x1d507, 0x1d50d, 0x1d516, 0x1d51e,
		 0x1d538, 0x1d53b, 0x1d540, 0x1d546, 0x1d54a, 0x1d552, 0x1d56c, 0x1d586, 0x1d5a0, 0x1d5ba, 0x1d5d4, 0x1d5ee, 0x1d608, 0x1d622, 0x1d63c, 0x1d656, 0x1d670, 0x1d68a, 0x1d6a8, 0x1d6c2, 0x1d6dc, 0x1d6e2, 0x1d6fc,
		 0x1d716, 0x1d71c, 0x1d736, 0x1d750, 0x1d756, 0x1d770, 0x1d78a, 0x1d790, 0x1d7aa, 0x1d7c4, 0x1d7ca, 0x1d7cb, 0x1df00, 0x1df0b, 0x1df25, 0x1e030, 0x1e900, 0x1e922, 0x1f130, 0x1f150, 0x1f170
	};
	inline constexpr detail::CaseType CaseHigh(char32_t cp) {
		size_t left = 0, right = 89;
		while (left < right) {
			size_t center = (right - left) / 2;
			if (cp < detail::CaseHighStart[center])
				right = center - 1;
			else
				left = center;
		}
		if (cp - detail::CaseHighStart[left] > detail::CaseHighSize[left])
			return detail::CaseType::none;
		return static_cast<detail::CaseType>(detail::CaseHighValue[left]);
	}
	inline constexpr detail::CaseType GetCase(char32_t cp) {
		if (cp < 0x80)
			return detail::CaseAscii(cp);
		if (cp < 0x10000)
			return detail::CaseLow(cp);
		return detail::CaseHigh(cp);
	}
}
